<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="4.1.5_3_10485" segtype="sentence" srclang="EN"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN">
        <seg># / (reset)</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># /</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># /1</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025614Z" creationid="mokoo" creationdate="20190316T025614Z">
        <seg>use Mojolicious::Lite;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># /detection</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025633Z" creationid="mokoo" creationdate="20190316T025633Z">
        <seg>use Mojolicious::Lite;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># /foo?user=sri</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># /foo?user=sri</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># /hello/test</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T015335Z" creationid="mokoo" creationdate="20190310T015335Z">
        <seg>use Mojolicious::Lite;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># /test</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T071402Z" creationid="mokoo" creationdate="20190309T071402Z">
        <seg># /test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># A helper to identify visitors</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T125141Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># 訪問者を特定するヘルパー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Access request information</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># リクエストの情報にアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Access session data in action and template</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># アクションとテンプレートの中のセッションデータへのアクセス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Admin section</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># Adminの部分</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Authenticate based on name parameter</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># nameパラメータを元にした認証</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Authenticated</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T071720Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># 認証された</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Blocking</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># ブロッキング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Check file size</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># ファイルサイズのチェック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Concurrent non-blocking</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># 並列のノンブロッキング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Disable detection and allow the following routes to re-enable it on demand</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T132441Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># 検出を無効にして、以降のルートにおいて必要であれば再び有効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Display message</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T074716Z" creationid="mokoo" creationdate="20190309T074716Z">
        <seg># メッセージを表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Echo the request body and send custom header with response</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># リクエストボディをエコーして、レスポンスのついたカスタムヘッダを送信</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Event loop</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190210T051715Z" creationid="mokoo" creationdate="20190210T051715Z">
        <seg># イベントループ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># GET /hello</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T015343Z" creationid="mokoo" creationdate="20190310T015343Z">
        <seg># "hello.html.ep"というテンプレートを描画</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Global logic shared by all routes</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># すべてのルートで共有されるグローバルなロジック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># HTML/XML DOM parser with CSS selectors</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190210T051618Z" creationid="mokoo" creationdate="20190210T051618Z">
        <seg># CSSセレクタ付きHTML/XML DOMパーサー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># HTTP/WebSocket server</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190210T051702Z" creationid="mokoo" creationdate="20190210T051702Z">
        <seg># HTTP/WebSocket サーバ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># HTTP/WebSocket user agent</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190210T051556Z" creationid="mokoo" creationdate="20190210T051556Z">
        <seg># HTTP/WebSocket ユーザエージェント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Increase limit to 1GiB</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T122321Z" creationid="mokoo" creationdate="20190309T122321Z">
        <seg># 制限を1GBに増やす</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Load message into memory</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T074707Z" creationid="mokoo" creationdate="20190309T074707Z">
        <seg># メッセージをメモリに読み込む</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Local logic shared only by routes in this group</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T131920Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># グループ内のルートだけに共有されるローカルなロジック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Modify the received JSON document and return it</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T064622Z" creationid="mokoo" creationdate="20190309T064622Z">
        <seg># 受け取ったJSONドキュメントを変更して返す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Multipart upload handler</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># Multipartのアップロードのハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Non-blocking</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># ノンブロッキング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Not authenticated</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># 認証されなかった</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Only reached when authenticated</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># / (with authentication)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Perl-ish templates</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190210T051643Z" creationid="mokoo" creationdate="20190210T051643Z">
        <seg># Perl風テンプレート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Prepare mode specific message during startup</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T135124Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># startupの間にモードに合ったメッセージを準備する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Process uploaded file</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T115659Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># アップロードしたファイルを処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Render template "templates/foo/bar.html.ep"</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># "templates/foo/bar.html.ep"というテンプレートを描画する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Render the template "hello.html.ep"</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># "hello.html.ep"というテンプレートを描画</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Render the template "index.html.ep"</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># "index.html.ep"というテンプレートを描画</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Route leading to an action that renders a template</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># テンプレートを描画するアクションに至るルート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Route leading to an action that renders some text</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T063736Z" creationid="mokoo" creationdate="20190309T063736Z">
        <seg># テキストをレンダリングするアクションへのルーティング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Start the "daemon" command</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T063507Z" creationid="mokoo" creationdate="20190309T063507Z">
        <seg># "daemon"コマンドを開始する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Upload form in DATA section</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># DATAセクションのformをアップロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Use @ARGV to pick a command</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T132312Z" creationid="mokoo" creationdate="20190309T132312Z">
        <seg># @ARGVを使ってコマンドを取得する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Use helper in action and template</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg># アクションとテンプレートのなかでヘルパーを使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ./myapp.pl daemon -l http://*:8080</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$ ./myapp.pl daemon --listen http://*:8080</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ./myapp.pl get /</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T131823Z" creationid="mokoo" creationdate="20190309T062233Z">
        <seg>$ ./myapp.pl get /</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ mojo generate lite_app myapp.pl</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T122918Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$ mojo generate lite_app myapp.pl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ morbo ./myapp.pl</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$ morbo myapp.pl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;app-&gt;log-&gt;debug("Request from $user");</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T022734Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;app-&gt;log-&gt;debug("Request from $user");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;app-&gt;log-&gt;debug('Rendering mode specific message');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T135132Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;app-&gt;log-&gt;debug('Rendering mode specific message');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;on(json =&gt; sub {</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T022807Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;on(json =&gt; sub {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(data =&gt; $c-&gt;req-&gt;body);</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123452Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(data =&gt; $c-&gt;req-&gt;body);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(json =&gt; $dom-&gt;find('h1, h2, h3')-&gt;map('text')-&gt;to_array);</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134729Z" creationid="mokoo" creationdate="20190312T134729Z">
        <seg>$c-&gt;render(json =&gt; $dom-&gt;find('h1, h2, h3')-&gt;map('text')-&gt;to_array);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(template =&gt; 'denied');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T131215Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(template =&gt; 'denied');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(template =&gt; 'detected');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T132127Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(template =&gt; 'detected');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(template =&gt; 'foo/bar');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T133911Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(template =&gt; 'foo/bar');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(template =&gt; 'groovy', format =&gt; 'txt');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130803Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(template =&gt; 'groovy', format =&gt; 'txt');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; "Hello $user.");</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123312Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; "Hello $user.");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; "Our :bar placeholder matched $bar");</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T125456Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; "Our :bar placeholder matched $bar");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; "Our :foo placeholder matched $foo");</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130915Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; "Our :foo placeholder matched $foo");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; "Request by $ua reached $host.");</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123442Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; "Request by $ua reached $host.");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; "Thanks for uploading $size byte file $name.");</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134608Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; "Thanks for uploading $size byte file $name.");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; "You called /whatever with $method.");</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130702Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; "You called /whatever with $method.");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; "You uploaded $size bytes to /hello.");</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130640Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; "You uploaded $size bytes to /hello.");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; "You're not Bender.");</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T131853Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; "You're not Bender.");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; "You're not awesome enough.");</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T131937Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; "You're not awesome enough.");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; $msg);</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T135135Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; $msg);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; 'Bye World!');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130649Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; 'Bye World!');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; 'Congratulations, you are using a cool browser.');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134110Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; 'Congratulations, you are using a cool browser.');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; 'Dude, you really need to upgrade to Firefox.');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134115Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; 'Dude, you really need to upgrade to Firefox.');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; 'Hello Mojolicious.');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134121Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; 'Hello Mojolicious.');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; 'Hello World!');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130624Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; 'Hello World!');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render(text =&gt; 'hello world');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T132239Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render(text =&gt; 'hello world');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;render;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T022622Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;render;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;res-&gt;headers-&gt;header('X-Bender' =&gt; 'Bite my shiny metal ass!');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123449Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;res-&gt;headers-&gt;header('X-Bender' =&gt; 'Bite my shiny metal ass!');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;respond_to(</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T132532Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;respond_to(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;send({json =&gt; $hash});</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T022820Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;send({json =&gt; $hash});</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$c-&gt;session-&gt;{counter}++;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134144Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>$c-&gt;session-&gt;{counter}++;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$hash-&gt;{msg} = "echo: $hash-&gt;{msg}";</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025839Z" creationid="mokoo" creationdate="20190316T025839Z">
        <seg>my ($self, $hash) = @_;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>%= select_field country =&gt; [[Germany =&gt; 'de', selected =&gt; 'selected'], 'en']</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T013241Z">
        <seg>%= select_field country =&gt; [[Germany =&gt; 'de', selected =]] 'selected'], 'en']</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>%= select_field country =&gt; [[Germany =&gt; 'de'], 'en'], id =&gt; 'eu'</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T013241Z">
        <seg>%= select_field country =&gt; [[Germany =&gt; 'de'], 'en'], id =]] 'eu'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>%= select_field country =&gt; [c(EU =&gt; [[Germany =&gt; 'de'], 'en'], id =&gt; 'eu')]</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T013241Z">
        <seg>%= select_field country =&gt; [c(EU =&gt; [[Germany =&gt; 'de'], 'en'], id =]] 'eu')]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>...List of available commands (or automatically detected environment)...</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123024Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>...利用可能なコマンドが表示(または自動的に環境が検知される)...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;%= link_to Hello  =&gt; 'hello' %&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025528Z" creationid="mokoo" creationdate="20190316T025528Z">
        <seg>__DATA__;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=cut</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T030803Z" creationid="mokoo" creationdate="20190310T023713Z">
        <seg>=head1 参考

[[Mojolicious]], L&lt;Mojolicious::Guides&gt;, L&lt;http://mojolicio.us&gt;.

(2019/03/16 Mojolicious 8.12)

=cut
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=encoding utf8</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014143Z" creationid="mokoo" creationdate="20190310T014143Z">
        <seg>=encoding utf8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head1 DESCRIPTION</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190210T051725Z" creationid="mokoo" creationdate="20190210T051725Z">
        <seg>=head1 説明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head1 MORE</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T135527Z" creationid="mokoo" creationdate="20190309T125953Z">
        <seg>=head1 もっと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head1 NAME</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head1 名前</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head1 SEE ALSO</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190210T051950Z" creationid="mokoo" creationdate="20190210T051950Z">
        <seg>=head1 参考</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head1 SUPPORT</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T005019Z" creationid="mokoo" creationdate="20190310T005019Z">
        <seg>=head1 サポート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head1 SYNOPSIS</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190210T051540Z" creationid="mokoo" creationdate="20190210T051540Z">
        <seg>=head1 使い方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head1 TUTORIAL</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head1 チュートリアル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Blocks</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 ブロック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Built-in C&lt;exception&gt; and C&lt;not_found&gt; pages</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 組み込みの例外(C&lt;exception&gt;)とノットファウンド(C&lt;not_found&gt;)ページ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Commands</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 コマンド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Conditions</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134100Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 条件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Content negotiation</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 コンテントネゴシエーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Extending L&lt;Test::Mojo&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=head2 Extending [[Test::Mojo]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 External templates</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 外部テンプレート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 File uploads</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 ファイルアップロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Formats</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 フォーマット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 GET/POST parameters</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 GET/POSTパラメーター</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 HTTP methods</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 HTTPメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Hello World</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Helpers</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 ヘルパー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Home</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T074033Z" creationid="mokoo" creationdate="20190309T074033Z">
        <seg>=head2 ホーム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 L&lt;Test::Mojo&gt; at a glance</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=head2 [[Test::Mojo]] at a glance</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Layouts</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 レイアウト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Mode</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 モード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Optional placeholders</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T071112Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 プレースホルダーのオプション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Placeholders</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 プレースホルダー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Relaxed Placeholders</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 リラックスプレースホルダー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Reloading</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 リロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Restrictive placeholders</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 制約的なプレースホルダー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Route names</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 ルーティング名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Routes</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 ルーティング(Routes)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Sessions</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 セッション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Stash and templates</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 スタッシュとテンプレート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Static files</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 静的ファイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Testing</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T125754Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 テスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 The L&lt;Test::Mojo&gt; object</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=head2 The [[Test::Mojo]] object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Under</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T131035Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 アンダー (Under)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 User agent</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 ユーザーエージェント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 WebSockets</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T122822Z" creationid="mokoo" creationdate="20190309T122822Z">
        <seg>=head2 WebSocket</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=head2 Wildcard placeholders</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>=head2 ワイルドカードプレースホルダー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * B&lt;When we disagree, try to understand why.&gt; Disagreements, both social
and technical, happen all the time and L&lt;Mojolicious&gt; is no exception.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * B&lt;When we disagree, try to understand why.&gt; Disagreements, both social
and technical, happen all the time and [[Mojolicious]] is no exception.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Asset::File&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012451Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>=item * [[Mojo::Asset::File]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Asset::Memory&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Asset::Memory]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Asset&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Asset]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Base&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Base]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::ByteStream&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::ByteStream]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Cache&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Cache]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Collection&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Collection]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Content::MultiPart&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Content::MultiPart]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Content::Single&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Content::Single]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Content&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Content]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Cookie::Request&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Cookie::Request]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Cookie::Response&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Cookie::Response]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Cookie&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Cookie]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::DOM::CSS&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::DOM::CSS]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::DOM::HTML&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::DOM::HTML]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::DOM&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::DOM]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Date&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Date]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::DynamicMethods&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::DynamicMethods]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::EventEmitter&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::EventEmitter]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Exception&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Exception]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::File&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::File]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Headers&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Headers]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::HelloWorld&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::HelloWorld]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Home&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Home]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::IOLoop::Client&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::IOLoop::Client]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::IOLoop::Delay&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::IOLoop::Delay]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::IOLoop::Server&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::IOLoop::Server]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::IOLoop::Stream&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::IOLoop::Stream]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::IOLoop::Subprocess&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::IOLoop::Subprocess]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::IOLoop::TLS&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::IOLoop::TLS]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::IOLoop&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::IOLoop]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::JSON::Pointer&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::JSON::Pointer]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::JSON&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::JSON]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Loader&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Loader]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Log&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Log]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Message::Request&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Message::Request]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Message::Response&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Message::Response]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Message&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Message]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Parameters&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Parameters]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Path&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Path]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Promise&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Promise]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Reactor::EV&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Reactor::EV]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Reactor::Poll&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Reactor::Poll]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Reactor&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Reactor]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Server::CGI&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Server::CGI]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Server::Daemon&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Server::Daemon]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Server::Hypnotoad&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Server::Hypnotoad]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Server::Morbo::Backend::Poll&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Server::Morbo::Backend::Poll]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Server::Morbo::Backend&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Server::Morbo::Backend]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Server::Morbo&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Server::Morbo]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Server::PSGI&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Server::PSGI]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Server::Prefork&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Server::Prefork]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Server&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Server]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Template&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Template]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Transaction::HTTP&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Transaction::HTTP]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Transaction::WebSocket&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Transaction::WebSocket]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Transaction&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Transaction]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::URL&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::URL]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Upload&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Upload]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::UserAgent::CookieJar&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::UserAgent::CookieJar]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::UserAgent::Proxy&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::UserAgent::Proxy]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::UserAgent::Server&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::UserAgent::Server]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::UserAgent::Transactor&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::UserAgent::Transactor]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::UserAgent&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::UserAgent]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::Util&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::Util]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo::WebSocket&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo::WebSocket]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojo&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojo]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::Author::cpanify&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::Author::cpanify]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::Author::generate::app&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::Author::generate::app]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::Author::generate::lite_app&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::Author::generate::lite_app]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::Author::generate::makefile&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::Author::generate::makefile]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::Author::generate::plugin&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::Author::generate::plugin]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::Author::generate&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::Author::generate]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::Author::inflate&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::Author::inflate]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::cgi&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::cgi]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::daemon&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::daemon]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::eval&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::eval]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::get&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::get]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::prefork&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::prefork]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::psgi&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::psgi]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::routes&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::routes]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command::version&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command::version]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Command&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Command]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Commands&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Commands]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Controller&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Controller]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Lite&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Lite]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Plugin::Config&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Plugin::Config]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Plugin::DefaultHelpers&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Plugin::DefaultHelpers]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Plugin::EPLRenderer&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Plugin::EPLRenderer]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Plugin::EPRenderer&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Plugin::EPRenderer]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Plugin::HeaderCondition&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Plugin::HeaderCondition]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Plugin::JSONConfig&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Plugin::JSONConfig]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Plugin::Mount&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Plugin::Mount]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Plugin::TagHelpers&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Plugin::TagHelpers]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Plugin&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Plugin]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Plugins&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Plugins]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Renderer&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Renderer]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Routes::Match&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Routes::Match]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Routes::Pattern&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Routes::Pattern]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Routes::Route&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Routes::Route]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Routes&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Routes]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Sessions&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Sessions]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Static&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Static]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Types&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Types]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Validator::Validation&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Validator::Validation]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious::Validator&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious::Validator]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Mojolicious&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Mojolicious]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;Test::Mojo&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[Test::Mojo]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item * L&lt;ojo&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item * [[ojo]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Minion&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Minion]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojo::DOM&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojo::DOM]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojo::IOLoop&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojo::IOLoop]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojo::JSON&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojo::JSON]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojo::Pg&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojo::Pg]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojo::Server::CGI&gt;, L&lt;Mojo::Server::PSGI&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013057Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojo::Server::CGI]], [[Mojo::Server::PSGI]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojo::Server::Daemon&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojo::Server::Daemon]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojo::Server::Prefork&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojo::Server::Prefork]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojo::Template&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojo::Template]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojo::UserAgent&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojo::UserAgent]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Guides::Contributing&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Guides::Contributing]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Guides::Cookbook&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Guides::Cookbook]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Guides::FAQ&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Guides::FAQ]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Guides::Growing&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Guides::Growing]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Guides::Rendering&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Guides::Rendering]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Guides::Routing&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Guides::Routing]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Guides::Testing&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Guides::Testing]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Guides::Tutorial&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Guides::Tutorial]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Plugin::Config&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Plugin::Config]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Plugin::DefaultHelpers&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Plugin::DefaultHelpers]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Plugin::EPLRenderer&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Plugin::EPLRenderer]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Plugin::EPRenderer&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Plugin::EPRenderer]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Plugin::HeaderCondition&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Plugin::HeaderCondition]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Plugin::JSONConfig&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Plugin::JSONConfig]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Plugin::Mount&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Plugin::Mount]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Mojolicious::Plugin::TagHelpers&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Mojolicious::Plugin::TagHelpers]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;Test::Mojo&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[Test::Mojo]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=item L&lt;ojo&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>=item [[ojo]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>@@ counter.html.ep</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T022413Z" creationid="mokoo" creationdate="20190316T022413Z">
        <seg>__DATA__;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>@@ denied.html.ep</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025620Z" creationid="mokoo" creationdate="20190316T025620Z">
        <seg>__DATA__;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>@@ groovy.html.ep</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025600Z" creationid="mokoo" creationdate="20190316T025600Z">
        <seg>__DATA__;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>@@ index.html.ep</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025828Z" creationid="mokoo" creationdate="20190316T025828Z">
        <seg>__DATA__;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>@@ secret.html.ep</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>@@ secret.html.ep</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>@@ with_layout.html.ep</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T124754Z" creationid="mokoo" creationdate="20190310T001946Z">
        <seg>@@ with_layout.html.ep</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A
default configuration filename in the application home directory will be
generated from the value of L&lt;Mojolicious/"moniker"&gt; (C&lt;$moniker.json&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A
default configuration filename in the application home directory will be
generated from the value of [[Mojolicious/"moniker"]] (C&lt;$moniker.json&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A C&lt;format&gt; value can also be passed to L&lt;Mojolicious::Controller/"url_for"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A C&lt;format&gt; value can also be passed to [[Mojolicious::Controller/"url_for"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A call to L&lt;Mojolicious/"start"&gt; (C&lt;app-E&lt;gt&gt;start&gt;), which starts the command
system, should be the last expression in your application, because its return
value can be significant.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T023941Z" creationid="mokoo" creationdate="20190309T063440Z">
        <seg>[[Mojolicious]]のC&lt;start&gt; (C&lt;app-E&lt;gt&gt;start&gt;)を呼び出すと、コマンドシステムが開始されます。この呼び出しはアプリケーションの最後に置くべきです。というのは、返り値が大きな影響をもつ場合があるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A callback used to decide if a cookie should be ignored by L&lt;/"collect"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A callback used to decide if a cookie should be ignored by [[/"collect"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A callback used to deserialize sessions, defaults to L&lt;Mojo::JSON/"j"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A callback used to deserialize sessions, defaults to [[Mojo::JSON/"j"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A callback used to deserialize subprocess return values, defaults to using
L&lt;Storable&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A callback used to deserialize subprocess return values, defaults to using
[[Storable]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A callback used to escape the results of escaped expressions, defaults to
L&lt;Mojo::Util/"xml_escape"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A callback used to escape the results of escaped expressions, defaults to
[[Mojo::Util/"xml_escape"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A callback used to serialize sessions, defaults to L&lt;Mojo::JSON/"encode_json"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A callback used to serialize sessions, defaults to [[Mojo::JSON/"encode_json"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A callback used to serialize subprocess return values, defaults to using
L&lt;Storable&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A callback used to serialize subprocess return values, defaults to using
[[Storable]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A default configuration filename in the application home
directory will be generated from the value of L&lt;Mojolicious/"moniker"&gt;
(C&lt;$moniker.conf&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A default configuration filename in the application home
directory will be generated from the value of [[Mojolicious/"moniker"]]
(C&lt;$moniker.conf&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A default subscriber that turns all errors into warnings will usually be added
by L&lt;Mojo::IOLoop&gt; as a fallback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A default subscriber that turns all errors into warnings will usually be added
by [[Mojo::IOLoop]] as a fallback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A fast and fun way to get started developing web applications with
L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A fast and fun way to get started developing web applications with
[[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A few stash values like C&lt;template&gt;,
C&lt;text&gt; and C&lt;data&gt; are reserved and will be used by
L&lt;Mojolicious::Controller/"render"&gt; to decide how a response should be
generated.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013343Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>テンプレートはC&lt;DATA&gt;セクションに埋め込むことができます。C&lt;template&gt;、C&lt;text&gt;、C&lt;data&gt;などのいくつかがスタッシュの値として予約されており、[[Mojolicious::Controller]]のC&lt;render&gt;で使われて、レスポンスをどのように生成するかが決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A full featured HTTP user agent for use in your applications, defaults to a
L&lt;Mojo::UserAgent&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A full featured HTTP user agent for use in your applications, defaults to a
[[Mojo::UserAgent]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A full featured job queue for L&lt;Mojolicious&gt; with support for multiple backends
(such as L&lt;PostgreSQL|http://www.postgresql.org&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A full featured job queue for [[Mojolicious]] with support for multiple backends
(such as [[PostgreSQL|http://www.postgresql.org]]).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A fundamental concept of the L&lt;Mojolicious&gt; router is that extracted
placeholder values are turned into a hash.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A fundamental concept of the [[Mojolicious]] router is that extracted
placeholder values are turned into a hash.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A good rule of thumb is two
worker processes per CPU core for applications that perform mostly non-blocking
operations, blocking operations often require more and benefit from decreasing
concurrency with L&lt;Mojo::Server::Daemon/"clients"&gt; (often as low as C&lt;1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A good rule of thumb is two
worker processes per CPU core for applications that perform mostly non-blocking
operations, blocking operations often require more and benefit from decreasing
concurrency with [[Mojo::Server::Daemon/"clients"]] (often as low as C&lt;1&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A good rule of thumb is two worker
processes per CPU core for applications that perform mostly non-blocking
operations, blocking operations often require more and benefit from decreasing
concurrency with L&lt;/"clients"&gt; (often as low as C&lt;1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A good rule of thumb is two worker
processes per CPU core for applications that perform mostly non-blocking
operations, blocking operations often require more and benefit from decreasing
concurrency with [[/"clients"]] (often as low as C&lt;1&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A list of all built-in helpers can be found in
L&lt;Mojolicious::Plugin::DefaultHelpers&gt; and L&lt;Mojolicious::Plugin::TagHelpers&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A list of all built-in helpers can be found in
[[Mojolicious::Plugin::DefaultHelpers]] and [[Mojolicious::Plugin::TagHelpers]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A list of all built-in ones can be found in
L&lt;Mojolicious::Plugin::DefaultHelpers&gt; and L&lt;Mojolicious::Plugin::TagHelpers&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T125235Z" creationid="mokoo" creationdate="20190309T070724Z">
        <seg>すべての組み込みヘルパーのリストは、 [[Mojolicious::Plugin::DefaultHelpers]] と [[Mojolicious::Plugin::TagHelpers]]にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A lot more documentation and examples by many different authors can be found in
the L&lt;Mojolicious wiki|http://github.com/mojolicious/mojo/wiki&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A lot more documentation and examples by many different authors can be found in
the [[Mojolicious wiki|http://github.com/mojolicious/mojo/wiki]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A minimal embeddable application is nothing more than a subclass of
L&lt;Mojolicious&gt;, containing a C&lt;handler&gt; method accepting
L&lt;Mojolicious::Controller&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A minimal embeddable application is nothing more than a subclass of
[[Mojolicious]], containing a C&lt;handler&gt; method accepting
[[Mojolicious::Controller]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A mode other than C&lt;development&gt; will raise the log level from
C&lt;debug&gt; to C&lt;info&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T023555Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>C&lt;development&gt;以外のモードでは、ログレベルがC&lt;debug&gt;からC&lt;info&gt;に上がります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A powerful web development toolkit, with all the basic tools and helpers needed
to write simple web applications and higher level web frameworks, such as
L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190210T051442Z">
        <seg>シンプルなWebアプリケーションや[[Mojolicious]] などの高レベルのWebフレームワークを書くために必要なすべての基本的なツールとヘルパーを備えた強力なWeb開発ツールキット。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A quick example-driven introduction to the wonders of L&lt;Mojolicious::Lite&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T122629Z" creationid="mokoo" creationdate="20190309T022704Z">
        <seg>[[Mojolicious::Lite]]の特徴を簡単なサンプルで紹介していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A reference back to the application that dispatched to this controller, usually
a L&lt;Mojolicious&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A reference back to the application that dispatched to this controller, usually
a [[Mojolicious]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A simple Hello World application can look like this, L&lt;strict&gt;, L&lt;warnings&gt;,
L&lt;utf8&gt; and Perl 5.10 L&lt;features|feature&gt; are automatically enabled and a few
L&lt;functions|Mojolicious::Lite/"FUNCTIONS"&gt; imported, when you use
L&lt;Mojolicious::Lite&gt;, turning your script into a full featured web application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025306Z" creationid="mokoo" creationdate="20190309T061314Z">
        <seg>かんたんなHello Worldアプリケーションはこのようになります。C&lt;strict&gt;, C&lt;warnings&gt;,
C&lt;utf8&gt; 、Perl 5.10のC&lt;features|feature&gt; が自動的に有効になり、
[[Mojolicious::Lite]]のC&lt;functions&gt; がいくつかインポートされます。
[[Mojolicious::Lite]]を使うと、あなたのスクリプトは完全な機能を備えたウェブアプリケーションになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A simple helper can be registered with the function
L&lt;Mojolicious::Lite/"helper"&gt; to make our model available to all actions and
templates.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A simple helper can be registered with the function
[[Mojolicious::Lite/"helper"]] to make our model available to all actions and
templates.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A slightly modified version of the pattern moving some application logic into
the I&lt;controller&gt; is the foundation of pretty much every web framework these
days, including L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A slightly modified version of the pattern moving some application logic into
the I&lt;controller&gt; is the foundation of pretty much every web framework these
days, including [[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A tiny wrapper around L&lt;DBD::Pg&gt; that makes
L&lt;PostgreSQL|http://www.postgresql.org&gt; a lot of fun to use with
L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A tiny wrapper around [[DBD::Pg]] that makes
[[PostgreSQL|http://www.postgresql.org]] a lot of fun to use with
[[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A true value may be used to
pass along additional information which can then be retrieved with
L&lt;Mojolicious::Validator::Validation/"error"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>A true value may be used to
pass along additional information which can then be retrieved with
[[Mojolicious::Validator::Validation/"error"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A very easy way to make placeholders more restrictive are alternatives, you just
make a list of possible values.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130903Z" creationid="mokoo" creationdate="20190309T071357Z">
        <seg>プレースホルダーにより多くの制約を加えるには、選択肢を使うのが一番簡単です。候補となる値のリストを作るだけでOKです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Accept TCP/IP and UNIX domain socket connections with L&lt;Mojo::IOLoop::Server&gt;
and create stream objects (usually L&lt;Mojo::IOLoop::Stream&gt;, takes the same
arguments as L&lt;Mojo::IOLoop::Server/"listen"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Accept TCP/IP and UNIX domain socket connections with [[Mojo::IOLoop::Server]]
and create stream objects (usually [[Mojo::IOLoop::Stream]], takes the same
arguments as [[Mojo::IOLoop::Server/"listen"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Access C&lt;multipart/form-data&gt; file uploads, usually L&lt;Mojo::Upload&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Access C&lt;multipart/form-data&gt; file uploads, usually [[Mojo::Upload]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Access application with L&lt;Mojo::UserAgent::Server/"app"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Access application with [[Mojo::UserAgent::Server/"app"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Access message cookies, usually L&lt;Mojo::Cookie::Request&gt; or
L&lt;Mojo::Cookie::Response&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Access message cookies, usually [[Mojo::Cookie::Request]] or
[[Mojo::Cookie::Response]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Access request cookies, usually L&lt;Mojo::Cookie::Request&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Access request cookies, usually [[Mojo::Cookie::Request]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Access response cookies, usually L&lt;Mojo::Cookie::Response&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Access response cookies, usually [[Mojo::Cookie::Response]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Access validated values, defaults to the current L&lt;/"topic"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Access validated values, defaults to the current [[/"topic"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Activate reverse proxy support, which allows for the C&lt;X-Forwarded-For&gt; and
C&lt;X-Forwarded-Proto&gt; headers to be picked up automatically, defaults to the
value of L&lt;Mojo::Server/"reverse_proxy"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Activate reverse proxy support, which allows for the C&lt;X-Forwarded-For&gt; and
C&lt;X-Forwarded-Proto&gt; headers to be picked up automatically, defaults to the
value of [[Mojo::Server/"reverse_proxy"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Add a new helper with L&lt;Mojolicious/"helper"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Add a new helper with [[Mojolicious/"helper"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Add chunk of data and upgrade to L&lt;Mojo::Asset::File&gt; object if necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012451Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>Add chunk of data and upgrade to [[Mojo::Asset::File]] object if necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Add multiple L&lt;Mojo::Cookie::Response&gt; objects to the jar.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Add multiple [[Mojo::Cookie::Response]] objects to the jar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Adding a configuration file to your application is as easy as adding a file to
its home directory and loading the plugin L&lt;Mojolicious::Plugin::Config&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Adding a configuration file to your application is as easy as adding a file to
its home directory and loading the plugin [[Mojolicious::Plugin::Config]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After reading the L&lt;Mojolicious::Guides::Tutorial&gt;, you should already be
familiar with L&lt;Mojo::Server::Morbo&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>After reading the [[Mojolicious::Guides::Tutorial]], you should already be
familiar with [[Mojo::Server::Morbo]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you start a new route with methods like
L&lt;Mojolicious::Routes::Route/"get"&gt;, you can also give it a destination in the
form of a hash using the chained method L&lt;Mojolicious::Routes::Route/"to"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>After you start a new route with methods like
[[Mojolicious::Routes::Route/"get"]], you can also give it a destination in the
form of a hash using the chained method [[Mojolicious::Routes::Route/"to"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;/"E:link"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[/"E:link"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;/"attr"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[/"attr"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;/"child_nodes"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[/"child_nodes"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;/"pairs"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[/"pairs"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;/"parts"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[/"parts"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;/"tag"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[/"tag"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;/"to_array"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[/"to_array"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;/"to_string"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[/"to_string"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;Mojo::Base/"tap"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[Mojo::Base/"tap"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;Mojo::Base/"with_roles"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[Mojo::Base/"with_roles"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;Mojo::DOM/"new_tag"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[Mojo::DOM/"new_tag"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;Mojolicious/"config"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[Mojolicious/"config"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;Mojolicious/"ua"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[Mojolicious/"ua"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;Mojolicious::Controller/"app"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[Mojolicious::Controller/"app"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;Mojolicious::Controller/"param"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[Mojolicious::Controller/"param"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;Mojolicious::Controller/"render_to_string"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[Mojolicious::Controller/"render_to_string"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;Mojolicious::Controller/"session"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[Mojolicious::Controller/"session"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;Mojolicious::Controller/"stash"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[Mojolicious::Controller/"stash"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alias for L&lt;Mojolicious::Controller/"url_for"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alias for [[Mojolicious::Controller/"url_for"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All
selectors from L&lt;Mojo::DOM::CSS/"SELECTORS"&gt; are supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All
selectors from [[Mojo::DOM::CSS/"SELECTORS"]] are supported.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All
uppercase methods as well as those starting with an underscore are
automatically hidden from the router and you can use
L&lt;Mojolicious::Routes/"hide"&gt; to add additional ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All
uppercase methods as well as those starting with an underscore are
automatically hidden from the router and you can use
[[Mojolicious::Routes/"hide"]] to add additional ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All C&lt;GET&gt; and C&lt;POST&gt; parameters extracted from the query string and
C&lt;application/x-www-form-urlencoded&gt; or C&lt;multipart/form-data&gt; message body,
usually a L&lt;Mojo::Parameters&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All C&lt;GET&gt; and C&lt;POST&gt; parameters extracted from the query string and
C&lt;application/x-www-form-urlencoded&gt; or C&lt;multipart/form-data&gt; message body,
usually a [[Mojo::Parameters]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All C&lt;GET&gt; and C&lt;POST&gt; parameters sent with the request are accessible via
L&lt;Mojolicious::Controller/"param"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123256Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>すべてのC&lt;GET&gt;とC&lt;POST&gt;パラメーターは[[Mojolicious::Controller]]のC&lt;param&gt;を通じてアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All C&lt;GET&gt; parameters, usually a L&lt;Mojo::Parameters&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All C&lt;GET&gt; parameters, usually a [[Mojo::Parameters]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All C&lt;multipart/form-data&gt; file uploads, usually L&lt;Mojo::Upload&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All C&lt;multipart/form-data&gt; file uploads, usually [[Mojo::Upload]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All L&lt;Mojolicious::Controller&gt; controllers are plain old Perl classes and get
instantiated on demand.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All [[Mojolicious::Controller]] controllers are plain old Perl classes and get
instantiated on demand.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All built-in web servers use
non-blocking I/O and are based on the L&lt;Mojo::IOLoop&gt; event loop, which
provides many very powerful features that allow real-time web applications to
scale up to thousands of concurrent client connections.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All built-in web servers use
non-blocking I/O and are based on the [[Mojo::IOLoop]] event loop, which
provides many very powerful features that allow real-time web applications to
scale up to thousands of concurrent client connections.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All checks from
L&lt;Mojolicious::Validator/"CHECKS"&gt; are supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All checks from
[[Mojolicious::Validator/"CHECKS"]] are supported.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All code contributions should be sent as
L&lt;GitHub pull requests|https://help.github.com/articles/using-pull-requests&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All code contributions should be sent as
[[GitHub pull requests|https://help.github.com/articles/using-pull-requests]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All connections will be reset automatically if a new process has been forked,
this allows multiple processes to share the same L&lt;Mojo::UserAgent&gt; object
safely.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All connections will be reset automatically if a new process has been forked,
this allows multiple processes to share the same [[Mojo::UserAgent]] object
safely.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All data gets serialized with L&lt;Mojo::JSON&gt; and stored Base64
encoded on the client-side, but is protected from unwanted changes with a
HMAC-SHA1 signature.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All data gets serialized with [[Mojo::JSON]] and stored Base64
encoded on the client-side, but is protected from unwanted changes with a
HMAC-SHA1 signature.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All files uploaded via C&lt;multipart/form-data&gt; request are automatically
available as L&lt;Mojo::Upload&gt; objects from L&lt;Mojolicious::Controller/"param"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134525Z" creationid="mokoo" creationdate="20190309T115529Z">
        <seg>ファイルは、C&lt;multipart/form-data&gt;リクエストを通してアップロードされると、自動的に
 [[Mojolicious::Controller]]のC&lt;param&gt;から[[Mojo::Upload]]のインスタンスとして利用可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All filters from
L&lt;Mojolicious::Validator/"FILTERS"&gt; are supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All filters from
[[Mojolicious::Validator/"FILTERS"]] are supported.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All filters from L&lt;Mojolicious::Validator/"FILTERS"&gt;
are supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All filters from [[Mojolicious::Validator/"FILTERS"]]
are supported.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All following routes are
only evaluated if the callback returned a true value.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T131128Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>以降のすべてのルーティングは、underコールバックが真値を返したときだけ評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All messages will be written to C&lt;STDERR&gt; or a C&lt;log/$mode.log&gt; file if a
C&lt;log&gt; directory exists.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T125139Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>すべてのメッセージはC&lt;STDERR&gt;に出力されるか、
C&lt;log&gt;ディレクトリが存在する場合はC&lt;log/$mode.log&gt;に出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All placeholders get compiled to a regular expression internally, this process
can also be customized.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130952Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>すべてのプレースホルダーは、内部で正規表現にコンパイルされます。この処理はカスタマイズすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All placeholders require a value, but by assigning them default values you can
make capturing optional.</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>すべてのプレースホルダーは値を必要としますが、
プレースホルダーにデフォルト値を設定することにより
キャプチャをオプショナルなものにすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All routes can have a name associated with them, this allows automatic template
detection and backreferencing with L&lt;Mojolicious::Controller/"url_for"&gt;, on
which many methods and helpers like
L&lt;Mojolicious::Plugin::TagHelpers/"link_to"&gt; rely.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T124339Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>すべてのルーティング(routes)には名前を付けることができます。名前を付けることによってテンプレートの自動検出や[[Mojolicious::Controller]]のC&lt;url_for&gt;による逆引きができるようになり、[[Mojolicious::Plugin::TagHelpers]]のC&lt;link_to&gt;など、多くのヘルパーやメソッドがこれに基づいて動きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All selectors from
L&lt;Mojo::DOM::CSS/"SELECTORS"&gt; are supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All selectors from
[[Mojo::DOM::CSS/"SELECTORS"]] are supported.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All selectors from L&lt;Mojo::DOM::CSS/"SELECTORS"&gt; are supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All selectors from [[Mojo::DOM::CSS/"SELECTORS"]] are supported.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All templates and static files inlined in the C&lt;DATA&gt; section can be
automatically turned into separate files in the C&lt;templates&gt; and C&lt;public&gt;
directories with the command L&lt;Mojolicious::Command::Author::inflate&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All templates and static files inlined in the C&lt;DATA&gt; section can be
automatically turned into separate files in the C&lt;templates&gt; and C&lt;public&gt;
directories with the command [[Mojolicious::Command::Author::inflate]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All templates should be in the C&lt;templates&gt; directories of the application,
which can be customized with L&lt;Mojolicious::Renderer/"paths"&gt;, or one of the
the C&lt;DATA&gt; sections from L&lt;Mojolicious::Renderer/"classes"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All templates should be in the C&lt;templates&gt; directories of the application,
which can be customized with [[Mojolicious::Renderer/"paths"]], or one of the
the C&lt;DATA&gt; sections from [[Mojolicious::Renderer/"classes"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All those settings are
then available through the method L&lt;Mojolicious/"config"&gt; and the helper
L&lt;Mojolicious::Plugin::DefaultHelpers/"config"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All those settings are
then available through the method [[Mojolicious/"config"]] and the helper
[[Mojolicious::Plugin::DefaultHelpers/"config"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All unknown fields
will be ignored by default, so you have to decide which should be
L&lt;required|Mojolicious::Validator::Validation/"required"&gt; or
L&lt;optional|Mojolicious::Validator::Validation/"optional"&gt; before you can perform
checks on their values.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All unknown fields
will be ignored by default, so you have to decide which should be
[[required|Mojolicious::Validator::Validation/"required"]] or
[[optional|Mojolicious::Validator::Validation/"optional"]] before you can perform
checks on their values.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All web development starts with HTML, CSS and JavaScript, to learn the basics
we recommend the
L&lt;Mozilla Developer Network|https://developer.mozilla.org/en-US/docs/Web&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All web development starts with HTML, CSS and JavaScript, to learn the basics
we recommend the
[[Mozilla Developer Network|https://developer.mozilla.org/en-US/docs/Web]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All you have to do, is to add a new C&lt;handler&gt; with
L&lt;Mojolicious::Renderer/"add_handler"&gt; when C&lt;register&gt; is called.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All you have to do, is to add a new C&lt;handler&gt; with
[[Mojolicious::Renderer/"add_handler"]] when C&lt;register&gt; is called.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All you have to do, to protect your users from this, is to add an
additional hidden field to your forms with
L&lt;Mojolicious::Plugin::TagHelpers/"csrf_field"&gt;, and validate it with
L&lt;Mojolicious::Validator::Validation/"csrf_protect"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>All you have to do, to protect your users from this, is to add an
additional hidden field to your forms with
[[Mojolicious::Plugin::TagHelpers/"csrf_field"]], and validate it with
[[Mojolicious::Validator::Validation/"csrf_protect"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Allow L&lt;/"under"&gt; semantics for this route.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Allow [[/"under"]] semantics for this route.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Almost
all features are exactly the same for full L&lt;Mojolicious&gt; applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Almost
all features are exactly the same for full [[Mojolicious]] applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Almost everything you'll learn here also applies to full L&lt;Mojolicious&gt;
applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T122725Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>ここで学んだことは、ほとんどすべてがフルバージョンの[[Mojolicious]]アプリケーションにも当てはまります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also note that for
convenience the C&lt;PIPE&gt; signal will be set to C&lt;IGNORE&gt; when L&lt;Mojo::IOLoop&gt; is
loaded.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Also note that for
convenience the C&lt;PIPE&gt; signal will be set to C&lt;IGNORE&gt; when [[Mojo::IOLoop]] is
loaded.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also sets
the stash value C&lt;snapshot&gt; to a copy of the L&lt;/"stash"&gt; for use in the
templates.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Also sets
the stash value C&lt;snapshot&gt; to a copy of the [[/"stash"]] for use in the
templates.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also sets
the stash values C&lt;exception&gt; to a L&lt;Mojo::Exception&gt; object and C&lt;snapshot&gt; to
a copy of the L&lt;/"stash"&gt; for use in the templates.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Also sets
the stash values C&lt;exception&gt; to a [[Mojo::Exception]] object and C&lt;snapshot&gt; to
a copy of the [[/"stash"]] for use in the templates.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also sets up the renderer, static file
server, a default set of plugins and an L&lt;/"around_dispatch"&gt; hook with the
default exception handling.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Also sets up the renderer, static file
server, a default set of plugins and an [[/"around_dispatch"]] hook with the
default exception handling.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alternatively you can also use configuration files in the JSON format with
L&lt;Mojolicious::Plugin::JSONConfig&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Alternatively you can also use configuration files in the JSON format with
[[Mojolicious::Plugin::JSONConfig]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>An C&lt;E&gt; element that belongs to the namespace alias C&lt;A&gt; from
L&lt;CSS Namespaces Module Level 3|https://www.w3.org/TR/css-namespaces-3/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>An C&lt;E&gt; element that belongs to the namespace alias C&lt;A&gt; from
[[CSS Namespaces Module Level 3|https://www.w3.org/TR/css-namespaces-3/]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>An amazing real-time web framework built on top of the powerful L&lt;Mojo&gt; web
development toolkit.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>An amazing real-time web framework built on top of the powerful [[Mojo]] web
development toolkit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>An optional JSON
Pointer can be used to extract a specific value with L&lt;Mojo::JSON::Pointer&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>An optional JSON
Pointer can be used to extract a specific value with [[Mojo::JSON::Pointer]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And
if you want to know more about how browsers and web servers actually
communicate, there's also a very nice introduction to
L&lt;HTTP|https://developer.mozilla.org/en-US/docs/Web/HTTP&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>And
if you want to know more about how browsers and web servers actually
communicate, there's also a very nice introduction to
[[HTTP|https://developer.mozilla.org/en-US/docs/Web/HTTP]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And don't worry about revealing too much information on these pages, they are
only available during development, and will be replaced automatically with pages
that don't reveal any sensitive information in a production environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T124106Z" creationid="mokoo" creationdate="20190309T065042Z">
        <seg>ページに情報が見えすぎるからといって心配しないでください。これが有効になるのは開発中だけです。プロダクション環境では、大切な情報が表示されないページに自動的に置き換わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And if that's not
enough you can also serve them manually with
L&lt;Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt&gt;static"&gt; and
L&lt;Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt&gt;file"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>And if that's not
enough you can also serve them manually with
[[Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt]]static"]] and
[[Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt]]file"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And if that's not the
case you might be missing the L&lt;Mozilla::CA&gt; module, which is often required by
L&lt;IO::Socket::SSL&gt; to be able to verify certificates.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>And if that's not the
case you might be missing the [[Mozilla::CA]] module, which is often required by
[[IO::Socket::SSL]] to be able to verify certificates.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And if you have a C&lt;PAUSE&gt; account (which can be requested at
L&lt;http://pause.perl.org&gt;), you are only a few commands away from releasing it
to CPAN.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>And if you have a C&lt;PAUSE&gt; account (which can be requested at
[[http://pause.perl.org]]), you are only a few commands away from releasing it
to CPAN.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And if you have a PAUSE account (which can be requested at
L&lt;http://pause.perl.org&gt;) even upload it.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>And if you have a PAUSE account (which can be requested at
[[http://pause.perl.org]]) even upload it.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And if you have multiple routes using restrictive placeholders you can also turn
them into placeholder types with L&lt;Mojolicious::Routes/"add_type"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>And if you have multiple routes using restrictive placeholders you can also turn
them into placeholder types with [[Mojolicious::Routes/"add_type"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And then implement a C&lt;BUILD_DYNAMIC&gt; method in your class, making sure that the
key you use to lookup methods in C&lt;$dyn_methods&gt; is the same thing you pass as
C&lt;$ref&gt; to L&lt;/"register"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>And then implement a C&lt;BUILD_DYNAMIC&gt; method in your class, making sure that the
key you use to lookup methods in C&lt;$dyn_methods&gt; is the same thing you pass as
C&lt;$ref&gt; to [[/"register"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And to add your
helper to the application, you can use L&lt;Mojolicious/"helper"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>And to add your
helper to the application, you can use [[Mojolicious/"helper"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And to make it esier to test
HTTPS/WSS web services L&lt;Mojo::UserAgent/"insecure"&gt; will be activated by
default for L&lt;/"ua"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>And to make it esier to test
HTTPS/WSS web services [[Mojo::UserAgent/"insecure"]] will be activated by
default for [[/"ua"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And to make your commands application specific, just add a custom namespace to
L&lt;Mojolicious::Commands/"namespaces"&gt; and use a class name like
C&lt;MyApp::Command::spy&gt; instead of C&lt;Mojolicious::Command::spy&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>And to make your commands application specific, just add a custom namespace to
[[Mojolicious::Commands/"namespaces"]] and use a class name like
C&lt;MyApp::Command::spy&gt; instead of C&lt;Mojolicious::Command::spy&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And we do in fact already use several optional CPAN
modules such as L&lt;Cpanel::JSON::XS&gt;, L&lt;EV&gt;, L&lt;IO::Socket::Socks&gt;,
L&lt;IO::Socket::SSL&gt;, L&lt;Net::DNS::Native&gt;, L&lt;Plack&gt; and L&lt;Role::Tiny&gt; to provide
advanced functionality if possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>And we do in fact already use several optional CPAN
modules such as [[Cpanel::JSON::XS]], [[EV]], [[IO::Socket::Socks]],
[[IO::Socket::SSL]], [[Net::DNS::Native]], [[Plack]] and [[Role::Tiny]] to provide
advanced functionality if possible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And you can use all the commands from L&lt;Mojolicious::Commands&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>And you can use all the commands from [[Mojolicious::Commands]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And you don't have to worry about memory usage, because all files above 250KiB
will be automatically streamed into a temporary file.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T115318Z" creationid="mokoo" creationdate="20190309T115318Z">
        <seg>メモリの使用率を気にする必要はありません。C&lt;250KB&gt;を超えるすべてのファイルは自動的に一時ファイルに保存されるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another good reverse proxy is L&lt;Apache|http://httpd.apache.org&gt; with
C&lt;mod_proxy&gt;, the configuration looks quite similar to the Nginx one above.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Another good reverse proxy is [[Apache|http://httpd.apache.org]] with
C&lt;mod_proxy&gt;, the configuration looks quite similar to the Nginx one above.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another huge advantage is that it supports TLS and WebSockets out of the box, a
development certificate for testing purposes is built right in, so it just
works, but you can specify all listen locations supported by
L&lt;Mojo::Server::Daemon/"listen"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Another huge advantage is that it supports TLS and WebSockets out of the box, a
development certificate for testing purposes is built right in, so it just
works, but you can specify all listen locations supported by
[[Mojo::Server::Daemon/"listen"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another positive side effect of this pattern is that we do not need to call
L&lt;Mojo::IOLoop/"start"&gt; and L&lt;Mojo::IOLoop/"stop"&gt; manually, because we know
exactly when our chain of L&lt;/"steps"&gt; has reached the end.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Another positive side effect of this pattern is that we do not need to call
[[Mojo::IOLoop/"start"]] and [[Mojo::IOLoop/"stop"]] manually, because we know
exactly when our chain of [[/"steps"]] has reached the end.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Any aspect of the application (helpers, plugins, routes, etc.) can be
introspected from L&lt;Test::Mojo&gt; through the application object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Any aspect of the application (helpers, plugins, routes, etc.) can be
introspected from [[Test::Mojo]] through the application object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Any of the native Perl data types can be passed to templates as references
through the L&lt;Mojolicious::Controller/"stash"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Any of the native Perl data types can be passed to templates as references
through the [[Mojolicious::Controller/"stash"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Append message to L&lt;/"handle"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Append message to [[/"handle"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Appends a fulfillment and rejection handler to the promise, and returns a new
L&lt;Mojo::Promise&gt; object resolving to the original fulfillment value or rejection
reason.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Appends a fulfillment and rejection handler to the promise, and returns a new
[[Mojo::Promise]] object resolving to the original fulfillment value or rejection
reason.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Appends a rejection handler callback to the promise, and returns a new
L&lt;Mojo::Promise&gt; object resolving to the return value of the callback if it is
called, or to its original fulfillment value if the promise is instead
fulfilled.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Appends a rejection handler callback to the promise, and returns a new
[[Mojo::Promise]] object resolving to the return value of the callback if it is
called, or to its original fulfillment value if the promise is instead
fulfilled.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Appends fulfillment and rejection handlers to the promise, and returns a new
L&lt;Mojo::Promise&gt; object resolving to the return value of the called handler.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Appends fulfillment and rejection handlers to the promise, and returns a new
[[Mojo::Promise]] object resolving to the return value of the called handler.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Application for command, defaults to a L&lt;Mojo::HelloWorld&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Application for command, defaults to a [[Mojo::HelloWorld]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Application server relative URLs will be processed with, defaults to a
L&lt;Mojo::UserAgent::Server&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Application server relative URLs will be processed with, defaults to a
[[Mojo::UserAgent::Server]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Application this server handles, defaults to a L&lt;Mojo::HelloWorld&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Application this server handles, defaults to a [[Mojo::HelloWorld]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As long as we haven't started a new
transaction by invoking one of the C&lt;*_ok&gt; methods, the request and response
objects from the previous transaction are available in the L&lt;Test::Mojo&gt;
object:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>As long as we haven't started a new
transaction by invoking one of the C&lt;*_ok&gt; methods, the request and response
objects from the previous transaction are available in the [[Test::Mojo]]
object:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Asset containing the uploaded data, usually a L&lt;Mojo::Asset::File&gt; or
L&lt;Mojo::Asset::Memory&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>Asset containing the uploaded data, usually a [[Mojo::Asset::File]] or
[[Mojo::Asset::Memory]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Attribute values passed to L&lt;Mojo::Template&gt; object used to preprocess
configuration files.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Attribute values passed to [[Mojo::Template]] object used to preprocess
configuration files.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Attribute values passed to L&lt;Mojo::Template&gt; objects used to render templates
with L&lt;/"render_data"&gt;, defaults to activating C&lt;vars&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Attribute values passed to [[Mojo::Template]] objects used to render templates
with [[/"render_data"]], defaults to activating C&lt;vars&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Attribute values passed to L&lt;Mojo::Template&gt; objects used to render templates.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Attribute values passed to [[Mojo::Template]] objects used to render templates.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Authentication and code shared between multiple routes can be realized easily
with routes generated by L&lt;Mojolicious::Lite/"under"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T131109Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>認証や複数のルーティングの間でコードを共有するためには、[[Mojolicious::Lite]]のC&lt;under&gt;構文を使う簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Automatically select best possible representation for resource from C&lt;format&gt;
C&lt;GET&gt;/C&lt;POST&gt; parameter, C&lt;format&gt; stash value or C&lt;Accept&gt; request header,
defaults to L&lt;Mojolicious::Renderer/"default_format"&gt; or rendering an empty
C&lt;204&gt; response.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Automatically select best possible representation for resource from C&lt;format&gt;
C&lt;GET&gt;/C&lt;POST&gt; parameter, C&lt;format&gt; stash value or C&lt;Accept&gt; request header,
defaults to [[Mojolicious::Renderer/"default_format"]] or rendering an empty
C&lt;204&gt; response.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>B&lt;Examples:&gt; The
L&lt;link
checker|https://github.com/mojolicious/minion/tree/master/examples/linkcheck&gt;
will show you how to integrate background jobs into well-structured
L&lt;Mojolicious&gt; applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>B&lt;Examples:&gt; The
L&lt;link
checker|https://github.com/mojolicious/minion/tree/master/examples/linkcheck&gt;
will show you how to integrate background jobs into well-structured
[[Mojolicious]] applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>B&lt;Examples:&gt; The minimal
L&lt;chat|https://github.com/mojolicious/mojo-pg/tree/master/examples/chat.pl&gt;
application will show you how to scale WebSockets to multiple servers, and the
well-structured
L&lt;blog|https://github.com/mojolicious/mojo-pg/tree/master/examples/blog&gt; 
application how to apply the MVC design pattern in practice.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>B&lt;Examples:&gt; The minimal
[[chat|https://github.com/mojolicious/mojo-pg/tree/master/examples/chat.pl]]
application will show you how to scale WebSockets to multiple servers, and the
well-structured
[[blog|https://github.com/mojolicious/mojo-pg/tree/master/examples/blog]] 
application how to apply the MVC design pattern in practice.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Backend, usually a L&lt;Mojo::Server::Morbo::Backend::Poll&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Backend, usually a [[Mojo::Server::Morbo::Backend::Poll]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Base classes used to identify controllers, defaults to
L&lt;Mojolicious::Controller&gt; and L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Base classes used to identify controllers, defaults to
[[Mojolicious::Controller]] and [[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Base of this URL, defaults to a L&lt;Mojo::URL&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Base of this URL, defaults to a [[Mojo::URL]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Base64 decode bytes with L&lt;MIME::Base64&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Base64 decode bytes with [[MIME::Base64]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Base64 decode bytestream with L&lt;Mojo::Util/"b64_decode"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Base64 decode bytestream with [[Mojo::Util/"b64_decode"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Base64 encode bytes with L&lt;MIME::Base64&gt;, the line ending defaults to a newline.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Base64 encode bytes with [[MIME::Base64]], the line ending defaults to a newline.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Base64 encode bytestream with L&lt;Mojo::Util/"b64_encode"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Base64 encode bytestream with [[Mojo::Util/"b64_encode"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because of
this, L&lt;Mojolicious&gt; contains a whole new HTTP client/server stack called
L&lt;Mojo&gt;, which was heavily inspired by the original LWPng effort and carefully
designed with these new requirements in mind.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Because of
this, [[Mojolicious]] contains a whole new HTTP client/server stack called
[[Mojo]], which was heavily inspired by the original LWPng effort and carefully
designed with these new requirements in mind.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Become a part of the ongoing L&lt;Mojolicious&gt; development.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Become a part of the ongoing [[Mojolicious]] development.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Both application skeletons can be automatically generated with the commands
L&lt;Mojolicious::Command::Author::generate::lite_app&gt; and
L&lt;Mojolicious::Command::Author::generate::app&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Both application skeletons can be automatically generated with the commands
[[Mojolicious::Command::Author::generate::lite_app]] and
[[Mojolicious::Command::Author::generate::app]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Both have a higher precedence than routes for C&lt;GET&gt; and C&lt;HEAD&gt; requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T022200Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>両方とも優先度はC&lt;GET&gt;、C&lt;HEAD&gt;リクエストのルーティングよりも高くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Broken dispatch chains can be continued by calling
L&lt;Mojolicious::Plugin::DefaultHelpers/"continue"&gt;, this allows for example,
non-blocking operations to finish before reaching the next dispatch cycle.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Broken dispatch chains can be continued by calling
[[Mojolicious::Plugin::DefaultHelpers/"continue"]], this allows for example,
non-blocking operations to finish before reaching the next dispatch cycle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Build L&lt;Mojo::Asset::File&gt; or L&lt;Mojo::Asset::Memory&gt; object for a file,
relative to L&lt;/"paths"&gt; or from L&lt;/"classes"&gt;, or return C&lt;undef&gt; if it doesn't
exist.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>Build [[Mojo::Asset::File]] or [[Mojo::Asset::Memory]] object for a file,
relative to [[/"paths"]] or from [[/"classes"]], or return C&lt;undef&gt; if it doesn't
exist.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Build L&lt;Mojo::IOLoop::Delay&gt; object to use as a promise and/or for flow-control.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Build [[Mojo::IOLoop::Delay]] object to use as a promise and/or for flow-control.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Build L&lt;Mojo::IOLoop::Subprocess&gt; object to perform computationally expensive
operations in subprocesses, without blocking the event loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Build [[Mojo::IOLoop::Subprocess]] object to perform computationally expensive
operations in subprocesses, without blocking the event loop.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Build L&lt;Mojo::Transaction::HTTP&gt; follow-up request for C&lt;301&gt;, C&lt;302&gt;, C&lt;303&gt;,
C&lt;307&gt; or C&lt;308&gt; redirect response if possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Build [[Mojo::Transaction::HTTP&gt; follow-up request for C&lt;301]], C&lt;302]], C&lt;303&gt;,
C&lt;307&gt; or C&lt;308&gt; redirect response if possible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Build L&lt;Mojo::Transaction::HTTP&gt; object and emit L&lt;/"after_build_tx"&gt; hook.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Build [[Mojo::Transaction::HTTP]] object and emit [[/"after_build_tx"]] hook.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Build L&lt;Mojo::Transaction::HTTP&gt; proxy C&lt;CONNECT&gt; request for transaction if
possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Build [[Mojo::Transaction::HTTP]] proxy C&lt;CONNECT&gt; request for transaction if
possible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Build L&lt;Mojo::Transaction::WebSocket&gt; follow-up transaction for WebSocket
handshake if possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Build [[Mojo::Transaction::WebSocket]] follow-up transaction for WebSocket
handshake if possible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Build L&lt;Mojolicious::Validator::Validation&gt; object to perform validations.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Build [[Mojolicious::Validator::Validation]] object to perform validations.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Build application from class and assign it to L&lt;/"app"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Build application from class and assign it to [[/"app"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Build default controller object with L&lt;/"controller_class"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Build default controller object with [[/"controller_class"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Build new L&lt;Mojo::JSON::Pointer&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Build new [[Mojo::JSON::Pointer]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Build rejected L&lt;Mojo::Promise&gt; object or reject the promise with one or more
rejection reasons.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Build rejected [[Mojo::Promise]] object or reject the promise with one or more
rejection reasons.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Build resolved L&lt;Mojo::Promise&gt; object or resolve the promise with one or more
fulfillment values.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Build resolved [[Mojo::Promise]] object or resolve the promise with one or more
fulfillment values.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But because L&lt;Test::Mojo&gt; has access to everything that L&lt;Mojo::UserAgent&gt; does,
we can introspect JSON documents as well as DOM-based documents (HTML, XML) with
assertions that allow us to check for the existence of elements as well as
inspect the content of text nodes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>But because [[Test::Mojo]] has access to everything that [[Mojo::UserAgent]] does,
we can introspect JSON documents as well as DOM-based documents (HTML, XML) with
assertions that allow us to check for the existence of elements as well as
inspect the content of text nodes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But just like in L&lt;Mojolicious::Lite&gt; you can also pass the callback directly,
which usually looks much better.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>But just like in [[Mojolicious::Lite]] you can also pass the callback directly,
which usually looks much better.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But you can handle them manually by
subscribing to the event L&lt;Mojo::Reactor/"error"&gt; or catching them inside the
callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>But you can handle them manually by
subscribing to the event [[Mojo::Reactor/"error"]] or catching them inside the
callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By default, the L&lt;Mojo::UserAgent&gt; object in L&lt;Test::Mojo&gt; will manage
session for us by saving and sending cookies automatically, just like common web
browsers:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>By default, the [[Mojo::UserAgent]] object in [[Test::Mojo]] will manage
session for us by saving and sending cookies automatically, just like common web
browsers:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By now you've probably used many of the built-in commands described in
L&lt;Mojolicious::Commands&gt;, but did you know that you can just add new ones and
that they will be picked up automatically by the command line interface if they
are placed in a directory from C&lt;@INC&gt;?</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>By now you've probably used many of the built-in commands described in
[[Mojolicious::Commands]], but did you know that you can just add new ones and
that they will be picked up automatically by the command line interface if they
are placed in a directory from C&lt;@INC&gt;?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>C&lt;CGI&gt; is supported out of the box and your L&lt;Mojolicious&gt; application will
automatically detect that it is executed as a C&lt;CGI&gt; script.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>C&lt;CGI&gt; is supported out of the box and your [[Mojolicious&gt; application will
automatically detect that it is executed as a C&lt;CGI&gt; script.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>C&lt;POST&gt; parameters extracted from C&lt;application/x-www-form-urlencoded&gt; or
C&lt;multipart/form-data&gt; message body, usually a L&lt;Mojo::Parameters&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>C&lt;POST&gt; parameters extracted from C&lt;application/x-www-form-urlencoded&gt; or
C&lt;multipart/form-data&gt; message body, usually a [[Mojo::Parameters]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>CGI and L&lt;PSGI&gt; environments can even be
detected and will usually just work without commands.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T122947Z" creationid="mokoo" creationdate="20190309T062157Z">
        <seg>CGIまたは[[PSGI]] のどちらの環境であるかは自動的に検知されるため、通常はコマンドで指定しなくても動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Callbacks will be
passed along to L&lt;Mojo::IOLoop::Subprocess/"run"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Callbacks will be
passed along to [[Mojo::IOLoop::Subprocess/"run"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Callbacks will be passed along to L&lt;Mojo::IOLoop::Delay/"steps"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Callbacks will be passed along to [[Mojo::IOLoop::Delay/"steps"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Calling this
method without a chunk of data will finalize the L&lt;/"headers"&gt; and allow for
dynamic content to be written later.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Calling this
method without a chunk of data will finalize the [[/"headers"]] and allow for
dynamic content to be written later.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Calling this method without a chunk of data
will finalize the L&lt;/"headers"&gt; and allow for dynamic content to be written
later.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Calling this method without a chunk of data
will finalize the [[/"headers"]] and allow for dynamic content to be written
later.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Camelize bytestream with L&lt;Mojo::Util/"camelize"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Camelize bytestream with [[Mojo::Util/"camelize"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Change validation L&lt;/"topic"&gt; and apply filters.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Change validation [[/"topic"]] and apply filters.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Change validation L&lt;/"topic"&gt;, apply filters, and make sure a value is present
and not an empty string.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Change validation [[/"topic"]], apply filters, and make sure a value is present
and not an empty string.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Characters can be rendered to bytes with the C&lt;text&gt; stash value, the given
content will be automatically encoded with L&lt;Mojolicious::Renderer/"encoding"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Characters can be rendered to bytes with the C&lt;text&gt; stash value, the given
content will be automatically encoded with [[Mojolicious::Renderer/"encoding"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check active log L&lt;/"level"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check active log [[/"level"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check freshness of request by comparing the C&lt;If-None-Match&gt; and
C&lt;If-Modified-Since&gt; request headers to the C&lt;ETag&gt; and C&lt;Last-Modified&gt;
response headers with L&lt;Mojolicious::Static/"is_fresh"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check freshness of request by comparing the C&lt;If-None-Match&gt; and
C&lt;If-Modified-Since&gt; request headers to the C&lt;ETag&gt; and C&lt;Last-Modified&gt;
response headers with [[Mojolicious::Static/"is_fresh"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if JSON WebSocket message contains a value that can be identified using
the given JSON Pointer with L&lt;Mojo::JSON::Pointer&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if JSON WebSocket message contains a value that can be identified using
the given JSON Pointer with [[Mojo::JSON::Pointer]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if JSON response contains a value that can be identified using the given
JSON Pointer with L&lt;Mojo::JSON::Pointer&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if JSON response contains a value that can be identified using the given
JSON Pointer with [[Mojo::JSON::Pointer]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if L&lt;/"data"&gt; contains a value that can be identified with the given JSON
Pointer.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if [[/"data"]] contains a value that can be identified with the given JSON
Pointer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if L&lt;/"input"&gt; is available for validation.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if [[/"input"]] is available for validation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if asset has a L&lt;/"start_range"&gt; or L&lt;/"end_range"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if asset has a [[/"start_range"]] or [[/"end_range"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if buffer has exceeded L&lt;/"max_buffer_size"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if buffer has exceeded [[/"max_buffer_size"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if content will be dynamically generated, which prevents L&lt;/"clone"&gt; from
working.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if content will be dynamically generated, which prevents [[/"clone"]] from
working.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if files from L&lt;/"watch"&gt; have been modified since the last check and
return an array reference with the results.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if files from [[/"watch"]] have been modified since the last check and
return an array reference with the results.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if first node in L&lt;/"tree"&gt; matches the CSS selector.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if first node in [[/"tree"]] matches the CSS selector.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if headers have exceeded L&lt;/"max_line_size"&gt; or L&lt;/"max_lines"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if headers have exceeded [[/"max_line_size"]] or [[/"max_lines"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if message has exceeded L&lt;/"max_line_size"&gt;, L&lt;/"max_message_size"&gt;,
L&lt;Mojo::Content/"max_buffer_size"&gt; or L&lt;Mojo::Headers/"max_line_size"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if message has exceeded [[/"max_line_size"]], [[/"max_message_size"]],
[[Mojo::Content/"max_buffer_size"]] or [[Mojo::Headers/"max_line_size"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if this response has a C&lt;1xx&gt; status L&lt;/"code"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if this response has a C&lt;1xx&gt; status [[/"code"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if this response has a C&lt;1xx&gt;, C&lt;204&gt; or C&lt;304&gt; status L&lt;/"code"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if this response has a C&lt;1xx&gt;, C&lt;204&gt; or C&lt;304&gt; status [[/"code"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if this response has a C&lt;2xx&gt; status L&lt;/"code"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if this response has a C&lt;2xx&gt; status [[/"code"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if this response has a C&lt;3xx&gt; status L&lt;/"code"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if this response has a C&lt;3xx&gt; status [[/"code"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if this response has a C&lt;4xx&gt; or C&lt;5xx&gt; status L&lt;/"code"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if this response has a C&lt;4xx&gt; or C&lt;5xx&gt; status [[/"code"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if this response has a C&lt;4xx&gt; status L&lt;/"code"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if this response has a C&lt;4xx&gt; status [[/"code"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if this response has a C&lt;5xx&gt; status L&lt;/"code"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if this response has a C&lt;5xx&gt; status [[/"code"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check if validation was successful and field has a value, defaults to checking
the current L&lt;/"topic"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check if validation was successful and field has a value, defaults to checking
the current [[/"topic"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check response content for exact match after retrieving it from
L&lt;Mojo::Message/"text"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check response content for exact match after retrieving it from
[[Mojo::Message/"text"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check response content for similar match after retrieving it from
L&lt;Mojo::Message/"text"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check response content for similar match after retrieving it from
[[Mojo::Message/"text"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check the value extracted from JSON WebSocket message using the given JSON
Pointer with L&lt;Mojo::JSON::Pointer&gt; for similar match.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check the value extracted from JSON WebSocket message using the given JSON
Pointer with [[Mojo::JSON::Pointer]] for similar match.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check the value extracted from JSON WebSocket message using the given JSON
Pointer with L&lt;Mojo::JSON::Pointer&gt;, which defaults to the root value if it is
omitted.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check the value extracted from JSON WebSocket message using the given JSON
Pointer with [[Mojo::JSON::Pointer]], which defaults to the root value if it is
omitted.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check the value extracted from JSON response using the given JSON Pointer with
L&lt;Mojo::JSON::Pointer&gt; for similar match.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check the value extracted from JSON response using the given JSON Pointer with
[[Mojo::JSON::Pointer]] for similar match.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check the value extracted from JSON response using the given JSON Pointer with
L&lt;Mojo::JSON::Pointer&gt;, which defaults to the root value if it is omitted.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Check the value extracted from JSON response using the given JSON Pointer with
[[Mojo::JSON::Pointer]], which defaults to the root value if it is omitted.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Checks for existence of the CSS selectors first matching HTML/XML element with
L&lt;Mojo::DOM/"at"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Checks for existence of the CSS selectors first matching HTML/XML element with
[[Mojo::DOM/"at"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Checks text content of the CSS selectors first matching HTML/XML element for
exact match with L&lt;Mojo::DOM/"at"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Checks text content of the CSS selectors first matching HTML/XML element for
exact match with [[Mojo::DOM/"at"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Checks text content of the CSS selectors first matching HTML/XML element for
similar match with L&lt;Mojo::DOM/"at"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Checks text content of the CSS selectors first matching HTML/XML element for
similar match with [[Mojo::DOM/"at"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Checks the number of HTML/XML elements matched by the CSS selector with
L&lt;Mojo::DOM/"find"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Checks the number of HTML/XML elements matched by the CSS selector with
[[Mojo::DOM/"find"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Class to be used for the default controller, defaults to
L&lt;Mojolicious::Controller&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Class to be used for the default controller, defaults to
[[Mojolicious::Controller]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Classes to use for finding files in C&lt;DATA&gt; sections with L&lt;Mojo::Loader&gt;,
first one has the highest precedence, defaults to C&lt;main&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Classes to use for finding files in C&lt;DATA&gt; sections with [[Mojo::Loader]],
first one has the highest precedence, defaults to C&lt;main&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Classes to use for finding templates in C&lt;DATA&gt; sections with L&lt;Mojo::Loader&gt;,
first one has the highest precedence, defaults to C&lt;main&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Classes to use for finding templates in C&lt;DATA&gt; sections with [[Mojo::Loader]],
first one has the highest precedence, defaults to C&lt;main&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Code has to be run through L&lt;Perl::Tidy&gt; with the included
L&lt;.perltidyrc|https://github.com/mojolicious/mojo/blob/master/.perltidyrc&gt;, and
everything should look like it was written by a single person.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Code has to be run through [[Perl::Tidy]] with the included
[[.perltidyrc|https://github.com/mojolicious/mojo/blob/master/.perltidyrc]], and
everything should look like it was written by a single person.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Command line arguments are passed right through and there are many useful
attributes and methods in L&lt;Mojolicious::Command&gt; that you can use or overload.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Command line arguments are passed right through and there are many useful
attributes and methods in [[Mojolicious::Command]] that you can use or overload.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Command line interface for your application, defaults to a
L&lt;Mojolicious::Commands&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Command line interface for your application, defaults to a
[[Mojolicious::Commands]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compare bytestream with L&lt;Mojo::Util/"secure_compare"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Compare bytestream with [[Mojo::Util/"secure_compare"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compress bytes with L&lt;IO::Compress::Gzip&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Compress bytes with [[IO::Compress::Gzip]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compress bytestream with L&lt;Mojo::Util/"gzip"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Compress bytestream with [[Mojo::Util/"gzip"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Conditions such as C&lt;agent&gt; and C&lt;host&gt; from
L&lt;Mojolicious::Plugin::HeaderCondition&gt; allow even more powerful route
constructs.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025743Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>[[Mojolicious::Plugin::HeaderCondition]] のC&lt;agent&gt;やC&lt;host&gt;といった条件
を使用すれば、より強力なルーティングを構築できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Conditions such as C&lt;headers&gt;, C&lt;agent&gt; and C&lt;host&gt; from
L&lt;Mojolicious::Plugin::HeaderCondition&gt; can be applied to any route with the
method L&lt;Mojolicious::Routes::Route/"over"&gt;, and allow even more powerful route
constructs.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Conditions such as C&lt;headers&gt;, C&lt;agent&gt; and C&lt;host&gt; from
[[Mojolicious::Plugin::HeaderCondition]] can be applied to any route with the
method [[Mojolicious::Routes::Route/"over"]], and allow even more powerful route
constructs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::Asset::File&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012451Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>Construct a new [[Mojo::Asset::File]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::Content::MultiPart&gt; object and subscribe to L&lt;/"read"&gt;
event with default content parser.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojo::Content::MultiPart]] object and subscribe to [[/"read"]]
event with default content parser.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::Content::Single&gt; object and subscribe to L&lt;/"read"&gt;
event with default content parser.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojo::Content::Single]] object and subscribe to [[/"read"]]
event with default content parser.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::DOM&gt; object for an HTML/XML tag with or without
attributes and content.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojo::DOM]] object for an HTML/XML tag with or without
attributes and content.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::Date&gt; object and L&lt;/"parse"&gt; date if necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojo::Date]] object and [[/"parse"]] date if necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::Exception&gt; object and assign L&lt;/"message"&gt; if necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojo::Exception]] object and assign [[/"message"]] if necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::File&gt; object, defaults to using the current working
directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojo::File]] object, defaults to using the current working
directory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::IOLoop::Stream&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojo::IOLoop::Stream]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::Log&gt; object and subscribe to L&lt;/"message"&gt; event with
default logger.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojo::Log]] object and subscribe to [[/"message"]] event with
default logger.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::Parameters&gt; object and L&lt;/"parse"&gt; parameters if
necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojo::Parameters]] object and [[/"parse"]] parameters if
necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::Path&gt; object and L&lt;/"parse"&gt; path if necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojo::Path]] object and [[/"parse"]] path if necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::Reactor::EV&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojo::Reactor::EV]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::Server&gt; object and subscribe to L&lt;/"request"&gt; event
with default request handling.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojo::Server]] object and subscribe to [[/"request"]] event
with default request handling.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojo::URL&gt; object and L&lt;/"parse"&gt; URL if necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojo::URL]] object and [[/"parse"]] URL if necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojolicious::Routes::Pattern&gt; object and L&lt;/"parse"&gt; pattern
if necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojolicious::Routes::Pattern]] object and [[/"parse"]] pattern
if necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojolicious::Validator&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojolicious::Validator]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Mojolicious&gt; application and call L&lt;/"startup"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Mojolicious]] application and call [[/"startup"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new L&lt;Test::Mojo&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new [[Test::Mojo]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new array-based L&lt;Mojo::Collection&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new array-based [[Mojo::Collection]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new scalar-based L&lt;Mojo::ByteStream&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new scalar-based [[Mojo::ByteStream]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new scalar-based L&lt;Mojo::DOM&gt; object and L&lt;/"parse"&gt; HTML/XML
fragment if necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new scalar-based [[Mojo::DOM]] object and [[/"parse"]] HTML/XML
fragment if necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new scalar-based L&lt;Mojo::File&gt; object for a temporary directory with
L&lt;File::Temp&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new scalar-based [[Mojo::File]] object for a temporary directory with
[[File::Temp]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new scalar-based L&lt;Mojo::File&gt; object for a temporary file with
L&lt;File::Temp&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new scalar-based [[Mojo::File]] object for a temporary file with
[[File::Temp]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Construct a new scalar-based L&lt;Mojo::File&gt; object, defaults to using the current
working directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Construct a new scalar-based [[Mojo::File]] object, defaults to using the current
working directory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Content generators can be registered with
L&lt;Mojo::UserAgent::Transactor/"add_generator"&gt; to generate the same type of
content repeatedly for multiple requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Content generators can be registered with
[[Mojo::UserAgent::Transactor/"add_generator"]] to generate the same type of
content repeatedly for multiple requests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Content headers, defaults to a L&lt;Mojo::Headers&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Content headers, defaults to a [[Mojo::Headers]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Content negotiation with C&lt;Range&gt;, C&lt;If-None-Match&gt; and C&lt;If-Modified-Since&gt;
headers is supported as well and can be tested very easily with
L&lt;Mojolicious::Command::get&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T022322Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>C&lt;Range&gt;、C&lt;If-None-Match&gt;、C&lt;If-Modified-Since&gt;ヘッダー
によるコンテンツネゴシエーションにも対応していて、
[[Mojolicious::Command::get]]で簡単にテストできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Content parts embedded in this multipart content, usually
L&lt;Mojo::Content::Single&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Content parts embedded in this multipart content, usually
[[Mojo::Content::Single]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Continue dispatch chain and emit the hook L&lt;Mojolicious/"around_action"&gt; for
every action.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Continue dispatch chain and emit the hook [[Mojolicious/"around_action"]] for
every action.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Continue dispatch chain from an intermediate destination with
L&lt;Mojolicious::Routes/"continue"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Continue dispatch chain from an intermediate destination with
[[Mojolicious::Routes/"continue"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Convert asset to L&lt;Mojo::Asset::File&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012451Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>Convert asset to [[Mojo::Asset::File]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Cookie jar to use for requests performed by this user agent, defaults to a
L&lt;Mojo::UserAgent::CookieJar&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Cookie jar to use for requests performed by this user agent, defaults to a
[[Mojo::UserAgent::CookieJar]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Cookie-based sessions just work out of the box, as soon as you start using them
through the helper L&lt;Mojolicious::Plugin::DefaultHelpers/"session"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190309T080214Z">
        <seg>[[Mojolicious::Plugin::DefaultHelpers]]のC&lt;session&gt;ヘルパーを使うとすぐに、クッキーをベースとしたセッションが機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Cooking with L&lt;Mojolicious&gt;, recipes for every taste.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Cooking with [[Mojolicious]], recipes for every taste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Copy file with L&lt;File::Copy&gt; and return the destination as a L&lt;Mojo::File&gt;
object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Copy file with [[File::Copy]] and return the destination as a [[Mojo::File]]
object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Create a new L&lt;Mojo::Promise&gt; object with a timeout or attach a timeout to an
existing promise.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Create a new [[Mojo::Promise]] object with a timeout or attach a timeout to an
existing promise.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Create a new class with one or more L&lt;Role::Tiny&gt; roles.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Create a new class with one or more [[Role::Tiny]] roles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Create attributes for hash-based objects, just like the L&lt;/"attr"&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Create attributes for hash-based objects, just like the [[/"attr"]] method.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Create named timestamp for L&lt;"timing-E&lt;gt&gt;elapsed"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Create named timestamp for [["timing-E&lt;gt]]elapsed"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Create the directories if they don't already exist, any additional arguments are
passed through to L&lt;File::Path&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Create the directories if they don't already exist, any additional arguments are
passed through to [[File::Path]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Current position on the L&lt;/"stack"&gt;, defaults to C&lt;0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Current position on the [[/"stack"]], defaults to C&lt;0&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Current transaction, usually a L&lt;Mojo::Transaction::HTTP&gt; or
L&lt;Mojo::Transaction::WebSocket&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Current transaction, usually a [[Mojo::Transaction::HTTP]] or
[[Mojo::Transaction::WebSocket]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Data storage persistent only for the next request, stored in the L&lt;/"session"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Data storage persistent only for the next request, stored in the [[/"session"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Decamelize bytestream with L&lt;Mojo::Util/"decamelize"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Decamelize bytestream with [[Mojo::Util/"decamelize"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Decode JSON message body directly using L&lt;Mojo::JSON&gt; if possible, an C&lt;undef&gt;
return value indicates a bare C&lt;null&gt; or that decoding failed.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Decode JSON message body directly using [[Mojo::JSON]] if possible, an C&lt;undef&gt;
return value indicates a bare C&lt;null&gt; or that decoding failed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Decode bytes to characters with L&lt;Encode&gt;, or return C&lt;undef&gt; if decoding
failed.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Decode bytes to characters with [[Encode]], or return C&lt;undef&gt; if decoding
failed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Decode bytestream with L&lt;Mojo::Util/"decode"&gt;, defaults to using C&lt;UTF-8&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Decode bytestream with [[Mojo::Util/"decode"]], defaults to using C&lt;UTF-8&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Decode percent encoded characters in bytestream with
L&lt;Mojo::Util/"url_unescape"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Decode percent encoded characters in bytestream with
[[Mojo::Util/"url_unescape"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Decode percent encoded characters in string as described in
L&lt;RFC 3986|http://tools.ietf.org/html/rfc3986&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Decode percent encoded characters in string as described in
[[RFC 3986|http://tools.ietf.org/html/rfc3986]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Decompress content automatically if L&lt;/"is_compressed"&gt; is true.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Decompress content automatically if [[/"is_compressed"]] is true.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Default charset used by L&lt;/"text"&gt; and to extract data from
C&lt;application/x-www-form-urlencoded&gt; or C&lt;multipart/form-data&gt; message body,
defaults to C&lt;UTF-8&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Default charset used by [[/"text"]] and to extract data from
C&lt;application/x-www-form-urlencoded&gt; or C&lt;multipart/form-data&gt; message body,
defaults to C&lt;UTF-8&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Default exception handling with
L&lt;Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt&gt;exception"&gt; is the first hook
in the chain and a call to L&lt;/"dispatch"&gt; the last, yours will be in between.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Default exception handling with
[[Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt]]exception"]] is the first hook
in the chain and a call to [[/"dispatch"]] the last, yours will be in between.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Default values for L&lt;Mojolicious::Controller/"stash"&gt;, assigned for every new
request.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Default values for [[Mojolicious::Controller/"stash"]], assigned for every new
request.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Default values that don't belong to a placeholder simply get merged into the
stash all the time.</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>プレースホルダーに所属しないデフォルト値は、
いつでも単純にスタッシュにマージされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Delete L&lt;/"path"&gt; automatically once the file is not used anymore.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Delete [[/"path"]] automatically once the file is not used anymore.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Delete L&lt;/"pid_file"&gt; automatically once it is not needed anymore, defaults to
a true value.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Delete [[/"pid_file"]] automatically once it is not needed anymore, defaults to
a true value.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Delete this directory and any files and subdirectories it may contain, any
additional arguments are passed through to L&lt;File::Path&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Delete this directory and any files and subdirectories it may contain, any
additional arguments are passed through to [[File::Path]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Detect MIME type for L&lt;Mojolicious::Controller&gt; object unless a C&lt;Content-Type&gt;
response header has already been set, defaults to using the MIME type for the
C&lt;txt&gt; extension if no better alternative could be found.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Detect MIME type for [[Mojolicious::Controller]] object unless a C&lt;Content-Type&gt;
response header has already been set, defaults to using the MIME type for the
C&lt;txt&gt; extension if no better alternative could be found.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Detect and load the best reactor implementation available, will try the value
of the C&lt;MOJO_REACTOR&gt; environment variable, L&lt;Mojo::Reactor::EV&gt; or
L&lt;Mojo::Reactor::Poll&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Detect and load the best reactor implementation available, will try the value
of the C&lt;MOJO_REACTOR&gt; environment variable, [[Mojo::Reactor::EV&gt; or
[[Mojo::Reactor::Poll]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Does nothing but return the invocant, since we already have a
L&lt;Mojo::Asset::File&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012451Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>Does nothing but return the invocant, since we already have a
[[Mojo::Asset::File]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Does the same as L&lt;/"url_for"&gt;, but inherits query parameters from the current
request.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Does the same as [[/"url_for"]], but inherits query parameters from the current
request.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Due to the flexibility of L&lt;Mojolicious&gt; there are many variations of the
actual growing process, but this should give you a good overview of the
possibilities.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Due to the flexibility of [[Mojolicious]] there are many variations of the
actual growing process, but this should give you a good overview of the
possibilities.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Dump a Perl data structure with L&lt;Data::Dumper&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Dump a Perl data structure with [[Data::Dumper]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Dump a Perl data structure with L&lt;Mojo::Util/"dumper"&gt;, very useful for
debugging.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Dump a Perl data structure with [[Mojo::Util/"dumper"]], very useful for
debugging.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>During development you will encounter these pages whenever you make a mistake,
they are gorgeous and contain a lot of valuable information that will aid you
in debugging your application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123951Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>開発中、間違いを犯したときはいつでも、
このページに遭遇するでしょう。ここには、素晴らしい、アプリケーションのデバックに役立つ
情報がたくさん含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>During startup your application is preloaded in the manager process, which does
not run an event loop, so you can use L&lt;Mojo::IOLoop/"next_tick"&gt; to run code
whenever a new worker process has been forked and its event loop gets started.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>During startup your application is preloaded in the manager process, which does
not run an event loop, so you can use [[Mojo::IOLoop/"next_tick"]] to run code
whenever a new worker process has been forked and its event loop gets started.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each representation can be handled with a callback or a hash
reference containing arguments to be passed to
L&lt;Mojolicious::Controller/"render"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Each representation can be handled with a callback or a hash
reference containing arguments to be passed to
[[Mojolicious::Controller/"render"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Emit L&lt;/"message"&gt; event and log C&lt;debug&gt; message.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Emit [[/"message"]] event and log C&lt;debug&gt; message.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Emit L&lt;/"message"&gt; event and log C&lt;error&gt; message.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Emit [[/"message"]] event and log C&lt;error&gt; message.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Emit L&lt;/"message"&gt; event and log C&lt;fatal&gt; message.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Emit [[/"message"]] event and log C&lt;fatal&gt; message.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Emit L&lt;/"message"&gt; event and log C&lt;info&gt; message.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Emit [[/"message"]] event and log C&lt;info&gt; message.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Emit L&lt;/"message"&gt; event and log C&lt;warn&gt; message.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Emit [[/"message"]] event and log C&lt;warn&gt; message.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Emits the L&lt;/"before_server_start"&gt; hook.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Emits the [[/"before_server_start"]] hook.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Emitted in the parent process when the subprocess calls the
L&lt;progress|/"progress1"&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Emitted in the parent process when the subprocess calls the
[[progress|/"progress1"]] method.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Emitted right before the application server is started, for web servers that
support it, which includes all the built-in ones (except for
L&lt;Mojo::Server::CGI&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Emitted right before the application server is started, for web servers that
support it, which includes all the built-in ones (except for
[[Mojo::Server::CGI]]).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Emitted when a new L&lt;Mojo::Content::Single&gt; part starts.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Emitted when a new [[Mojo::Content::Single]] part starts.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Emitted when asset gets upgraded to a L&lt;Mojo::Asset::File&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012451Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>Emitted when asset gets upgraded to a [[Mojo::Asset::File]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Emitted when content gets upgraded to a L&lt;Mojo::Content::MultiPart&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Emitted when content gets upgraded to a [[Mojo::Content::MultiPart]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Enable context information for L&lt;/"to_string"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Enable context information for [[/"to_string"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Encode bytestream with L&lt;Mojo::Util/"encode"&gt;, defaults to using C&lt;UTF-8&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Encode bytestream with [[Mojo::Util/"encode"]], defaults to using C&lt;UTF-8&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Encode characters to bytes with L&lt;Encode&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Encode characters to bytes with [[Encode]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Ensure L&lt;/"pid_file"&gt; exists.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Ensure [[/"pid_file"]] exists.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Escape POSIX control characters in bytestream with L&lt;Mojo::Util/"term_escape"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Escape POSIX control characters in bytestream with [[Mojo::Util/"term_escape"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Escape only the characters C&lt;&amp;&gt;, C&lt;E&lt;lt&gt;&gt;, C&lt;E&lt;gt&gt;&gt;, C&lt;"&gt; and C&lt;'&gt; in
bytestream with L&lt;Mojo::Util/"xml_escape"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Escape only the characters C&lt;&amp;&gt;, C&lt;E&lt;lt&gt;&gt;, C&lt;E&lt;gt&gt;&gt;, C&lt;"&gt; and C&lt;'&gt; in
bytestream with [[Mojo::Util/"xml_escape"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Escape unsafe characters C&lt;&amp;&gt;, C&lt;E&lt;lt&gt;&gt;, C&lt;E&lt;gt&gt;&gt;, C&lt;"&gt; and C&lt;'&gt; in string, but
do not escape L&lt;Mojo::ByteStream&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Escape unsafe characters C&lt;&amp;&gt;, C&lt;E&lt;lt&gt;&gt;, C&lt;E&lt;gt&gt;&gt;, C&lt;"&gt; and C&lt;'&gt; in string, but
do not escape [[Mojo::ByteStream]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Escaping behavior can be reversed with the L&lt;/"auto_escape"&gt; attribute, this is
the default in L&lt;Mojolicious&gt; C&lt;.ep&gt; templates, for example.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Escaping behavior can be reversed with the [[/"auto_escape"]] attribute, this is
the default in [[Mojolicious]] C&lt;.ep&gt; templates, for example.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Especially for people new to Perl it should be as easy as possible to install
L&lt;Mojolicious&gt; and get started.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Especially for people new to Perl it should be as easy as possible to install
[[Mojolicious]] and get started.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Especially for rearranging routes created by plugins this can be very useful,
to find routes by their name you can use L&lt;Mojolicious::Routes::Route/"find"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Especially for rearranging routes created by plugins this can be very useful,
to find routes by their name you can use [[Mojolicious::Routes::Route/"find"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Especially in combination with
L&lt;Mojo::JSON&gt; and L&lt;Mojo::DOM&gt; this can be a very powerful tool.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T122609Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>特に[[Mojo::JSON]]と[[Mojo::DOM]]の組み合わせはとても強力なツールになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Essentials every L&lt;Mojolicious&gt; developer should know.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Essentials every [[Mojolicious]] developer should know.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Even the route pattern and destination can still be changed with
L&lt;Mojolicious::Routes::Pattern/"parse"&gt; and
L&lt;Mojolicious::Routes::Pattern/"defaults"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Even the route pattern and destination can still be changed with
[[Mojolicious::Routes::Pattern/"parse"]] and
[[Mojolicious::Routes::Pattern/"defaults"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Event loop object to control, defaults to the global L&lt;Mojo::IOLoop&gt; singleton.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Event loop object to control, defaults to the global [[Mojo::IOLoop]] singleton.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Event loop object to use for I/O operations, defaults to the global
L&lt;Mojo::IOLoop&gt; singleton.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Event loop object to use for I/O operations, defaults to the global
[[Mojo::IOLoop]] singleton.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Event loop object to use for blocking I/O operations, defaults to a
L&lt;Mojo::IOLoop&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Event loop object to use for blocking I/O operations, defaults to a
[[Mojo::IOLoop]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>EventSource is a special form of long polling where you can use
L&lt;Mojolicious::Controller/"write"&gt; to directly send DOM events from servers to
clients.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>EventSource is a special form of long polling where you can use
[[Mojolicious::Controller/"write"]] to directly send DOM events from servers to
clients.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Ever thought about releasing your L&lt;Mojolicious&gt; application to CPAN?</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Ever thought about releasing your [[Mojolicious]] application to CPAN?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Ever thought about running a quick one-liner against your L&lt;Mojolicious&gt;
application to test something?</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Ever thought about running a quick one-liner against your [[Mojolicious]]
application to test something?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every check is performed right away, so you can use the
results immediately to build more advanced validation logic with methods like
L&lt;Mojolicious::Validator::Validation/"is_valid"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Every check is performed right away, so you can use the
results immediately to build more advanced validation logic with methods like
[[Mojolicious::Validator::Validation/"is_valid"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every major release of L&lt;Mojolicious&gt; has a code name, these are the ones that
have been used in the past.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Every major release of [[Mojolicious]] has a code name, these are the ones that
have been used in the past.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Execute callback if the value of L&lt;/"success"&gt; is false.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Execute callback if the value of [[/"success"]] is false.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Execute the first callback in a child process and wait for it to return one or
more values, without blocking L&lt;/"ioloop"&gt; in the parent process.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Execute the first callback in a child process and wait for it to return one or
more values, without blocking [[/"ioloop"]] in the parent process.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Extend L&lt;Mojolicious&gt; with hooks, which allow code to be shared with all
requests indiscriminately, for a full list of available hooks see L&lt;/"HOOKS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Extend [[Mojolicious]] with hooks, which allow code to be shared with all
requests indiscriminately, for a full list of available hooks see [[/"HOOKS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>External static files are not limited to a single file extension and will be
served automatically from a C&lt;public&gt; directory if it exists.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T021826Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>外部に置いた静的ファイルは、拡張子が1種類に制限されず、C&lt;public&gt;ディレクトリが存在すればそこから自動的にサーブされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>External templates will be searched by the renderer in a C&lt;templates&gt; directory
if it exists.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T020538Z" creationid="mokoo" creationdate="20190309T073941Z">
        <seg>外部テンプレートは、レンダラによってC&lt;templates&gt; ディレクトリから検索されます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Extract options from an array reference with L&lt;Getopt::Long&gt;, but without
changing its global configuration, defaults to using C&lt;@ARGV&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Extract options from an array reference with [[Getopt::Long]], but without
changing its global configuration, defaults to using C&lt;@ARGV&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Extract usage message from the SYNOPSIS section of the file this method was
called from with L&lt;Mojo::Util/"extract_usage"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Extract usage message from the SYNOPSIS section of the file this method was
called from with [[Mojo::Util/"extract_usage"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Extract value from L&lt;/"data"&gt; identified by the given JSON Pointer.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Extract value from [[/"data"]] identified by the given JSON Pointer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>False, this is not a L&lt;Mojo::Asset::File&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012451Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>False, this is not a [[Mojo::Asset::File]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>False, this is not a L&lt;Mojo::Content::MultiPart&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>False, this is not a [[Mojo::Content::MultiPart]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>False, this is not a L&lt;Mojo::Transaction::WebSocket&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>False, this is not a [[Mojo::Transaction::WebSocket]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>File path used to create L&lt;/"handle"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>File path used to create [[/"handle"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Filehandle, created on demand for L&lt;/"path"&gt;, which can be generated
automatically and safely based on L&lt;/"tmpdir"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Filehandle, created on demand for [[/"path"]], which can be generated
automatically and safely based on [[/"tmpdir"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finalize dynamically generated response content and L&lt;/"compress"&gt; it if
possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Finalize dynamically generated response content and [[/"compress"]] it if
possible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finalize response and emit hook L&lt;Mojolicious/"after_dispatch"&gt;, defaults to
using a C&lt;200&gt; response code.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Finalize response and emit hook [[Mojolicious/"after_dispatch"]], defaults to
using a C&lt;200&gt; response code.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Find L&lt;Mojo::Cookie::Request&gt; objects in the jar for L&lt;Mojo::URL&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Find [[Mojo::Cookie::Request]] objects in the jar for [[Mojo::URL]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Find all ancestor elements of this node matching the CSS selector and return a
L&lt;Mojo::Collection&gt; object containing these elements as L&lt;Mojo::DOM&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Find all ancestor elements of this node matching the CSS selector and return a
[[Mojo::Collection]] object containing these elements as [[Mojo::DOM]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Find all child elements of this element matching the CSS selector and return a
L&lt;Mojo::Collection&gt; object containing these elements as L&lt;Mojo::DOM&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Find all child elements of this element matching the CSS selector and return a
[[Mojo::Collection]] object containing these elements as [[Mojo::DOM]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Find all descendant elements of this element matching the CSS selector and
return a L&lt;Mojo::Collection&gt; object containing these elements as L&lt;Mojo::DOM&gt;
objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Find all descendant elements of this element matching the CSS selector and
return a [[Mojo::Collection]] object containing these elements as [[Mojo::DOM]]
objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Find all sibling elements after this node matching the CSS selector and return
a L&lt;Mojo::Collection&gt; object containing these elements as L&lt;Mojo::DOM&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Find all sibling elements after this node matching the CSS selector and return
a [[Mojo::Collection]] object containing these elements as [[Mojo::DOM]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Find all sibling elements before this node matching the CSS selector and return
a L&lt;Mojo::Collection&gt; object containing these elements as L&lt;Mojo::DOM&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Find all sibling elements before this node matching the CSS selector and return
a [[Mojo::Collection]] object containing these elements as [[Mojo::DOM]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Find first descendant element of this element matching the CSS selector and
return it as a L&lt;Mojo::DOM&gt; object, or C&lt;undef&gt; if none could be found.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Find first descendant element of this element matching the CSS selector and
return it as a [[Mojo::DOM]] object, or C&lt;undef&gt; if none could be found.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Find route by name with L&lt;Mojolicious::Routes::Route/"find"&gt; and cache all
results for future lookups.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Find route by name with [[Mojolicious::Routes::Route/"find"]] and cache all
results for future lookups.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First of all, make sure you are using the latest version of L&lt;Mojolicious&gt;, it
is quite likely that your bug has already been fixed.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>First of all, make sure you are using the latest version of [[Mojolicious]], it
is quite likely that your bug has already been fixed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First of all, you need to be aware that according to the L&lt;perlpolicy&gt;, only
the two most recent stable release series of Perl are supported by the
community and receive bug fixes, which are currently 5.28.x and 5.26.x.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>First of all, you need to be aware that according to the [[perlpolicy]], only
the two most recent stable release series of Perl are supported by the
community and receive bug fixes, which are currently 5.28.x and 5.26.x.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For
a full list of helpers that are available by default see
L&lt;Mojolicious::Plugin::DefaultHelpers&gt; and L&lt;Mojolicious::Plugin::TagHelpers&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For
a full list of helpers that are available by default see
[[Mojolicious::Plugin::DefaultHelpers]] and [[Mojolicious::Plugin::TagHelpers]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For Ajax requests and the like, you can also generate a token directly with the
helper L&lt;Mojolicious::Plugin::DefaultHelpers/"csrf_token"&gt;, and then pass it
along with the C&lt;X-CSRF-Token&gt; request header.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For Ajax requests and the like, you can also generate a token directly with the
helper [[Mojolicious::Plugin::DefaultHelpers/"csrf_token"]], and then pass it
along with the C&lt;X-CSRF-Token&gt; request header.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For Comet (long polling) you might also want to increase the inactivity timeout
with L&lt;Mojolicious::Plugin::DefaultHelpers/"inactivity_timeout"&gt;, which usually
defaults to C&lt;15&gt; seconds.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For Comet (long polling) you might also want to increase the inactivity timeout
with [[Mojolicious::Plugin::DefaultHelpers/"inactivity_timeout"]], which usually
defaults to C&lt;15&gt; seconds.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For a full list of
commands that are available by default see L&lt;Mojolicious::Commands/"COMMANDS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For a full list of
commands that are available by default see [[Mojolicious::Commands/"COMMANDS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For a full list of available CSS selectors see L&lt;Mojo::DOM::CSS/"SELECTORS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For a full list of available CSS selectors see [[Mojo::DOM::CSS/"SELECTORS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For a full list of available checks see also
L&lt;Mojolicious::Validator/"CHECKS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For a full list of available checks see also
[[Mojolicious::Validator/"CHECKS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For a full list of available hooks see L&lt;Mojolicious/"HOOKS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For a full list of available hooks see [[Mojolicious/"HOOKS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For a full list of available placeholder types see also
L&lt;Mojolicious::Routes/"TYPES"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For a full list of available placeholder types see also
[[Mojolicious::Routes/"TYPES"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For a full list of reserved stash values see
L&lt;Mojolicious::Controller/"stash"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For a full list of reserved stash values see
[[Mojolicious::Controller/"stash"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For a full list of shared options see L&lt;Mojolicious::Commands/"SYNOPSIS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For a full list of shared options see [[Mojolicious::Commands/"SYNOPSIS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For a little
more power you can introspect the preceding and succeeding destinations with
L&lt;Mojolicious::Controller/"match"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For a little
more power you can introspect the preceding and succeeding destinations with
[[Mojolicious::Controller/"match"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For all
templates L&lt;strict&gt;, L&lt;warnings&gt;, L&lt;utf8&gt; and Perl 5.10 L&lt;features|feature&gt; are
automatically enabled.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For all
templates [[strict]], [[warnings]], [[utf8]] and Perl 5.10 [[features|feature]] are
automatically enabled.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For all templates L&lt;strict&gt;, L&lt;warnings&gt;, L&lt;utf8&gt; and Perl 5.10
L&lt;features|feature&gt; are automatically enabled.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013057Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For all templates [[strict]], [[warnings]], [[utf8]] and Perl 5.10
[[features|feature]] are automatically enabled.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For better performance the optional module L&lt;Cpanel::JSON::XS&gt; (4.04+) will be
used automatically if possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For better performance the optional module [[Cpanel::JSON::XS]] (4.04+) will be
used automatically if possible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For better scalability (epoll, kqueue) and to provide non-blocking name
resolution, SOCKS5 as well as TLS support, the optional modules L&lt;EV&gt; (4.0+),
L&lt;Net::DNS::Native&gt; (0.15+), L&lt;IO::Socket::Socks&gt; (0.64+) and
L&lt;IO::Socket::SSL&gt; (1.84+) will be used automatically if possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For better scalability (epoll, kqueue) and to provide non-blocking name
resolution, SOCKS5 as well as TLS support, the optional modules [[EV]] (4.0+),
[[Net::DNS::Native]] (0.15+), [[IO::Socket::Socks]] (0.64+) and
[[IO::Socket::SSL]] (1.84+) will be used automatically if possible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For better scalability (epoll, kqueue) and to provide non-blocking name
resolution, SOCKS5 as well as TLS support, the optional modules L&lt;EV&gt; (4.0+),
L&lt;Net::DNS::Native&gt; (0.15+), L&lt;IO::Socket::Socks&gt; (0.64+) and
L&lt;IO::Socket::SSL&gt; (2.009+) will be used automatically if possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For better scalability (epoll, kqueue) and to provide non-blocking name
resolution, SOCKS5 as well as TLS support, the optional modules [[EV]] (4.0+),
[[Net::DNS::Native]] (0.15+), [[IO::Socket::Socks]] (0.64+) and
[[IO::Socket::SSL]] (2.009+) will be used automatically if possible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For bigger applications L&lt;Mojolicious&gt; contains the UNIX optimized pre-forking
web server L&lt;Hypnotoad|Mojo::Server::Hypnotoad&gt;, which can take advantage of
multiple CPU cores and copy-on-write memory management to scale up to thousands
of concurrent client connections.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For bigger applications [[Mojolicious]] contains the UNIX optimized pre-forking
web server [[Hypnotoad|Mojo::Server::Hypnotoad]], which can take advantage of
multiple CPU cores and copy-on-write memory management to scale up to thousands
of concurrent client connections.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For data that should only be visible on the next request, like a confirmation
message after a C&lt;302&gt; redirect performed with
L&lt;Mojolicious::Plugin::DefaultHelpers/"redirect_to"&gt;, you can use the flash,
accessible through L&lt;Mojolicious::Plugin::DefaultHelpers/"flash"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For data that should only be visible on the next request, like a confirmation
message after a C&lt;302&gt; redirect performed with
[[Mojolicious::Plugin::DefaultHelpers/"redirect_to"]], you can use the flash,
accessible through [[Mojolicious::Plugin::DefaultHelpers/"flash"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For developers of other web frameworks, it should be possible to reuse all the
infrastructure and just consider the higher levels of the L&lt;Mojolicious&gt;
distribution an example application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For developers of other web frameworks, it should be possible to reuse all the
infrastructure and just consider the higher levels of the [[Mojolicious]]
distribution an example application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For even more advanced negotiation logic you can also use the helper
L&lt;Mojolicious::Plugin::DefaultHelpers/"accepts"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For even more advanced negotiation logic you can also use the helper
[[Mojolicious::Plugin::DefaultHelpers/"accepts"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For even more control you can also just skip the helper and use
L&lt;Mojolicious::Controller/"rendered"&gt; to tell the renderer when you're done
generating a response.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For even more control you can also just skip the helper and use
[[Mojolicious::Controller/"rendered"]] to tell the renderer when you're done
generating a response.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For fields that failed validation with
L&lt;Mojolicious::Plugin::DefaultHelpers/"validation"&gt; the C&lt;field-with-error&gt;
class will be automatically added through L&lt;/"tag_with_error"&gt;, to make styling
with CSS easier.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For fields that failed validation with
[[Mojolicious::Plugin::DefaultHelpers/"validation"]] the C&lt;field-with-error&gt;
class will be automatically added through [[/"tag_with_error"]], to make styling
with CSS easier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For finer control, L&lt;/Rewriting&gt; includes examples of how the changes could be
implemented manually.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For finer control, [[/Rewriting]] includes examples of how the changes could be
implemented manually.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, C&lt;$bytes&gt; or C&lt;$chars&gt; to distinguish whether it is encoded
bytes or decoded characters in a Perl L&lt;string|perlunifaq&gt;, C&lt;$bool&gt; if the
value just indicates true or false, C&lt;$c&gt; to denote a L&lt;Mojolicious::Controller&gt;
object, or C&lt;$app&gt; to denote the L&lt;application|Mojolicious&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For instance, C&lt;$bytes&gt; or C&lt;$chars&gt; to distinguish whether it is encoded
bytes or decoded characters in a Perl [[string|perlunifaq]], C&lt;$bool&gt; if the
value just indicates true or false, C&lt;$c&gt; to denote a [[Mojolicious::Controller&gt;
object, or C&lt;$app&gt; to denote the [[application|Mojolicious&gt; object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For more
information about how to generate content see
L&lt;Mojolicious::Guides::Rendering&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For more
information about how to generate content see
[[Mojolicious::Guides::Rendering]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For more advanced negotiation logic you can also use L&lt;/"accepts"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For more advanced negotiation logic you can also use [[/"accepts"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For more books and documentation, check out
L&lt;learn.perl.org|http://learn.perl.org/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For more books and documentation, check out
[[learn.perl.org|http://learn.perl.org/]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For more information about available content generators see also
L&lt;Mojo::UserAgent::Transactor/"tx"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For more information about available content generators see also
[[Mojo::UserAgent::Transactor/"tx"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For more information about how to deploy your application see also
L&lt;Mojolicious::Guides::Cookbook/"DEPLOYMENT"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>アプリケーションのデプロイ方法について詳しい情報は、
[[Mojolicious::Guides::Cookbook]]のC&lt;デプロイメント&gt;の項目を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For more information about real-time web features see also
L&lt;Mojolicious::Guides::Cookbook/"REAL-TIME WEB"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T023008Z" creationid="mokoo" creationdate="20190309T123210Z">
        <seg>リアルタイムウェブ機能についてのより詳しい情報は、[[Mojolicious::Guides::Cookbook]]のC&lt;REAL-TIME WEB&gt;にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For more information about templates see also
L&lt;Mojolicious::Guides::Rendering/"Embedded Perl"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123428Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>テンプレートについて詳しい情報は
[[Mojolicious::Guides::Rendering]]のC&lt;埋め込みPerl&gt;の項を見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For more information about the format see
L&lt;https://www.openssl.org/docs/manmaster/apps/ciphers.html#CIPHER-STRINGS&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For more information about the format see
[[https://www.openssl.org/docs/manmaster/apps/ciphers.html#CIPHER-STRINGS]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For more information about the user agent see also
L&lt;Mojolicious::Guides::Cookbook/"USER AGENT"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134842Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>ユーザーエージェントについてより詳しい情報は、[[Mojolicious::Guides::Cookbook]]のC&lt;ユーザーエージェント&gt;の項目にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For more information see L&lt;Mojolicious::Guides::Rendering/"Embedded Perl"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For more information see [[Mojolicious::Guides::Rendering/"Embedded Perl"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For mostly idle WebSockets you might also want to increase the inactivity
timeout with L&lt;Mojolicious::Plugin::DefaultHelpers/"inactivity_timeout"&gt;, which
usually defaults to C&lt;15&gt; seconds.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For mostly idle WebSockets you might also want to increase the inactivity
timeout with [[Mojolicious::Plugin::DefaultHelpers/"inactivity_timeout"]], which
usually defaults to C&lt;15&gt; seconds.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For quick hacks and especially testing, L&lt;ojo&gt; one-liners are also a great
choice.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For quick hacks and especially testing, [[ojo]] one-liners are also a great
choice.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For resources with different representations and that require truly RESTful
content negotiation you can also use
L&lt;Mojolicious::Plugin::DefaultHelpers/"respond_to"&gt; instead of
L&lt;Mojolicious::Controller/"render"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For resources with different representations and that require truly RESTful
content negotiation you can also use
[[Mojolicious::Plugin::DefaultHelpers/"respond_to"]] instead of
[[Mojolicious::Controller/"render"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For resources with different representations and that require truly RESTful
content negotiation you can also use
L&lt;Mojolicious::Plugin::DefaultHelpers/"respond_to"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T132524Z" creationid="mokoo" creationdate="20190309T073233Z">
        <seg>異なる方法で表現されるリソースや本当にRESTfulなコンテントネゴーシエーションが必要な場合は、[[Mojolicious::Plugin::DefaultHelpers]]のC&lt;respond_to&gt;を使用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For security reasons the dispatcher will always check if the C&lt;controller&gt; is
actually a subclass of L&lt;Mojolicious::Controller&gt; or L&lt;Mojo&gt; before dispatching
to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For security reasons the dispatcher will always check if the C&lt;controller&gt; is
actually a subclass of [[Mojolicious::Controller]] or [[Mojo]] before dispatching
to it.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For serving static files from your C&lt;public&gt; directories, defaults to a
L&lt;Mojolicious::Static&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For serving static files from your C&lt;public&gt; directories, defaults to a
[[Mojolicious::Static]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For somewhat static
content, like cached JSON data or temporary files, you can create your own and
use the helper L&lt;Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt&gt;asset"&gt; to
serve them while allowing content negotiation to be performed with C&lt;Range&gt;,
C&lt;If-Modified-Since&gt; and C&lt;If-None-Match&gt; headers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For somewhat static
content, like cached JSON data or temporary files, you can create your own and
use the helper [[Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt]]asset"]] to
serve them while allowing content negotiation to be performed with C&lt;Range&gt;,
C&lt;If-Modified-Since&gt; and C&lt;If-None-Match&gt; headers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For templates that might get rendered in different ways and where you're not
sure if a stash value will actually be set, you can just use the helper
L&lt;Mojolicious::Plugin::DefaultHelpers/"stash"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For templates that might get rendered in different ways and where you're not
sure if a stash value will actually be set, you can just use the helper
[[Mojolicious::Plugin::DefaultHelpers/"stash"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For very dynamic content you might not know the response content length in
advance, that's where the chunked transfer encoding and
L&lt;Mojolicious::Controller/"write_chunk"&gt; come in handy.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>For very dynamic content you might not know the response content length in
advance, that's where the chunked transfer encoding and
[[Mojolicious::Controller/"write_chunk"]] come in handy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Force L&lt;File::Find&gt; to always stat directories.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Force [[File::Find]] to always stat directories.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Form elements generated with tag helpers from
L&lt;Mojolicious::Plugin::TagHelpers&gt; will automatically remember their previous
values and add the class C&lt;field-with-error&gt; for fields that failed validation
to make styling with CSS easier.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Form elements generated with tag helpers from
[[Mojolicious::Plugin::TagHelpers]] will automatically remember their previous
values and add the class C&lt;field-with-error&gt; for fields that failed validation
to make styling with CSS easier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Formats can be automatically detected from file extensions like C&lt;.html&gt;, they
are used to find the right template and generate the correct C&lt;Content-Type&gt;
header.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T132120Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>フォーマット（formats）は、C&lt;.html&gt;などのファイル拡張子によって自動的に検出されます。フォーマットは正しいテンプレートを探したり、正確なC&lt;Content-Type&gt;ヘッダーを生成するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From application startup until the first request has arrived, all routes can
still be moved around or even removed with methods like
L&lt;Mojolicious::Routes::Route/"add_child"&gt; and
L&lt;Mojolicious::Routes::Route/"remove"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>From application startup until the first request has arrived, all routes can
still be moved around or even removed with methods like
[[Mojolicious::Routes::Route/"add_child"]] and
[[Mojolicious::Routes::Route/"remove"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From time to time you might want to reuse parts of L&lt;Mojolicious&gt; applications
like configuration files, database connection or helpers for other scripts,
with this little L&lt;Mojo::Server&gt; based mock server you can just embed them.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>From time to time you might want to reuse parts of [[Mojolicious]] applications
like configuration files, database connection or helpers for other scripts,
with this little [[Mojo::Server]] based mock server you can just embed them.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Full L&lt;Mojolicious&gt; applications are a little easier to test, so C&lt;t/login.t&gt;
can be simplified.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Full [[Mojolicious]] applications are a little easier to test, so C&lt;t/login.t&gt;
can be simplified.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Full L&lt;Mojolicious&gt; applications on the other hand are much closer to a well
organized CPAN distribution to maximize maintainability.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Full [[Mojolicious]] applications on the other hand are much closer to a well
organized CPAN distribution to maximize maintainability.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Full featured, UNIX optimized, preforking non-blocking I/O HTTP and WebSocket
server with support for zero downtime software upgrades (hot deployment)
through L&lt;Mojo::Server::Hypnotoad&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Full featured, UNIX optimized, preforking non-blocking I/O HTTP and WebSocket
server with support for zero downtime software upgrades (hot deployment)
through [[Mojo::Server::Hypnotoad]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Full featured, highly portable non-blocking I/O HTTP and WebSocket server, with
self-restart support through L&lt;Mojo::Server::Morbo&gt;, perfect for development
and testing.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Full featured, highly portable non-blocking I/O HTTP and WebSocket server, with
self-restart support through [[Mojo::Server::Morbo]], perfect for development
and testing.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Fun L&lt;Mojolicious&gt; application hacks for all occasions.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Fun [[Mojolicious]] application hacks for all occasions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate C&lt;input&gt; tag of type C&lt;hidden&gt; with
L&lt;Mojolicious::Plugin::DefaultHelpers/"csrf_token"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate C&lt;input&gt; tag of type C&lt;hidden&gt; with
[[Mojolicious::Plugin::DefaultHelpers/"csrf_token"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate C&lt;select&gt; and C&lt;option&gt; tags from array references and C&lt;optgroup&gt;
tags from L&lt;Mojo::Collection&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate C&lt;select&gt; and C&lt;option&gt; tags from array references and C&lt;optgroup&gt;
tags from [[Mojo::Collection]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate HMAC-SHA1 checksum for bytes with L&lt;Digest::SHA&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate HMAC-SHA1 checksum for bytes with [[Digest::SHA]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate HMAC-SHA1 checksum for bytestream with L&lt;Mojo::Util/"hmac_sha1_sum"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate HMAC-SHA1 checksum for bytestream with [[Mojo::Util/"hmac_sha1_sum"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate JSON content with L&lt;Mojo::JSON&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate JSON content with [[Mojo::JSON]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate L&lt;Mojo::Transaction::HTTP&gt; object with
L&lt;Mojo::UserAgent::Transactor/"tx"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate [[Mojo::Transaction::HTTP]] object with
[[Mojo::UserAgent::Transactor/"tx"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate L&lt;Mojo::Transaction::HTTP&gt; object with
L&lt;Mojo::UserAgent::Transactor/"websocket"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate [[Mojo::Transaction::HTTP]] object with
[[Mojo::UserAgent::Transactor/"websocket"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate L&lt;Mojolicious::Routes::Route&gt; object for a nested route with its own
intermediate destination, takes the same arguments as L&lt;/"any"&gt; (except for the
HTTP methods to match, which are not available).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate [[Mojolicious::Routes::Route]] object for a nested route with its own
intermediate destination, takes the same arguments as [[/"any"]] (except for the
HTTP methods to match, which are not available).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate L&lt;Mojolicious::Routes::Route&gt; object matching any of the listed HTTP
request methods or all.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate [[Mojolicious::Routes::Route]] object matching any of the listed HTTP
request methods or all.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate L&lt;Mojolicious::Routes::Route&gt; object matching only C&lt;DELETE&gt; requests,
takes the same arguments as L&lt;/"any"&gt; (except for the HTTP methods to match,
which are implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate [[Mojolicious::Routes::Route]] object matching only C&lt;DELETE&gt; requests,
takes the same arguments as [[/"any"]] (except for the HTTP methods to match,
which are implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate L&lt;Mojolicious::Routes::Route&gt; object matching only C&lt;GET&gt; requests,
takes the same arguments as L&lt;/"any"&gt; (except for the HTTP methods to match,
which are implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate [[Mojolicious::Routes::Route]] object matching only C&lt;GET&gt; requests,
takes the same arguments as [[/"any"]] (except for the HTTP methods to match,
which are implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate L&lt;Mojolicious::Routes::Route&gt; object matching only C&lt;OPTIONS&gt;
requests, takes the same arguments as L&lt;/"any"&gt; (except for the HTTP methods to
match, which are implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate [[Mojolicious::Routes::Route]] object matching only C&lt;OPTIONS&gt;
requests, takes the same arguments as [[/"any"]] (except for the HTTP methods to
match, which are implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate L&lt;Mojolicious::Routes::Route&gt; object matching only C&lt;PATCH&gt; requests,
takes the same arguments as L&lt;/"any"&gt; (except for the HTTP methods to match,
which are implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate [[Mojolicious::Routes::Route]] object matching only C&lt;PATCH&gt; requests,
takes the same arguments as [[/"any"]] (except for the HTTP methods to match,
which are implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate L&lt;Mojolicious::Routes::Route&gt; object matching only C&lt;POST&gt; requests,
takes the same arguments as L&lt;/"any"&gt; (except for the HTTP methods to match,
which are implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate [[Mojolicious::Routes::Route]] object matching only C&lt;POST&gt; requests,
takes the same arguments as [[/"any"]] (except for the HTTP methods to match,
which are implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate L&lt;Mojolicious::Routes::Route&gt; object matching only C&lt;PUT&gt; requests,
takes the same arguments as L&lt;/"any"&gt; (except for the HTTP methods to match,
which are implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate [[Mojolicious::Routes::Route]] object matching only C&lt;PUT&gt; requests,
takes the same arguments as [[/"any"]] (except for the HTTP methods to match,
which are implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate L&lt;Mojolicious::Routes::Route&gt; object matching only WebSocket
handshakes, takes the same arguments as L&lt;/"any"&gt; (except for the HTTP methods
to match, which are implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate [[Mojolicious::Routes::Route]] object matching only WebSocket
handshakes, takes the same arguments as [[/"any"]] (except for the HTTP methods
to match, which are implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate MD5 checksum for bytes with L&lt;Digest::MD5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate MD5 checksum for bytes with [[Digest::MD5]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate MD5 checksum for bytestream with L&lt;Mojo::Util/"md5_sum"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate MD5 checksum for bytestream with [[Mojo::Util/"md5_sum"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate SHA1 checksum for bytes with L&lt;Digest::SHA&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate SHA1 checksum for bytes with [[Digest::SHA]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate SHA1 checksum for bytestream with L&lt;Mojo::Util/"sha1_sum"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate SHA1 checksum for bytestream with [[Mojo::Util/"sha1_sum"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate URL slug for bytestream with L&lt;Mojo::Util/"slugify"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate URL slug for bytestream with [[Mojo::Util/"slugify"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate a portable L&lt;Mojo::URL&gt; object with base for a path, URL or route.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate a portable [[Mojo::URL]] object with base for a path, URL or route.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate binary MD5 checksum for bytes with L&lt;Digest::MD5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate binary MD5 checksum for bytes with [[Digest::MD5]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate binary MD5 checksum for bytestream with L&lt;Mojo::Util/"md5_bytes"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate binary MD5 checksum for bytestream with [[Mojo::Util/"md5_bytes"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate binary SHA1 checksum for bytes with L&lt;Digest::SHA&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate binary SHA1 checksum for bytes with [[Digest::SHA]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate binary SHA1 checksum for bytestream with L&lt;Mojo::Util/"sha1_bytes"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate binary SHA1 checksum for bytestream with [[Mojo::Util/"sha1_bytes"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate default response message for status code, defaults to using
L&lt;/"code"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate default response message for status code, defaults to using
[[/"code"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate nested route with L&lt;Mojolicious::Routes::Route/"under"&gt;, to which all
following routes are automatically appended.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate nested route with [[Mojolicious::Routes::Route/"under"]], to which all
following routes are automatically appended.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate portable C&lt;a&gt; tag with L&lt;Mojolicious::Controller/"url_for"&gt;, defaults
to using the capitalized link target as content.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate portable C&lt;a&gt; tag with [[Mojolicious::Controller/"url_for"&gt;, defaults
to using the capitalized link target as content.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate portable C&lt;form&gt; tag with L&lt;/"form_for"&gt;, containing a single button.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate portable C&lt;form&gt; tag with [[/"form_for"]], containing a single button.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate portable C&lt;form&gt; tag with L&lt;Mojolicious::Controller/"url_for"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate portable C&lt;form&gt; tag with [[Mojolicious::Controller/"url_for"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate route with L&lt;Mojolicious::Routes::Route/"any"&gt;, matching any of the
listed HTTP request methods or all.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate route with [[Mojolicious::Routes::Route/"any"]], matching any of the
listed HTTP request methods or all.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate route with L&lt;Mojolicious::Routes::Route/"delete"&gt;, matching only
C&lt;DELETE&gt; requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate route with [[Mojolicious::Routes::Route/"delete"]], matching only
C&lt;DELETE&gt; requests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate route with L&lt;Mojolicious::Routes::Route/"get"&gt;, matching only C&lt;GET&gt;
requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate route with [[Mojolicious::Routes::Route/"get"]], matching only C&lt;GET&gt;
requests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate route with L&lt;Mojolicious::Routes::Route/"options"&gt;, matching only
C&lt;OPTIONS&gt; requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate route with [[Mojolicious::Routes::Route/"options"]], matching only
C&lt;OPTIONS&gt; requests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate route with L&lt;Mojolicious::Routes::Route/"patch"&gt;, matching only
C&lt;PATCH&gt; requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate route with [[Mojolicious::Routes::Route/"patch"]], matching only
C&lt;PATCH&gt; requests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate route with L&lt;Mojolicious::Routes::Route/"post"&gt;, matching only C&lt;POST&gt;
requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate route with [[Mojolicious::Routes::Route/"post"]], matching only C&lt;POST&gt;
requests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate route with L&lt;Mojolicious::Routes::Route/"put"&gt;, matching only C&lt;PUT&gt;
requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate route with [[Mojolicious::Routes::Route/"put"]], matching only C&lt;PUT&gt;
requests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate route with L&lt;Mojolicious::Routes::Route/"websocket"&gt;, matching only
WebSocket handshakes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate route with [[Mojolicious::Routes::Route/"websocket"]], matching only
WebSocket handshakes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generate stack trace and store all L&lt;/"frames"&gt;, defaults to skipping C&lt;1&gt; call
frame.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generate stack trace and store all [[/"frames"]], defaults to skipping C&lt;1&gt; call
frame.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generating content with the L&lt;Mojolicious&gt; renderer.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Generating content with the [[Mojolicious]] renderer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get CSRF token from L&lt;/"session"&gt;, and generate one if none exists.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get CSRF token from [[/"session"]], and generate one if none exists.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get L&lt;Mojo::IOLoop::Server&gt; object for id or turn object into an acceptor.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get [[Mojo::IOLoop::Server]] object for id or turn object into an acceptor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get L&lt;Mojo::IOLoop::Stream&gt; object for id or turn object into a connection.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get [[Mojo::IOLoop::Stream]] object for id or turn object into a connection.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get L&lt;Mojo::Message::Request&gt; object from L&lt;/"tx"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get [[Mojo::Message::Request]] object from [[/"tx"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get L&lt;Mojo::Message::Response&gt; object from L&lt;/"tx"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get [[Mojo::Message::Response]] object from [[/"tx"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get L&lt;Mojolicious::Validator::Validation&gt; object for current request to
validate file uploads as well as C&lt;GET&gt; and C&lt;POST&gt; parameters extracted from
the query string and C&lt;application/x-www-form-urlencoded&gt; or
C&lt;multipart/form-data&gt; message body.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get [[Mojolicious::Validator::Validation]] object for current request to
validate file uploads as well as C&lt;GET&gt; and C&lt;POST&gt; parameters extracted from
the query string and C&lt;application/x-www-form-urlencoded&gt; or
C&lt;multipart/form-data&gt; message body.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get absolute L&lt;Mojo::URL&gt; object for server processing blocking requests with
L&lt;/"app"&gt; and switch protocol if necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get absolute [[Mojo::URL]] object for server processing blocking requests with
[[/"app"]] and switch protocol if necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get absolute L&lt;Mojo::URL&gt; object for server processing non-blocking requests
with L&lt;/"app"&gt; and switch protocol if necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get absolute [[Mojo::URL]] object for server processing non-blocking requests
with [[/"app"]] and switch protocol if necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get handle for server, usually an L&lt;IO::Socket::IP&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get handle for server, usually an [[IO::Socket::IP]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get handle for stream, usually an L&lt;IO::Socket::IP&gt; or L&lt;IO::Socket::SSL&gt;
object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get handle for stream, usually an [[IO::Socket::IP]] or [[IO::Socket::SSL]]
object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the
C&lt;Access-Control-Allow-Origin&gt; header from
L&lt;Cross-Origin Resource Sharing|http://www.w3.org/TR/cors/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the
C&lt;Access-Control-Allow-Origin&gt; header from
[[Cross-Origin Resource Sharing|http://www.w3.org/TR/cors/]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the
C&lt;Sec-WebSocket-Extensions&gt; header from
L&lt;RFC 6455|http://tools.ietf.org/html/rfc6455&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the
C&lt;Sec-WebSocket-Extensions&gt; header from
[[RFC 6455|http://tools.ietf.org/html/rfc6455]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the
C&lt;Strict-Transport-Security&gt; header from
L&lt;RFC 6797|http://tools.ietf.org/html/rfc6797&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the
C&lt;Strict-Transport-Security&gt; header from
[[RFC 6797|http://tools.ietf.org/html/rfc6797]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the C&lt;Content-Security-Policy&gt;
header from L&lt;Content Security Policy 1.0|http://www.w3.org/TR/CSP/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the C&lt;Content-Security-Policy&gt;
header from [[Content Security Policy 1.0|http://www.w3.org/TR/CSP/]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the C&lt;Cookie&gt; header from
L&lt;RFC 6265|http://tools.ietf.org/html/rfc6265&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the C&lt;Cookie&gt; header from
[[RFC 6265|http://tools.ietf.org/html/rfc6265]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the C&lt;Link&gt; header from
L&lt;RFC 5988|http://tools.ietf.org/html/rfc5988&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the C&lt;Link&gt; header from
[[RFC 5988|http://tools.ietf.org/html/rfc5988]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the C&lt;Origin&gt; header from
L&lt;RFC 6454|http://tools.ietf.org/html/rfc6454&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the C&lt;Origin&gt; header from
[[RFC 6454|http://tools.ietf.org/html/rfc6454]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the C&lt;Referer&gt; header, there
was a typo in L&lt;RFC 2068|http://tools.ietf.org/html/rfc2068&gt; which resulted in
C&lt;Referer&gt; becoming an official header.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the C&lt;Referer&gt; header, there
was a typo in [[RFC 2068|http://tools.ietf.org/html/rfc2068]] which resulted in
C&lt;Referer&gt; becoming an official header.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the C&lt;Sec-WebSocket-Accept&gt;
header from L&lt;RFC 6455|http://tools.ietf.org/html/rfc6455&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the C&lt;Sec-WebSocket-Accept&gt;
header from [[RFC 6455|http://tools.ietf.org/html/rfc6455]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the C&lt;Sec-WebSocket-Key&gt;
header from L&lt;RFC 6455|http://tools.ietf.org/html/rfc6455&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the C&lt;Sec-WebSocket-Key&gt;
header from [[RFC 6455|http://tools.ietf.org/html/rfc6455]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the C&lt;Sec-WebSocket-Protocol&gt;
header from L&lt;RFC 6455|http://tools.ietf.org/html/rfc6455&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the C&lt;Sec-WebSocket-Protocol&gt;
header from [[RFC 6455|http://tools.ietf.org/html/rfc6455]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the C&lt;Sec-WebSocket-Version&gt;
header from L&lt;RFC 6455|http://tools.ietf.org/html/rfc6455&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the C&lt;Sec-WebSocket-Version&gt;
header from [[RFC 6455|http://tools.ietf.org/html/rfc6455]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the C&lt;Server-Timing&gt; header
from L&lt;Server Timing|https://www.w3.org/TR/server-timing/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the C&lt;Server-Timing&gt; header
from [[Server Timing|https://www.w3.org/TR/server-timing/]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the C&lt;Set-Cookie&gt; header from
L&lt;RFC 6265|http://tools.ietf.org/html/rfc6265&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the C&lt;Set-Cookie&gt; header from
[[RFC 6265|http://tools.ietf.org/html/rfc6265]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or replace current header value, shortcut for the C&lt;Status&gt; header from
L&lt;RFC 3875|http://tools.ietf.org/html/rfc3875&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or replace current header value, shortcut for the C&lt;Status&gt; header from
[[RFC 3875|http://tools.ietf.org/html/rfc3875]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get or set C&lt;title&gt; stash value, all additional key/value pairs get merged into
the L&lt;/"stash"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get or set C&lt;title&gt; stash value, all additional key/value pairs get merged into
the [[/"stash"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get process id for running server from L&lt;/"pid_file"&gt; or delete it if server is
not running.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Get process id for running server from [[/"pid_file"]] or delete it if server is
not running.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Getting L&lt;Mojolicious&gt; and L&lt;Mojolicious::Lite&gt; applications running on
different platforms.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Getting [[Mojolicious]] and [[Mojolicious::Lite]] applications running on
different platforms.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>HTML or XML semantics can also be forced with the L&lt;/"xml"&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>HTML or XML semantics can also be forced with the [[/"xml"]] method.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>HTTP request URL, defaults to a L&lt;Mojo::URL&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>HTTP request URL, defaults to a [[Mojo::URL]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>HTTP request, defaults to a L&lt;Mojo::Message::Request&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>HTTP request, defaults to a [[Mojo::Message::Request]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>HTTP response, defaults to a L&lt;Mojo::Message::Response&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>HTTP response, defaults to a [[Mojo::Message::Response]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Handshake request, usually a L&lt;Mojo::Message::Request&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Handshake request, usually a [[Mojo::Message::Request]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Handshake response, usually a L&lt;Mojo::Message::Response&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Handshake response, usually a [[Mojo::Message::Response]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Headers for upload, usually a L&lt;Mojo::Headers&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Headers for upload, usually a [[Mojo::Headers]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Heartbeat interval in seconds, defaults to the value of
L&lt;Mojo::Server::Prefork/"heartbeat_interval"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Heartbeat interval in seconds, defaults to the value of
[[Mojo::Server::Prefork/"heartbeat_interval"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T062215Z" creationid="mokoo" creationdate="20190309T062215Z">
        <seg>Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Helpers are little functions you can create with the keyword
L&lt;Mojolicious::Lite/"helper"&gt; and reuse throughout your whole application, from
actions to templates.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T125107Z" creationid="mokoo" creationdate="20190309T070601Z">
        <seg>ヘルパーは [[Mojolicious::Lite]]のC&lt;helper&gt; キーワードで作ることができる小さな関数です。アクションからテンプレートまでアプリケーション全体において利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here are a few examples from the L&lt;Test::Mojo&gt; documentation:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Here are a few examples from the [[Test::Mojo]] documentation:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here we can see our application class name C&lt;MyApp&gt; is passed to the
L&lt;Test::Mojo&gt; constructor.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Here we can see our application class name C&lt;MyApp&gt; is passed to the
[[Test::Mojo]] constructor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here's an example for how
L&lt;Mojo::UserAgent/"get_p"&gt; works internally.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Here's an example for how
[[Mojo::UserAgent/"get_p"]] works internally.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>High resolution time elapsed from an arbitrary fixed point in the past,
resilient to time jumps if a monotonic clock is available through
L&lt;Time::HiRes&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>High resolution time elapsed from an arbitrary fixed point in the past,
resilient to time jumps if a monotonic clock is available through
[[Time::HiRes]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Hooks operate outside the routing system and allow you to extend the framework
itself by sharing code with all requests indiscriminately through
L&lt;Mojolicious/"hook"&gt;, which makes them a very powerful tool especially for
plugins.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Hooks operate outside the routing system and allow you to extend the framework
itself by sharing code with all requests indiscriminately through
[[Mojolicious/"hook"]], which makes them a very powerful tool especially for
plugins.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Host-only flag, indicating that the canonicalized request-host is identical to
the cookie's L&lt;/"domain"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Host-only flag, indicating that the canonicalized request-host is identical to
the cookie's [[/"domain"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, now the client address is no longer available (which might be useful
for analytics, or Geo-IP) and URLs generated via
L&lt;Mojolicious::Controller/"url_for"&gt; will look like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>However, now the client address is no longer available (which might be useful
for analytics, or Geo-IP) and URLs generated via
[[Mojolicious::Controller/"url_for"]] will look like this:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, to completely avoid any risk of accidental breakage,
we do recommend following current best practices for version pinning with
L&lt;Carton&gt; for production setups.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>However, to completely avoid any risk of accidental breakage,
we do recommend following current best practices for version pinning with
[[Carton]] for production setups.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If
there are multiple uploads sharing the same name, and you want to access more
than just the last one, you can use L&lt;/"every_upload"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If
there are multiple uploads sharing the same name, and you want to access more
than just the last one, you can use [[/"every_upload"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If
there are multiple values sharing the same name, and you want to access more
than just the last one, you can use L&lt;/"every_param"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If
there are multiple values sharing the same name, and you want to access more
than just the last one, you can use [[/"every_param"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If
there are multiple values sharing the same name, and you want to access more
than just the last one, you can use L&lt;/"every_signed_cookie"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If
there are multiple values sharing the same name, and you want to access more
than just the last one, you can use [[/"every_signed_cookie"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If every byte matters this is the smallest C&lt;Hello World&gt; application you can
write with L&lt;Mojolicious::Lite&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If every byte matters this is the smallest C&lt;Hello World&gt; application you can
write with [[Mojolicious::Lite]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If that's the case and you are certain that no MITM attack is being attempted,
you can use the attribute L&lt;Mojo::UserAgent/"insecure"&gt; or C&lt;MOJO_INSECURE&gt;
environment variable to disable certificate verification.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If that's the case and you are certain that no MITM attack is being attempted,
you can use the attribute [[Mojo::UserAgent/"insecure"]] or C&lt;MOJO_INSECURE&gt;
environment variable to disable certificate verification.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the configuration value C&lt;config_override&gt; has been set in
L&lt;Mojolicious/"config"&gt; when this plugin is loaded, it will not do anything.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If the configuration value C&lt;config_override&gt; has been set in
[[Mojolicious/"config"]] when this plugin is loaded, it will not do anything.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If there are
multiple values sharing the same name, and you want to access more than just
the last one, you can use L&lt;/"every_cookie"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If there are
multiple values sharing the same name, and you want to access more than just
the last one, you can use [[/"every_cookie"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If there are
multiple values sharing the same name, and you want to access more than just the
last one, you can use L&lt;/"every_param"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If there are
multiple values sharing the same name, and you want to access more than just the
last one, you can use [[/"every_param"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If there are multiple cookies sharing the
same name, and you want to access more than just the last one, you can use
L&lt;/"every_cookie"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If there are multiple cookies sharing the
same name, and you want to access more than just the last one, you can use
[[/"every_cookie"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If there are multiple values sharing the same
name, and you want to access more than just the last one, you can use
L&lt;/"every_param"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If there are multiple values sharing the same
name, and you want to access more than just the last one, you can use
[[/"every_param"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If there are multiple values sharing the same name,
and you want to access more than just the last one, you can use
L&lt;/"every_param"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If there are multiple values sharing the same name,
and you want to access more than just the last one, you can use
[[/"every_param"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you are new to Perl, we recommend
L&lt;Learn Perl in 2 hours 30 minutes|http://qntm.org/files/perl/perl.html&gt; for a
quick introduction, or the
L&lt;Modern Perl book|https://pragprog.com/book/swperl/modern-perl-fourth-edition&gt;,
freely available in many formats.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If you are new to Perl, we recommend
[[Learn Perl in 2 hours 30 minutes|http://qntm.org/files/perl/perl.html]] for a
quick introduction, or the
[[Modern Perl book|https://pragprog.com/book/swperl/modern-perl-fourth-edition]],
freely available in many formats.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you believe someone is violating the code of conduct, we ask that you report
it by emailing Joel Berger (C&lt;jberger@mojolicious.org&gt;) or other members of
L&lt;the team|Mojolicious/"CORE DEVELOPERS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If you believe someone is violating the code of conduct, we ask that you report
it by emailing Joel Berger (C&lt;jberger@mojolicious.org&gt;) or other members of
[[the team|Mojolicious/"CORE DEVELOPERS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have any questions the documentation might not yet answer, don't
hesitate to ask on the
L&lt;mailing list|http://groups.google.com/group/mojolicious&gt; or the official IRC
channel C&lt;#mojo&gt; on C&lt;irc.freenode.net&gt; (L&lt;chat
now!|https://kiwiirc.com/nextclient/#irc://irc.freenode.net/mojo?nick=guest-?&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T135417Z" creationid="mokoo" creationdate="20190310T005257Z">
        <seg>このドキュメントでわからない部分があれば、
[[mailing list|http://groups.google.com/group/mojolicious]] かC&lt;irc.freenode.net&gt; (L&lt;chat
now!|https://kiwiirc.com/nextclient/#irc://irc.freenode.net/mojo?nick=guest-?&gt;)の公式IRCチャンネル C&lt;#mojo&gt; まで気軽に質問してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you pass the name of a L&lt;Mojolicious&gt; application class (e.g., 'MyApp') to
the L&lt;Test::Mojo&gt; constructor, L&lt;Test::Mojo&gt; will instantiate the class and
start it, and cause it to listen on a random (unused) port number.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If you pass the name of a [[Mojolicious]] application class (e.g., 'MyApp') to
the [[Test::Mojo]] constructor, [[Test::Mojo]] will instantiate the class and
start it, and cause it to listen on a random (unused) port number.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run a business and use L&lt;Mojolicious&gt; in a revenue generating product, it
makes business sense to support L&lt;Mojolicious&gt; development.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If you run a business and use [[Mojolicious]] in a revenue generating product, it
makes business sense to support [[Mojolicious]] development.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to compress all dynamically generated content you can also activate
L&lt;Mojolicious::Renderer/"compress"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If you want to compress all dynamically generated content you can also activate
[[Mojolicious::Renderer/"compress"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you're not sure in advance if a template actually exists, you can also use
the method L&lt;Mojolicious::Controller/"render_maybe"&gt; to try multiple
alternatives.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>If you're not sure in advance if a template actually exists, you can also use
the method [[Mojolicious::Controller/"render_maybe"]] to try multiple
alternatives.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In L&lt;Mojolicious&gt; applications you can also use the helper
L&lt;Mojolicious::Plugin::DefaultHelpers/"inactivity_timeout"&gt; to change it on
demand for each connection individually.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In [[Mojolicious]] applications you can also use the helper
[[Mojolicious::Plugin::DefaultHelpers/"inactivity_timeout"]] to change it on
demand for each connection individually.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In L&lt;Mojolicious&gt; however we are taking this concept one step further by
storing everything JSON serialized and Base64 encoded in HMAC-SHA1 signed
cookies, which is more compatible with the REST philosophy and reduces
infrastructure requirements.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In [[Mojolicious]] however we are taking this concept one step further by
storing everything JSON serialized and Base64 encoded in HMAC-SHA1 signed
cookies, which is more compatible with the REST philosophy and reduces
infrastructure requirements.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In L&lt;Mojolicious&gt; this event loop is L&lt;Mojo::IOLoop&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In [[Mojolicious]] this event loop is [[Mojo::IOLoop]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In L&lt;Mojolicious&gt; we consider web applications simple frontends for existing
business logic, that means L&lt;Mojolicious&gt; is by design entirely I&lt;model&gt; layer
agnostic and you just use whatever Perl modules you like most.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In [[Mojolicious]] we consider web applications simple frontends for existing
business logic, that means [[Mojolicious]] is by design entirely I&lt;model]] layer
agnostic and you just use whatever Perl modules you like most.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In L&lt;Mojolicious&gt; we take testing very serious and try to make it a pleasant
experience.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In [[Mojolicious]] we take testing very serious and try to make it a pleasant
experience.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition to a class name or
L&lt;Mojo::File&gt; object pointing to the application script, you can pass along a
hash reference with configuration values that will be used to override the
application configuration.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In addition to a class name or
[[Mojo::File]] object pointing to the application script, you can pass along a
hash reference with configuration values that will be used to override the
application configuration.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition to the L&lt;/"ATTRIBUTES"&gt; and L&lt;/"METHODS"&gt; above you can also call
helpers on L&lt;Mojolicious&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In addition to the [[/"ATTRIBUTES"]] and [[/"METHODS"]] above you can also call
helpers on [[Mojolicious]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition to the L&lt;/"ATTRIBUTES"&gt; and L&lt;/"METHODS"&gt; above you can also call
helpers provided by L&lt;/"app"&gt; on L&lt;Mojolicious::Controller&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In addition to the [[/"ATTRIBUTES"]] and [[/"METHODS"]] above you can also call
helpers provided by [[/"app"]] on [[Mojolicious::Controller]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition to the L&lt;/"ATTRIBUTES"&gt; and L&lt;/"METHODS"&gt; above you can also call
shortcuts provided by L&lt;/"root"&gt; on L&lt;Mojolicious::Routes::Route&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In addition to the [[/"ATTRIBUTES"]] and [[/"METHODS"]] above you can also call
shortcuts provided by [[/"root"]] on [[Mojolicious::Routes::Route]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition to the L&lt;/"ATTRIBUTES"&gt; and L&lt;/"METHODS"&gt; above, you can also call
validation checks provided by L&lt;/"validator"&gt; on
L&lt;Mojolicious::Validator::Validation&gt; objects, similar to L&lt;/"check"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In addition to the [[/"ATTRIBUTES"]] and [[/"METHODS"]] above, you can also call
validation checks provided by [[/"validator"]] on
[[Mojolicious::Validator::Validation]] objects, similar to [[/"check"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In conformance with L&lt;Mojolicious::Guides::Contributing&gt;, we will always
deprecate a feature for 3 months, before removing or changing it in
incompatible ways between major releases.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In conformance with [[Mojolicious::Guides::Contributing]], we will always
deprecate a feature for 3 months, before removing or changing it in
incompatible ways between major releases.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In controllers you can also use the method L&lt;Mojolicious::Controller/"helpers"&gt;
to fully qualify helper calls and ensure that they don't conflict with existing
methods you may already have.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In controllers you can also use the method [[Mojolicious::Controller/"helpers"]]
to fully qualify helper calls and ensure that they don't conflict with existing
methods you may already have.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In such
cases you can use the hook L&lt;Mojolicious/"before_dispatch"&gt; to rewrite incoming
requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In such
cases you can use the hook [[Mojolicious/"before_dispatch"]] to rewrite incoming
requests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the C&lt;send_ok&gt; assertion we take advantage of
L&lt;Mojo::UserAgent&gt;'s JSON content generator (see L&lt;Mojo::UserAgent::Transactor&gt;)
to marshal hash and array references into JSON documents, and then send them as
a WebSocket message.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In the C&lt;send_ok&gt; assertion we take advantage of
[[Mojo::UserAgent]]'s JSON content generator (see [[Mojo::UserAgent::Transactor]])
to marshal hash and array references into JSON documents, and then send them as
a WebSocket message.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the example below, the call to L&lt;/"begin"&gt; creates
a code reference that we can pass to L&lt;Mojo::IOLoop/"timer"&gt; as a callback, and
that leads to the next closure in the series when executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In the example below, the call to [[/"begin"]] creates
a code reference that we can pass to [[Mojo::IOLoop/"timer"]] as a callback, and
that leads to the next closure in the series when executed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the rest of this document we'll explore these concepts and others related to
L&lt;Test::Mojo&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In the rest of this document we'll explore these concepts and others related to
[[Test::Mojo]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section we've covered how to add custom test assertions to L&lt;Test::Mojo&gt;
with roles and how to use those roles to simplify testing.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>In this section we've covered how to add custom test assertions to [[Test::Mojo]]
with roles and how to use those roles to simplify testing.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Inheritance takes the layout concept above one step further, the helpers
L&lt;Mojolicious::Plugin::DefaultHelpers/"content"&gt; and
L&lt;Mojolicious::Plugin::DefaultHelpers/"extends"&gt; allow you to build skeleton
templates with named blocks that child templates can override.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Inheritance takes the layout concept above one step further, the helpers
[[Mojolicious::Plugin::DefaultHelpers/"content"]] and
[[Mojolicious::Plugin::DefaultHelpers/"extends"]] allow you to build skeleton
templates with named blocks that child templates can override.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Inspect L&lt;/"message"&gt;, L&lt;/"frames"&gt; and optional additional sources to fill
L&lt;/"lines_before"&gt;, L&lt;/"line"&gt; and L&lt;/"lines_after"&gt; with context information.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Inspect [[/"message"]], [[/"frames"]] and optional additional sources to fill
[[/"lines_before"]], [[/"line"]] and [[/"lines_after"]] with context information.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of providing a C&lt;Content-Length&gt; header you can also call
L&lt;Mojolicious::Controller/"finish"&gt; and close the connection manually once you
are done.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Instead of providing a C&lt;Content-Length&gt; header you can also call
[[Mojolicious::Controller/"finish"]] and close the connection manually once you
are done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of the C&lt;layout&gt; helper you could also just use the C&lt;layout&gt; stash
value, or call L&lt;Mojolicious::Controller/"render"&gt; with the C&lt;layout&gt; argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Instead of the C&lt;layout&gt; helper you could also just use the C&lt;layout&gt; stash
value, or call [[Mojolicious::Controller/"render"]] with the C&lt;layout&gt; argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of the L&lt;/"plugin"&gt; function you just use the method
L&lt;Mojolicious/"plugin"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Instead of the [[/"plugin"]] function you just use the method
[[Mojolicious/"plugin"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Internally, the L&lt;Mojo::IOLoop&gt; event loop can use multiple reactor backends,
L&lt;EV&gt; for example, will be automatically used if possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Internally, the [[Mojo::IOLoop]] event loop can use multiple reactor backends,
[[EV]] for example, will be automatically used if possible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It can also help your exposure within the community and will make it easier to
attract L&lt;Mojolicious&gt; developers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>It can also help your exposure within the community and will make it easier to
attract [[Mojolicious]] developers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It defaults to C&lt;20&gt; seconds for the user
agent and C&lt;15&gt; seconds for all built-in web servers, and can be changed with
the attributes L&lt;Mojo::UserAgent/"inactivity_timeout"&gt; and
L&lt;Mojo::Server::Daemon/"inactivity_timeout"&gt; or the C&lt;MOJO_INACTIVITY_TIMEOUT&gt;
environment variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>It defaults to C&lt;20&gt; seconds for the user
agent and C&lt;15&gt; seconds for all built-in web servers, and can be changed with
the attributes [[Mojo::UserAgent/"inactivity_timeout"]] and
[[Mojo::Server::Daemon/"inactivity_timeout"]] or the C&lt;MOJO_INACTIVITY_TIMEOUT&gt;
environment variable.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It defaults to using L&lt;Mojolicious/"moniker"&gt;, which is not very
secure, so we added this log message as a reminder.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>It defaults to using [[Mojolicious/"moniker"]], which is not very
secure, so we added this log message as a reminder.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It is also the default controller class unless you set
L&lt;Mojolicious/"controller_class"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>It is also the default controller class unless you set
[[Mojolicious/"controller_class"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It is available to every application through the command
L&lt;Mojolicious::Command::daemon&gt;, which has many configuration options and is
known to work on every platform Perl works on with its single-process
architecture.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>It is available to every application through the command
[[Mojolicious::Command::daemon]], which has many configuration options and is
known to work on every platform Perl works on with its single-process
architecture.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It is based on
L&lt;Mojo::Template&gt; and allows the embedding of Perl code right into actual
content using a small set of special tags and line start characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>It is based on
[[Mojo::Template]] and allows the embedding of Perl code right into actual
content using a small set of special tags and line start characters.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It is based on the L&lt;Mojo::Server::Prefork&gt; web server, which adds pre-forking
to L&lt;Mojo::Server::Daemon&gt;, but optimized specifically for production
environments out of the box.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>It is based on the [[Mojo::Server::Prefork]] web server, which adds pre-forking
to [[Mojo::Server::Daemon]], but optimized specifically for production
environments out of the box.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It is basically a restarter that forks a new L&lt;Mojo::Server::Daemon&gt; web server
whenever a file in your project changes, and should therefore only be used
during development.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>It is basically a restarter that forks a new [[Mojo::Server::Daemon]] web server
whenever a file in your project changes, and should therefore only be used
during development.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It is highly encouraged
that readers continue on to the remaining guides after reading this one.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T122758Z" creationid="mokoo" creationdate="20190309T060701Z">
        <seg>これを読み終わった後は、残りのガイドを読むことををおすすめします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>JSON is the most commonly used data-interchange format for web services.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123653Z" creationid="mokoo" creationdate="20190309T064250Z">
        <seg>JSONは、ウェブサービスでもっともよく使われるデータ交換フォーマットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Just a few small details change, instead of L&lt;lib&gt; we now use L&lt;FindBin&gt; and
C&lt;@INC&gt;, allowing us to start the application from outside its home directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Just a few small details change, instead of [[lib]] we now use [[FindBin]] and
C&lt;@INC&gt;, allowing us to start the application from outside its home directory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Just be
aware that all session data gets serialized with L&lt;Mojo::JSON&gt; and stored
client-side, with a cryptographic signature to prevent tampering.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T115252Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>すべてのセッションデータは[[Mojo::JSON]]でシリアライズされ、
クライアントサイドに保存されることを意識しておいてください。改ざんを防ぐために、暗号化された署名がついています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Just make sure not to use C&lt;^&gt; and C&lt;$&gt;, or capturing
groups C&lt;(...)&gt;, non-capturing groups C&lt;(?:...)&gt; are fine though.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T131010Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>C&lt;^&gt;とC&lt;$&gt;を使ったり、C&lt;(...)&gt;でグループのキャプチャは行わないでください。けれどもキャプチャしないC&lt;(?:...)&gt;は大丈夫です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Just receive
messages by subscribing to events such as
L&lt;Mojo::Transaction::WebSocket/"json"&gt; with L&lt;Mojolicious::Controller/"on"&gt; and
return them with L&lt;Mojolicious::Controller/"send"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025838Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>[[Mojo::Transaction::WebSocket]]のC&lt;json&gt;と同じイベントを、[[Mojolicious::Controller]]のC&lt;on&gt;を使って購読することによってメッセージを受信できます。メッセージを送信するには [[Mojolicious::Controller]]のC&lt;send&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Just remember that all session data gets serialized with L&lt;Mojo::JSON&gt; and
stored in HMAC-SHA1 signed cookies, which usually have a C&lt;4096&gt; byte (4KiB)
limit, depending on browser.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Just remember that all session data gets serialized with [[Mojo::JSON]] and
stored in HMAC-SHA1 signed cookies, which usually have a C&lt;4096&gt; byte (4KiB)
limit, depending on browser.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Just run
your tests with L&lt;prove&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Just run
your tests with [[prove]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Just run your tests with L&lt;prove&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190309T125940Z">
        <seg>テストは[[prove]]で実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Just use the helper
L&lt;Mojolicious::Plugin::DefaultHelpers/"include"&gt; to include one template into
another.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Just use the helper
[[Mojolicious::Plugin::DefaultHelpers/"include"]] to include one template into
another.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;&lt;%= $class %&gt;&gt; inherits all methods from
L&lt;Mojolicious::Plugin&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[&lt;%= $class %]]]] inherits all methods from
[[Mojolicious::Plugin]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;&lt;%= $class %&gt;&gt; is a L&lt;Mojolicious&gt; plugin.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[&lt;%= $class %&gt;]] is a [[Mojolicious]] plugin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Hypnotoad|Mojo::Server::Hypnotoad&gt; makes zero downtime software upgrades (hot
deployment) very simple, as you can see above, but on modern operating systems
that support the C&lt;SO_REUSEPORT&gt; socket option, there is also another method
available that works with all built-in web servers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Hypnotoad|Mojo::Server::Hypnotoad]] makes zero downtime software upgrades (hot
deployment) very simple, as you can see above, but on modern operating systems
that support the C&lt;SO_REUSEPORT&gt; socket option, there is also another method
available that works with all built-in web servers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Asset::File&gt; inherits all attributes from L&lt;Mojo::Asset&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>[[Mojo::Asset::File]] inherits all attributes from [[Mojo::Asset]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Asset::File&gt; inherits all events from L&lt;Mojo::Asset&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>[[Mojo::Asset::File]] inherits all events from [[Mojo::Asset]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Asset::File&gt; inherits all methods from L&lt;Mojo::Asset&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>[[Mojo::Asset::File]] inherits all methods from [[Mojo::Asset]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Asset::File&gt; is a file storage backend for HTTP content.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012451Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>[[Mojo::Asset::File]] is a file storage backend for HTTP content.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Asset::Memory&gt; inherits all attributes from L&lt;Mojo::Asset&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Asset::Memory]] inherits all attributes from [[Mojo::Asset]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Asset::Memory&gt; inherits all events from L&lt;Mojo::Asset&gt; and can emit the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Asset::Memory]] inherits all events from [[Mojo::Asset]] and can emit the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Asset::Memory&gt; inherits all methods from L&lt;Mojo::Asset&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Asset::Memory]] inherits all methods from [[Mojo::Asset]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Asset::Memory&gt; is an in-memory storage backend for HTTP content.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Asset::Memory]] is an in-memory storage backend for HTTP content.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Asset&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Asset]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Asset&gt; inherits all events from L&lt;Mojo::EventEmitter&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Asset]] inherits all events from [[Mojo::EventEmitter]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Asset&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Asset]] inherits all methods from [[Mojo::EventEmitter]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Asset&gt; is an abstract base class for HTTP content storage backends,
like L&lt;Mojo::Asset::File&gt; and L&lt;Mojo::Asset::Memory&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>[[Mojo::Asset]] is an abstract base class for HTTP content storage backends,
like [[Mojo::Asset::File]] and [[Mojo::Asset::Memory]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Base&gt; implements the following functions, which can be imported with
the C&lt;-base&gt; flag or by setting a base class.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Base]] implements the following functions, which can be imported with
the C&lt;-base&gt; flag or by setting a base class.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Base&gt; implements the following methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Base]] implements the following methods.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Base&gt; is a simple base class for L&lt;Mojo&gt; projects with fluent
interfaces.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Base]] is a simple base class for [[Mojo]] projects with fluent
interfaces.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Base&gt; will help you with this by having all attribute accessors created
with L&lt;/"has"&gt; (or L&lt;/"attr"&gt;) return their invocant (C&lt;$self&gt;) whenever they
are used to assign a new attribute value.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Base]] will help you with this by having all attribute accessors created
with [[/"has"]] (or [[/"attr"]]) return their invocant (C&lt;$self&gt;) whenever they
are used to assign a new attribute value.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::ByteStream&gt; implements the following functions, which can be imported
individually.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::ByteStream]] implements the following functions, which can be imported
individually.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::ByteStream&gt; implements the following methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::ByteStream]] implements the following methods.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::ByteStream&gt; is a scalar-based container for bytestreams that provides a
more friendly API for many of the functions in L&lt;Mojo::Util&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::ByteStream]] is a scalar-based container for bytestreams that provides a
more friendly API for many of the functions in [[Mojo::Util]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::ByteStream&gt; objects are always excluded from automatic escaping.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::ByteStream]] objects are always excluded from automatic escaping.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::ByteStream&gt; overloads the following operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::ByteStream]] overloads the following operators.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Cache&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Cache]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Cache&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Cache]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Cache&gt; is a naive in-memory cache with size limits.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Cache]] is a naive in-memory cache with size limits.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Collection&gt; implements the following functions, which can be imported
individually.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Collection]] implements the following functions, which can be imported
individually.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Collection&gt; implements the following methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Collection]] implements the following methods.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Collection&gt; is an array-based container for collections.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Collection]] is an array-based container for collections.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Content::MultiPart&gt; inherits all attributes from L&lt;Mojo::Content&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Content::MultiPart]] inherits all attributes from [[Mojo::Content]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Content::MultiPart&gt; inherits all methods from L&lt;Mojo::Content&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Content::MultiPart]] inherits all methods from [[Mojo::Content]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Content::MultiPart&gt; is a container for HTTP multipart content, based on
L&lt;RFC 7230|http://tools.ietf.org/html/rfc7230&gt;,
L&lt;RFC 7231|http://tools.ietf.org/html/rfc7231&gt; and
L&lt;RFC 2388|http://tools.ietf.org/html/rfc2388&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Content::MultiPart]] is a container for HTTP multipart content, based on
[[RFC 7230|http://tools.ietf.org/html/rfc7230]],
[[RFC 7231|http://tools.ietf.org/html/rfc7231]] and
[[RFC 2388|http://tools.ietf.org/html/rfc2388]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Content::Multipart&gt; inherits all events from L&lt;Mojo::Content&gt; and can
emit the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Content::Multipart]] inherits all events from [[Mojo::Content]] and can
emit the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Content::Single&gt; inherits all attributes from L&lt;Mojo::Content&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Content::Single]] inherits all attributes from [[Mojo::Content]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Content::Single&gt; inherits all events from L&lt;Mojo::Content&gt; and can emit
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Content::Single]] inherits all events from [[Mojo::Content]] and can emit
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Content::Single&gt; inherits all methods from L&lt;Mojo::Content&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Content::Single]] inherits all methods from [[Mojo::Content]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Content::Single&gt; is a container for HTTP content, based on
L&lt;RFC 7230|http://tools.ietf.org/html/rfc7230&gt; and
L&lt;RFC 7231|http://tools.ietf.org/html/rfc7231&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Content::Single]] is a container for HTTP content, based on
[[RFC 7230|http://tools.ietf.org/html/rfc7230]] and
[[RFC 7231|http://tools.ietf.org/html/rfc7231]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Content&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Content]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Content&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and can emit
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Content]] inherits all events from [[Mojo::EventEmitter]] and can emit
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Content&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Content]] inherits all methods from [[Mojo::EventEmitter]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Content&gt; is an abstract base class for HTTP content containers, based on
L&lt;RFC 7230|http://tools.ietf.org/html/rfc7230&gt; and
L&lt;RFC 7231|http://tools.ietf.org/html/rfc7231&gt;, like
L&lt;Mojo::Content::MultiPart&gt; and L&lt;Mojo::Content::Single&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Content]] is an abstract base class for HTTP content containers, based on
[[RFC 7230|http://tools.ietf.org/html/rfc7230]] and
[[RFC 7231|http://tools.ietf.org/html/rfc7231]], like
[[Mojo::Content::MultiPart]] and [[Mojo::Content::Single]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Cookie::Request&gt; inherits all attributes from L&lt;Mojo::Cookie&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Cookie::Request]] inherits all attributes from [[Mojo::Cookie]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Cookie::Request&gt; inherits all methods from L&lt;Mojo::Cookie&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Cookie::Request]] inherits all methods from [[Mojo::Cookie]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Cookie::Request&gt; is a container for HTTP request cookies, based on
L&lt;RFC 6265|http://tools.ietf.org/html/rfc6265&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Cookie::Request]] is a container for HTTP request cookies, based on
[[RFC 6265|http://tools.ietf.org/html/rfc6265]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Cookie::Response&gt; inherits all attributes from L&lt;Mojo::Cookie&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Cookie::Response]] inherits all attributes from [[Mojo::Cookie]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Cookie::Response&gt; inherits all methods from L&lt;Mojo::Cookie&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Cookie::Response]] inherits all methods from [[Mojo::Cookie]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Cookie::Response&gt; is a container for HTTP response cookies, based on
L&lt;RFC 6265|http://tools.ietf.org/html/rfc6265&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Cookie::Response]] is a container for HTTP response cookies, based on
[[RFC 6265|http://tools.ietf.org/html/rfc6265]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Cookie&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Cookie]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Cookie&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Cookie]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Cookie&gt; is an abstract base class for HTTP cookie containers, based on
L&lt;RFC 6265|http://tools.ietf.org/html/rfc6265&gt;, like L&lt;Mojo::Cookie::Request&gt;
and L&lt;Mojo::Cookie::Response&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Cookie]] is an abstract base class for HTTP cookie containers, based on
[[RFC 6265|http://tools.ietf.org/html/rfc6265]], like [[Mojo::Cookie::Request]]
and [[Mojo::Cookie::Response]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Cookie&gt; overloads the following operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Cookie]] overloads the following operators.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::DOM::CSS&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::DOM::CSS]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::DOM::CSS&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::DOM::CSS]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::DOM::CSS&gt; is the CSS selector engine used by L&lt;Mojo::DOM&gt;, based on the
L&lt;HTML Living Standard|https://html.spec.whatwg.org&gt; and
L&lt;Selectors Level 3|http://www.w3.org/TR/css3-selectors/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::DOM::CSS]] is the CSS selector engine used by [[Mojo::DOM]], based on the
[[HTML Living Standard|https://html.spec.whatwg.org]] and
[[Selectors Level 3|http://www.w3.org/TR/css3-selectors/]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::DOM::HTML&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::DOM::HTML]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::DOM::HTML&gt; implements the following functions, which can be imported
individually.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::DOM::HTML]] implements the following functions, which can be imported
individually.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::DOM::HTML&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::DOM::HTML]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::DOM::HTML&gt; is the HTML/XML engine used by L&lt;Mojo::DOM&gt;, based on the
L&lt;HTML Living Standard|https://html.spec.whatwg.org&gt; and the
L&lt;Extensible Markup Language (XML) 1.0|http://www.w3.org/TR/xml/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::DOM::HTML]] is the HTML/XML engine used by [[Mojo::DOM]], based on the
[[HTML Living Standard|https://html.spec.whatwg.org]] and the
[[Extensible Markup Language (XML) 1.0|http://www.w3.org/TR/xml/]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::DOM&gt; defaults to HTML semantics, that means all tags and attribute
names are lowercased and selectors need to be lowercase as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::DOM]] defaults to HTML semantics, that means all tags and attribute
names are lowercased and selectors need to be lowercase as well.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::DOM&gt; implements the following methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::DOM]] implements the following methods.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::DOM&gt; is a minimalistic and relaxed HTML/XML DOM parser with CSS
selector support.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::DOM]] is a minimalistic and relaxed HTML/XML DOM parser with CSS
selector support.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::DOM&gt; overloads the following operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::DOM]] overloads the following operators.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Date&gt; implements HTTP date and time functions, based on
L&lt;RFC 7230|http://tools.ietf.org/html/rfc7230&gt;,
L&lt;RFC 7231|http://tools.ietf.org/html/rfc7231&gt; and
L&lt;RFC 3339|http://tools.ietf.org/html/rfc3339&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Date]] implements HTTP date and time functions, based on
[[RFC 7230|http://tools.ietf.org/html/rfc7230]],
[[RFC 7231|http://tools.ietf.org/html/rfc7231]] and
[[RFC 3339|http://tools.ietf.org/html/rfc3339]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Date&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Date]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Date&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Date]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Date&gt; overloads the following operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Date]] overloads the following operators.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::DynamicMethods&gt; implements the following functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::DynamicMethods]] implements the following functions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::DynamicMethods&gt; provides dynamic method dispatch for per-object helper
methods without requiring use of C&lt;AUTOLOAD&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::DynamicMethods]] provides dynamic method dispatch for per-object helper
methods without requiring use of C&lt;AUTOLOAD&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::EventEmitter&gt; can emit the following events.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::EventEmitter]] can emit the following events.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::EventEmitter&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::EventEmitter]] inherits all methods from [[Mojo::Base]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::EventEmitter&gt; is a simple base class for event emitting objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::EventEmitter]] is a simple base class for event emitting objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Exception&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Exception]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Exception&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Exception]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Exception&gt; is a container for exceptions with context information.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Exception]] is a container for exceptions with context information.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Exception&gt; overloads the following operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Exception]] overloads the following operators.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::File&gt; implements the following functions, which can be imported
individually.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::File]] implements the following functions, which can be imported
individually.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::File&gt; implements the following methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::File]] implements the following methods.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::File&gt; is a scalar-based container for file system paths that provides a
friendly API for dealing with different operating systems.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::File]] is a scalar-based container for file system paths that provides a
friendly API for dealing with different operating systems.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::File&gt; overloads the following operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::File]] overloads the following operators.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Headers&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Headers]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Headers&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Headers]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Headers&gt; is a container for HTTP headers, based on
L&lt;RFC 7230|http://tools.ietf.org/html/rfc7230&gt; and
L&lt;RFC 7231|http://tools.ietf.org/html/rfc7231&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Headers]] is a container for HTTP headers, based on
[[RFC 7230|http://tools.ietf.org/html/rfc7230]] and
[[RFC 7231|http://tools.ietf.org/html/rfc7231]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::HelloWorld&gt; inherits all attributes from L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::HelloWorld]] inherits all attributes from [[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::HelloWorld&gt; inherits all methods from L&lt;Mojolicious&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::HelloWorld]] inherits all methods from [[Mojolicious]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::HelloWorld&gt; is the default L&lt;Mojolicious&gt; application, used mostly for
testing.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::HelloWorld]] is the default [[Mojolicious]] application, used mostly for
testing.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Home&gt; inherits all methods from L&lt;Mojo::File&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Home]] inherits all methods from [[Mojo::File]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Home&gt; inherits all overloaded operators from L&lt;Mojo::File&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Home]] inherits all overloaded operators from [[Mojo::File]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Home&gt; is a container for home directories based on L&lt;Mojo::File&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Home]] is a container for home directories based on [[Mojo::File]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Client&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Client]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Client&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and can
emit the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Client]] inherits all events from [[Mojo::EventEmitter]] and can
emit the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Client&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Client]] inherits all methods from [[Mojo::EventEmitter]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Client&gt; opens TCP/IP and UNIX domain socket connections for
L&lt;Mojo::IOLoop&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Client]] opens TCP/IP and UNIX domain socket connections for
[[Mojo::IOLoop]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Delay&gt; adds flow-control helpers to L&lt;Mojo::Promise&gt;, which can
help you avoid deep nested closures that often result from continuation-passing
style.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Delay]] adds flow-control helpers to [[Mojo::Promise]], which can
help you avoid deep nested closures that often result from continuation-passing
style.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Delay&gt; inherits all attributes from L&lt;Mojo::Promise&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Delay]] inherits all attributes from [[Mojo::Promise]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Delay&gt; inherits all methods from L&lt;Mojo::Promise&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Delay]] inherits all methods from [[Mojo::Promise]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Server&gt; accepts TCP/IP and UNIX domain socket connections for
L&lt;Mojo::IOLoop&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Server]] accepts TCP/IP and UNIX domain socket connections for
[[Mojo::IOLoop]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Server&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Server]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Server&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and can
emit the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Server]] inherits all events from [[Mojo::EventEmitter]] and can
emit the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Server&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Server]] inherits all methods from [[Mojo::EventEmitter]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Stream&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Stream]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Stream&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and can
emit the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Stream]] inherits all events from [[Mojo::EventEmitter]] and can
emit the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Stream&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Stream]] inherits all methods from [[Mojo::EventEmitter]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Stream&gt; is a container for I/O streams used by L&lt;Mojo::IOLoop&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Stream]] is a container for I/O streams used by [[Mojo::IOLoop]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Subprocess&gt; allows L&lt;Mojo::IOLoop&gt; to perform computationally
expensive operations in subprocesses, without blocking the event loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Subprocess]] allows [[Mojo::IOLoop]] to perform computationally
expensive operations in subprocesses, without blocking the event loop.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Subprocess&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Subprocess]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Subprocess&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and
can emit the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Subprocess]] inherits all events from [[Mojo::EventEmitter]] and
can emit the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::Subprocess&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::Subprocess]] inherits all methods from [[Mojo::EventEmitter]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::TLS&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::TLS]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::TLS&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and can
emit the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::TLS]] inherits all events from [[Mojo::EventEmitter]] and can
emit the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::TLS&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::TLS]] inherits all methods from [[Mojo::EventEmitter]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop::TLS&gt; negotiates TLS for L&lt;Mojo::IOLoop&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop::TLS]] negotiates TLS for [[Mojo::IOLoop]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and can emit the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop]] inherits all events from [[Mojo::EventEmitter]] and can emit the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop]] inherits all methods from [[Mojo::EventEmitter]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::IOLoop&gt; is a very minimalistic event loop based on L&lt;Mojo::Reactor&gt;, it
has been reduced to the absolute minimal feature set required to build solid
and scalable non-blocking clients and servers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::IOLoop]] is a very minimalistic event loop based on [[Mojo::Reactor]], it
has been reduced to the absolute minimal feature set required to build solid
and scalable non-blocking clients and servers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::JSON::Pointer&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::JSON::Pointer]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::JSON::Pointer&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::JSON::Pointer]] inherits all methods from [[Mojo::Base]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::JSON::Pointer&gt; is an implementation of
L&lt;RFC 6901|http://tools.ietf.org/html/rfc6901&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::JSON::Pointer]] is an implementation of
[[RFC 6901|http://tools.ietf.org/html/rfc6901]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::JSON&gt; implements the following functions, which can be imported
individually.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::JSON]] implements the following functions, which can be imported
individually.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::JSON&gt; is a minimalistic and possibly the fastest pure-Perl
implementation of L&lt;RFC 8259|http://tools.ietf.org/html/rfc8259&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::JSON]] is a minimalistic and possibly the fastest pure-Perl
implementation of [[RFC 8259|http://tools.ietf.org/html/rfc8259]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Loader&gt; implements the following functions, which can be imported
individually.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Loader]] implements the following functions, which can be imported
individually.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Loader&gt; is a class loader and plugin framework.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Loader]] is a class loader and plugin framework.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Log&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Log]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Log&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and can emit the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Log]] inherits all events from [[Mojo::EventEmitter]] and can emit the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Log&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Log]] inherits all methods from [[Mojo::EventEmitter]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Log&gt; is a simple logger for L&lt;Mojo&gt; projects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Log]] is a simple logger for [[Mojo]] projects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Message::Request&gt; inherits all attributes from L&lt;Mojo::Message&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Message::Request]] inherits all attributes from [[Mojo::Message]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Message::Request&gt; inherits all events from L&lt;Mojo::Message&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Message::Request]] inherits all events from [[Mojo::Message]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Message::Request&gt; inherits all methods from L&lt;Mojo::Message&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Message::Request]] inherits all methods from [[Mojo::Message]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Message::Request&gt; is a container for HTTP requests, based on
L&lt;RFC 7230|http://tools.ietf.org/html/rfc7230&gt;,
L&lt;RFC 7231|http://tools.ietf.org/html/rfc7231&gt;,
L&lt;RFC 7235|http://tools.ietf.org/html/rfc7235&gt; and
L&lt;RFC 2817|http://tools.ietf.org/html/rfc2817&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Message::Request]] is a container for HTTP requests, based on
[[RFC 7230|http://tools.ietf.org/html/rfc7230]],
[[RFC 7231|http://tools.ietf.org/html/rfc7231]],
[[RFC 7235|http://tools.ietf.org/html/rfc7235]] and
[[RFC 2817|http://tools.ietf.org/html/rfc2817]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Message::Response&gt; inherits all attributes from L&lt;Mojo::Message&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Message::Response]] inherits all attributes from [[Mojo::Message]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Message::Response&gt; inherits all events from L&lt;Mojo::Message&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Message::Response]] inherits all events from [[Mojo::Message]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Message::Response&gt; inherits all methods from L&lt;Mojo::Message&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Message::Response]] inherits all methods from [[Mojo::Message]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Message::Response&gt; is a container for HTTP responses, based on
L&lt;RFC 7230|http://tools.ietf.org/html/rfc7230&gt; and
L&lt;RFC 7231|http://tools.ietf.org/html/rfc7231&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Message::Response]] is a container for HTTP responses, based on
[[RFC 7230|http://tools.ietf.org/html/rfc7230]] and
[[RFC 7231|http://tools.ietf.org/html/rfc7231]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Message&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Message]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Message&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and can emit
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Message]] inherits all events from [[Mojo::EventEmitter]] and can emit
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Message&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Message]] inherits all methods from [[Mojo::EventEmitter]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Message&gt; is an abstract base class for HTTP message containers, based on
L&lt;RFC 7230|http://tools.ietf.org/html/rfc7230&gt;,
L&lt;RFC 7231|http://tools.ietf.org/html/rfc7231&gt; and
L&lt;RFC 2388|http://tools.ietf.org/html/rfc2388&gt;, like L&lt;Mojo::Message::Request&gt;
and L&lt;Mojo::Message::Response&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Message]] is an abstract base class for HTTP message containers, based on
[[RFC 7230|http://tools.ietf.org/html/rfc7230]],
[[RFC 7231|http://tools.ietf.org/html/rfc7231]] and
[[RFC 2388|http://tools.ietf.org/html/rfc2388]], like [[Mojo::Message::Request]]
and [[Mojo::Message::Response]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Parameters&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Parameters]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Parameters&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Parameters]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Parameters&gt; is a container for form parameters used by L&lt;Mojo::URL&gt;,
based on L&lt;RFC 3986|http://tools.ietf.org/html/rfc3986&gt; and the
L&lt;HTML Living Standard|https://html.spec.whatwg.org&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Parameters]] is a container for form parameters used by [[Mojo::URL]],
based on [[RFC 3986|http://tools.ietf.org/html/rfc3986]] and the
[[HTML Living Standard|https://html.spec.whatwg.org]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Parameters&gt; overloads the following operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Parameters]] overloads the following operators.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Path&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Path]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Path&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Path]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Path&gt; is a container for paths used by L&lt;Mojo::URL&gt;, based on
L&lt;RFC 3986|http://tools.ietf.org/html/rfc3986&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Path]] is a container for paths used by [[Mojo::URL]], based on
[[RFC 3986|http://tools.ietf.org/html/rfc3986]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Path&gt; overloads the following operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Path]] overloads the following operators.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Promise&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Promise]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Promise&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Promise]] inherits all methods from [[Mojo::Base]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Promise&gt; is a Perl-ish implementation of
L&lt;Promises/A+|https://promisesaplus.com&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Promise]] is a Perl-ish implementation of
[[Promises/A+|https://promisesaplus.com]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Reactor::EV&gt; inherits all events from L&lt;Mojo::Reactor::Poll&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Reactor::EV]] inherits all events from [[Mojo::Reactor::Poll]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Reactor::EV&gt; inherits all methods from L&lt;Mojo::Reactor::Poll&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Reactor::EV]] inherits all methods from [[Mojo::Reactor::Poll]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Reactor::EV&gt; is a low-level event reactor based on L&lt;EV&gt; (4.0+).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Reactor::EV]] is a low-level event reactor based on [[EV]] (4.0+).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Reactor::Poll&gt; inherits all events from L&lt;Mojo::Reactor&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Reactor::Poll]] inherits all events from [[Mojo::Reactor]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Reactor::Poll&gt; inherits all methods from L&lt;Mojo::Reactor&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Reactor::Poll]] inherits all methods from [[Mojo::Reactor]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Reactor::Poll&gt; is a low-level event reactor based on L&lt;IO::Poll&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Reactor::Poll]] is a low-level event reactor based on [[IO::Poll]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Reactor&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and can emit
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Reactor]] inherits all events from [[Mojo::EventEmitter]] and can emit
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Reactor&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Reactor]] inherits all methods from [[Mojo::EventEmitter]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Reactor&gt; is an abstract base class for low-level event reactors, like
L&lt;Mojo::Reactor::EV&gt; and L&lt;Mojo::Reactor::Poll&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Reactor]] is an abstract base class for low-level event reactors, like
[[Mojo::Reactor::EV]] and [[Mojo::Reactor::Poll]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::CGI&gt; inherits all attributes from L&lt;Mojo::Server&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::CGI]] inherits all attributes from [[Mojo::Server]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::CGI&gt; inherits all events from L&lt;Mojo::Server&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::CGI]] inherits all events from [[Mojo::Server]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::CGI&gt; inherits all methods from L&lt;Mojo::Server&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::CGI]] inherits all methods from [[Mojo::Server]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::CGI&gt; is a simple and portable implementation of
L&lt;RFC 3875|http://tools.ietf.org/html/rfc3875&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::CGI]] is a simple and portable implementation of
[[RFC 3875|http://tools.ietf.org/html/rfc3875]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Daemon&gt; inherits all attributes from L&lt;Mojo::Server&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Daemon]] inherits all attributes from [[Mojo::Server]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Daemon&gt; inherits all events from L&lt;Mojo::Server&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Daemon]] inherits all events from [[Mojo::Server]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Daemon&gt; inherits all methods from L&lt;Mojo::Server&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Daemon]] inherits all methods from [[Mojo::Server]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Daemon&gt; is a full featured, highly portable non-blocking I/O
HTTP and WebSocket server, with IPv6, TLS, SNI, Comet (long polling), keep-alive
and multiple event loop support.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Daemon]] is a full featured, highly portable non-blocking I/O
HTTP and WebSocket server, with IPv6, TLS, SNI, Comet (long polling), keep-alive
and multiple event loop support.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Daemon&gt; object this server manages.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Daemon]] object this server manages.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Hypnotoad&gt; can be configured with the following settings, see
L&lt;Mojolicious::Guides::Cookbook/"Hypnotoad"&gt; for examples.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Hypnotoad]] can be configured with the following settings, see
[[Mojolicious::Guides::Cookbook/"Hypnotoad"]] for examples.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Hypnotoad&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Hypnotoad]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Hypnotoad&gt; inherits all methods from L&lt;Mojo::Base&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Hypnotoad]] inherits all methods from [[Mojo::Base]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Hypnotoad&gt; is a full featured, UNIX optimized, pre-forking
non-blocking I/O HTTP and WebSocket server, built around the very well tested
and reliable L&lt;Mojo::Server::Prefork&gt;, with IPv6, TLS, SNI, UNIX domain socket,
Comet (long polling), keep-alive, multiple event loop and hot deployment support
that just works.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Hypnotoad]] is a full featured, UNIX optimized, pre-forking
non-blocking I/O HTTP and WebSocket server, built around the very well tested
and reliable [[Mojo::Server::Prefork]], with IPv6, TLS, SNI, UNIX domain socket,
Comet (long polling), keep-alive, multiple event loop and hot deployment support
that just works.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Hypnotoad&gt; worker processes can be controlled at runtime with
the following signals.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Hypnotoad]] worker processes can be controlled at runtime with
the following signals.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Morbo::Backend::Poll&gt; inherits all attributes from
L&lt;Mojo::Server::Morbo::Backend&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Morbo::Backend::Poll]] inherits all attributes from
[[Mojo::Server::Morbo::Backend]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Morbo::Backend::Poll&gt; inherits all methods from
L&lt;Mojo::Server::Morbo::Backend&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Morbo::Backend::Poll]] inherits all methods from
[[Mojo::Server::Morbo::Backend]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Morbo::Backend:Poll&gt; is the default backend for
L&lt;Mojo::Server::Morbo&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Morbo::Backend:Poll]] is the default backend for
[[Mojo::Server::Morbo]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Morbo::Backend&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Morbo::Backend]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Morbo::Backend&gt; inherits all methods from L&lt;Mojo::Base&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Morbo::Backend]] inherits all methods from [[Mojo::Base]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Morbo::Backend&gt; is an abstract base class for Morbo backends,
like L&lt;Mojo::Server::Morbo::Backend::Poll&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Morbo::Backend]] is an abstract base class for Morbo backends,
like [[Mojo::Server::Morbo::Backend::Poll]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Morbo&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Morbo]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Morbo&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Morbo]] inherits all methods from [[Mojo::Base]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Morbo&gt; is a full featured, self-restart capable non-blocking
I/O HTTP and WebSocket server, built around the very well tested and reliable
L&lt;Mojo::Server::Daemon&gt;, with IPv6, TLS, SNI, UNIX domain socket, Comet (long
polling), keep-alive and multiple event loop support.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Morbo]] is a full featured, self-restart capable non-blocking
I/O HTTP and WebSocket server, built around the very well tested and reliable
[[Mojo::Server::Daemon]], with IPv6, TLS, SNI, UNIX domain socket, Comet (long
polling), keep-alive and multiple event loop support.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::PSGI&gt; allows L&lt;Mojolicious&gt; applications to run on all L&lt;PSGI&gt;
compatible servers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::PSGI]] allows [[Mojolicious]] applications to run on all [[PSGI]]
compatible servers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::PSGI&gt; can be used directly to load and customize applications
in the wrapper script.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::PSGI]] can be used directly to load and customize applications
in the wrapper script.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::PSGI&gt; inherits all attributes from L&lt;Mojo::Server&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::PSGI]] inherits all attributes from [[Mojo::Server]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::PSGI&gt; inherits all events from L&lt;Mojo::Server&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::PSGI]] inherits all events from [[Mojo::Server]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::PSGI&gt; inherits all methods from L&lt;Mojo::Server&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::PSGI]] inherits all methods from [[Mojo::Server]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Prefork&gt; inherits all attributes from L&lt;Mojo::Server::Daemon&gt;
and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Prefork]] inherits all attributes from [[Mojo::Server::Daemon]]
and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Prefork&gt; inherits all events from L&lt;Mojo::Server::Daemon&gt; and
can emit the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Prefork]] inherits all events from [[Mojo::Server::Daemon]] and
can emit the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Prefork&gt; inherits all methods from L&lt;Mojo::Server::Daemon&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Prefork]] inherits all methods from [[Mojo::Server::Daemon]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Prefork&gt; is a full featured, UNIX optimized, pre-forking
non-blocking I/O HTTP and WebSocket server, built around the very well tested
and reliable L&lt;Mojo::Server::Daemon&gt;, with IPv6, TLS, SNI, UNIX domain socket,
Comet (long polling), keep-alive and multiple event loop support.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Prefork]] is a full featured, UNIX optimized, pre-forking
non-blocking I/O HTTP and WebSocket server, built around the very well tested
and reliable [[Mojo::Server::Daemon]], with IPv6, TLS, SNI, UNIX domain socket,
Comet (long polling), keep-alive and multiple event loop support.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Prefork&gt; object this server manages.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Prefork]] object this server manages.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server::Prefork&gt; worker processes can be controlled at runtime with the
following signals.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server::Prefork]] worker processes can be controlled at runtime with the
following signals.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and can emit the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server]] inherits all events from [[Mojo::EventEmitter]] and can emit the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server]] inherits all methods from [[Mojo::EventEmitter]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Server&gt; is an abstract base class for HTTP/WebSocket servers and server
interfaces, like L&lt;Mojo::Server::CGI&gt;, L&lt;Mojo::Server::Daemon&gt;,
L&lt;Mojo::Server::Hypnotoad&gt;, L&lt;Mojo::Server::Morbo&gt;, L&lt;Mojo::Server::Prefork&gt;
and L&lt;Mojo::Server::PSGI&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013057Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Server]] is an abstract base class for HTTP/WebSocket servers and server
interfaces, like [[Mojo::Server::CGI]], [[Mojo::Server::Daemon]],
[[Mojo::Server::Hypnotoad]], [[Mojo::Server::Morbo]], [[Mojo::Server::Prefork]]
and [[Mojo::Server::PSGI]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Template&gt; contains the whole list of available options.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Template]] contains the whole list of available options.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Template&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Template]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Template&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Template]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Template&gt; is a minimalistic, fast, and very Perl-ish template engine,
designed specifically for all those small tasks that come up during big
projects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Template]] is a minimalistic, fast, and very Perl-ish template engine,
designed specifically for all those small tasks that come up during big
projects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Template&gt; templates get compiled to a Perl subroutine, that means you
can access arguments simply via C&lt;@_&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Template]] templates get compiled to a Perl subroutine, that means you
can access arguments simply via C&lt;@_&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Transaction::HTTP&gt; inherits all attributes from L&lt;Mojo::Transaction&gt;
and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Transaction::HTTP]] inherits all attributes from [[Mojo::Transaction]]
and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Transaction::HTTP&gt; inherits all events from L&lt;Mojo::Transaction&gt; and
can emit the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Transaction::HTTP]] inherits all events from [[Mojo::Transaction]] and
can emit the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Transaction::HTTP&gt; inherits all methods from L&lt;Mojo::Transaction&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Transaction::HTTP]] inherits all methods from [[Mojo::Transaction]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Transaction::HTTP&gt; is a container for HTTP transactions, based on
L&lt;RFC 7230|http://tools.ietf.org/html/rfc7230&gt; and
L&lt;RFC 7231|http://tools.ietf.org/html/rfc7231&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Transaction::HTTP]] is a container for HTTP transactions, based on
[[RFC 7230|http://tools.ietf.org/html/rfc7230]] and
[[RFC 7231|http://tools.ietf.org/html/rfc7231]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Transaction::WebSocket&gt; inherits all attributes from
L&lt;Mojo::Transaction&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Transaction::WebSocket]] inherits all attributes from
[[Mojo::Transaction]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Transaction::WebSocket&gt; inherits all events from L&lt;Mojo::Transaction&gt;
and can emit the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Transaction::WebSocket]] inherits all events from [[Mojo::Transaction]]
and can emit the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Transaction::WebSocket&gt; inherits all methods from L&lt;Mojo::Transaction&gt;
and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Transaction::WebSocket]] inherits all methods from [[Mojo::Transaction]]
and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Transaction::WebSocket&gt; is a container for WebSocket transactions, based
on L&lt;RFC 6455|http://tools.ietf.org/html/rfc6455&gt; and
L&lt;RFC 7692|http://tools.ietf.org/html/rfc7692&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Transaction::WebSocket]] is a container for WebSocket transactions, based
on [[RFC 6455|http://tools.ietf.org/html/rfc6455]] and
[[RFC 7692|http://tools.ietf.org/html/rfc7692]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Transaction&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Transaction]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Transaction&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and can
emit the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Transaction]] inherits all events from [[Mojo::EventEmitter]] and can
emit the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Transaction&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Transaction]] inherits all methods from [[Mojo::EventEmitter]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Transaction&gt; is an abstract base class for transactions, like
L&lt;Mojo::Transaction::HTTP&gt; and L&lt;Mojo::Transaction::WebSocket&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Transaction]] is an abstract base class for transactions, like
[[Mojo::Transaction::HTTP]] and [[Mojo::Transaction::WebSocket]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::URL&gt; implements a subset of
L&lt;RFC 3986|http://tools.ietf.org/html/rfc3986&gt;,
L&lt;RFC 3987|http://tools.ietf.org/html/rfc3987&gt; and the
L&lt;URL Living Standard|https://url.spec.whatwg.org&gt; for Uniform Resource
Locators with support for IDNA and IRIs.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::URL]] implements a subset of
[[RFC 3986|http://tools.ietf.org/html/rfc3986]],
[[RFC 3987|http://tools.ietf.org/html/rfc3987]] and the
[[URL Living Standard|https://url.spec.whatwg.org]] for Uniform Resource
Locators with support for IDNA and IRIs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::URL&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::URL]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::URL&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::URL]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::URL&gt; objects are very easy to manipulate, just make sure that the URL
(C&lt;foo/bar?baz=yada&gt;), which represents the routing destination, is always
relative to the base URL (C&lt;http://example.com/myapp/&gt;), which represents the
deployment location of your application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::URL]] objects are very easy to manipulate, just make sure that the URL
(C&lt;foo/bar?baz=yada&gt;), which represents the routing destination, is always
relative to the base URL (C&lt;http://example.com/myapp/&gt;), which represents the
deployment location of your application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::URL&gt; overloads the following operators.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::URL]] overloads the following operators.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Upload&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Upload]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Upload&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Upload]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Upload&gt; is a container for uploaded files.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Upload]] is a container for uploaded files.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent::CookieJar&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent::CookieJar]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent::CookieJar&gt; inherits all methods from L&lt;Mojo::Base&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent::CookieJar]] inherits all methods from [[Mojo::Base]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent::CookieJar&gt; is a minimalistic and relaxed cookie jar used by
L&lt;Mojo::UserAgent&gt;, based on L&lt;RFC 6265|http://tools.ietf.org/html/rfc6265&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent::CookieJar]] is a minimalistic and relaxed cookie jar used by
[[Mojo::UserAgent]], based on [[RFC 6265|http://tools.ietf.org/html/rfc6265]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent::Proxy&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent::Proxy]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent::Proxy&gt; inherits all methods from L&lt;Mojo::Base&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent::Proxy]] inherits all methods from [[Mojo::Base]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent::Proxy&gt; manages proxy servers for L&lt;Mojo::UserAgent&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent::Proxy]] manages proxy servers for [[Mojo::UserAgent]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent::Server&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent::Server]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent::Server&gt; inherits all methods from L&lt;Mojo::Base&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent::Server]] inherits all methods from [[Mojo::Base]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent::Server&gt; is an embedded web server based on
L&lt;Mojo::Server::Daemon&gt; that processes requests for L&lt;Mojo::UserAgent&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent::Server]] is an embedded web server based on
[[Mojo::Server::Daemon]] that processes requests for [[Mojo::UserAgent]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent::Transactor&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent::Transactor]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent::Transactor&gt; inherits all methods from L&lt;Mojo::Base&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent::Transactor]] inherits all methods from [[Mojo::Base]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent::Transactor&gt; is the transaction building and manipulation
framework used by L&lt;Mojo::UserAgent&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent::Transactor]] is the transaction building and manipulation
framework used by [[Mojo::UserAgent]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent&gt; can automatically follow redirects, the event
L&lt;Mojo::UserAgent/"start"&gt; allows you direct access to each transaction right
after they have been initialized and before a connection gets associated with
them.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent]] can automatically follow redirects, the event
[[Mojo::UserAgent/"start"]] allows you direct access to each transaction right
after they have been initialized and before a connection gets associated with
them.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent&gt; has been designed from the ground up to be non-blocking, the
whole blocking API is just a simple convenience wrapper.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent]] has been designed from the ground up to be non-blocking, the
whole blocking API is just a simple convenience wrapper.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent&gt; inherits all events from L&lt;Mojo::EventEmitter&gt; and can emit
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent]] inherits all events from [[Mojo::EventEmitter]] and can emit
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent]] inherits all methods from [[Mojo::EventEmitter]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::UserAgent&gt; is a full featured non-blocking I/O HTTP and WebSocket user
agent, with IPv6, TLS, SNI, IDNA, HTTP/SOCKS5 proxy, UNIX domain socket, Comet
(long polling), Promises/A+, keep-alive, connection pooling, timeout, cookie,
multipart, gzip compression and multiple event loop support.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::UserAgent]] is a full featured non-blocking I/O HTTP and WebSocket user
agent, with IPv6, TLS, SNI, IDNA, HTTP/SOCKS5 proxy, UNIX domain socket, Comet
(long polling), Promises/A+, keep-alive, connection pooling, timeout, cookie,
multipart, gzip compression and multiple event loop support.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Util&gt; implements the following functions, which can be imported
individually.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Util]] implements the following functions, which can be imported
individually.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::Util&gt; provides portable utility functions for L&lt;Mojo&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::Util]] provides portable utility functions for [[Mojo]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::WebSocket&gt; implements the WebSocket protocol as described in
L&lt;RFC 6455|http://tools.ietf.org/html/rfc6455&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::WebSocket]] implements the WebSocket protocol as described in
[[RFC 6455|http://tools.ietf.org/html/rfc6455]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::WebSocket&gt; implements the following constants, which can be imported
individually.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::WebSocket]] implements the following constants, which can be imported
individually.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo::WebSocket&gt; implements the following functions, which can be imported
individually.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo::WebSocket]] implements the following functions, which can be imported
individually.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojo&gt; is a web development toolkit, with all the basic tools and helpers
needed to write simple web applications and higher level web frameworks, such as
L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojo]] is a web development toolkit, with all the basic tools and helpers
needed to write simple web applications and higher level web frameworks, such as
[[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::cpanify&gt; inherits all attributes from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::cpanify]] inherits all attributes from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::cpanify&gt; inherits all methods from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::cpanify]] inherits all methods from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::cpanify&gt; uploads files to CPAN.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::cpanify]] uploads files to CPAN.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate::app&gt; generates application directory
structures for fully functional L&lt;Mojolicious&gt; applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate::app]] generates application directory
structures for fully functional [[Mojolicious]] applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate::app&gt; inherits all attributes from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate::app]] inherits all attributes from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate::app&gt; inherits all methods from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate::app]] inherits all methods from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate::lite_app&gt; generate fully functional
L&lt;Mojolicious::Lite&gt; applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate::lite_app]] generate fully functional
[[Mojolicious::Lite]] applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate::lite_app&gt; inherits all attributes from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate::lite_app]] inherits all attributes from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate::lite_app&gt; inherits all methods from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate::lite_app]] inherits all methods from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate::makefile&gt; generates C&lt;Makefile.PL&gt;
files for applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate::makefile]] generates C&lt;Makefile.PL&gt;
files for applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate::makefile&gt; inherits all attributes from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate::makefile]] inherits all attributes from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate::makefile&gt; inherits all methods from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate::makefile]] inherits all methods from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate::plugin&gt; generates directory structures
for fully functional L&lt;Mojolicious&gt; plugins.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate::plugin]] generates directory structures
for fully functional [[Mojolicious]] plugins.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate::plugin&gt; inherits all attributes from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate::plugin]] inherits all attributes from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate::plugin&gt; inherits all methods from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate::plugin]] inherits all methods from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate&gt; inherits all attributes from
L&lt;Mojolicious::Commands&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate]] inherits all attributes from
[[Mojolicious::Commands]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate&gt; inherits all methods from
L&lt;Mojolicious::Commands&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate]] inherits all methods from
[[Mojolicious::Commands]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::generate&gt; lists available generators.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::generate]] lists available generators.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::inflate&gt; inherits all attributes from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::inflate]] inherits all attributes from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::inflate&gt; inherits all methods from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::inflate]] inherits all methods from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::Author::inflate&gt; turns templates and static files
embedded in the C&lt;DATA&gt; sections of your application into real files.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::Author::inflate]] turns templates and static files
embedded in the C&lt;DATA&gt; sections of your application into real files.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::cgi&gt; inherits all attributes from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::cgi]] inherits all attributes from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::cgi&gt; inherits all methods from L&lt;Mojolicious::Command&gt;
and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::cgi]] inherits all methods from [[Mojolicious::Command]]
and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::cgi&gt; starts applications with the L&lt;Mojo::Server::CGI&gt;
backend.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::cgi]] starts applications with the [[Mojo::Server::CGI]]
backend.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::daemon&gt; inherits all attributes from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::daemon]] inherits all attributes from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::daemon&gt; inherits all methods from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::daemon]] inherits all methods from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::daemon&gt; starts applications with the
L&lt;Mojo::Server::Daemon&gt; backend.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::daemon]] starts applications with the
[[Mojo::Server::Daemon]] backend.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::eval&gt; inherits all attributes from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::eval]] inherits all attributes from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::eval&gt; inherits all methods from L&lt;Mojolicious::Command&gt;
and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::eval]] inherits all methods from [[Mojolicious::Command]]
and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::eval&gt; runs code against applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::eval]] runs code against applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::get&gt; inherits all methods from L&lt;Mojolicious::Command&gt;
and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::get]] inherits all methods from [[Mojolicious::Command]]
and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::get&gt; is a command line interface for
L&lt;Mojo::UserAgent&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::get]] is a command line interface for
[[Mojo::UserAgent]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::get&gt; performs requests to remote hosts or local
applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::get]] performs requests to remote hosts or local
applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::prefork&gt; inherits all attributes from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::prefork]] inherits all attributes from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::prefork&gt; inherits all methods from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::prefork]] inherits all methods from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::prefork&gt; starts applications with the
L&lt;Mojo::Server::Prefork&gt; backend.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::prefork]] starts applications with the
[[Mojo::Server::Prefork]] backend.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::psgi&gt; inherits all attributes from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::psgi]] inherits all attributes from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::psgi&gt; inherits all methods from L&lt;Mojolicious::Command&gt;
and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::psgi]] inherits all methods from [[Mojolicious::Command]]
and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::psgi&gt; starts applications with the L&lt;Mojo::Server::PSGI&gt;
backend.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::psgi]] starts applications with the [[Mojo::Server::PSGI]]
backend.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::routes&gt; inherits all attributes from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::routes]] inherits all attributes from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::routes&gt; inherits all methods from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::routes]] inherits all methods from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::routes&gt; lists all your application routes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::routes]] lists all your application routes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::version&gt; inherits all attributes from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::version]] inherits all attributes from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::version&gt; inherits all methods from
L&lt;Mojolicious::Command&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::version]] inherits all methods from
[[Mojolicious::Command]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command::version&gt; shows version information for available core
and optional modules.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command::version]] shows version information for available core
and optional modules.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command]] inherits all methods from [[Mojo::Base]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Command&gt; is an abstract base class for L&lt;Mojolicious&gt; commands.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Command]] is an abstract base class for [[Mojolicious]] commands.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Commands&gt; inherits all attributes from L&lt;Mojolicious::Command&gt;
and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Commands]] inherits all attributes from [[Mojolicious::Command]]
and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Commands&gt; inherits all methods from L&lt;Mojolicious::Command&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Commands]] inherits all methods from [[Mojolicious::Command]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Commands&gt; is the interactive command line interface for the
L&lt;Mojolicious&gt; framework.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Commands]] is the interactive command line interface for the
[[Mojolicious]] framework.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Controller/"req"&gt; and L&lt;Mojolicious::Controller/"res"&gt; give you
full access to all HTTP features and information.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014540Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>[[Mojolicious::Controller]]のC&lt;req&gt;と[[Mojolicious::Controller]]のC&lt;res&gt; を使って、HTTPの機能と情報のすべてに完全にアクセスすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Controller&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Controller]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Controller&gt; inherits all methods from L&lt;Mojo::Base&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Controller]] inherits all methods from [[Mojo::Base]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Controller&gt; is the base class for your L&lt;Mojolicious&gt;
controllers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Controller]] is the base class for your [[Mojolicious]]
controllers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Lite&gt; implements the following functions, which are
automatically exported.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Lite]] implements the following functions, which are
automatically exported.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Lite&gt; inherits all attributes from L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Lite]] inherits all attributes from [[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Lite&gt; inherits all methods from L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Lite]] inherits all methods from [[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Lite&gt; is a tiny domain specific language built around
L&lt;Mojolicious&gt;, made up of only about a dozen Perl functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Lite]] is a tiny domain specific language built around
[[Mojolicious]], made up of only about a dozen Perl functions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::Config&gt; inherits all methods from L&lt;Mojolicious::Plugin&gt;
and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::Config]] inherits all methods from [[Mojolicious::Plugin]]
and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::Config&gt; is a Perl-ish configuration plugin.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::Config]] is a Perl-ish configuration plugin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::Config&gt; supports the following options.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::Config]] supports the following options.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::DefaultHelpers&gt; implements the following helpers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::DefaultHelpers]] implements the following helpers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::DefaultHelpers&gt; inherits all methods from
L&lt;Mojolicious::Plugin&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::DefaultHelpers]] inherits all methods from
[[Mojolicious::Plugin]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::DefaultHelpers&gt; is a collection of helpers for
L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::DefaultHelpers]] is a collection of helpers for
[[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::EPLRenderer&gt; inherits all methods from
L&lt;Mojolicious::Plugin&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::EPLRenderer]] inherits all methods from
[[Mojolicious::Plugin]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::EPLRenderer&gt; is a renderer for C&lt;epl&gt; templates, which
are pretty much just raw L&lt;Mojo::Template&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::EPLRenderer]] is a renderer for C&lt;epl&gt; templates, which
are pretty much just raw [[Mojo::Template]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::EPRenderer&gt; inherits all methods from
L&lt;Mojolicious::Plugin::EPLRenderer&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::EPRenderer]] inherits all methods from
[[Mojolicious::Plugin::EPLRenderer]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::EPRenderer&gt; is a renderer for Embedded Perl templates.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::EPRenderer]] is a renderer for Embedded Perl templates.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::EPRenderer&gt; supports the following options.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::EPRenderer]] supports the following options.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::HeaderCondition&gt; inherits all methods from
L&lt;Mojolicious::Plugin&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::HeaderCondition]] inherits all methods from
[[Mojolicious::Plugin]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::HeaderCondition&gt; is a route condition for header-based
routes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::HeaderCondition]] is a route condition for header-based
routes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::JSONConfig&gt; inherits all methods from
L&lt;Mojolicious::Plugin::Config&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::JSONConfig]] inherits all methods from
[[Mojolicious::Plugin::Config]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::JSONConfig&gt; inherits all options from
L&lt;Mojolicious::Plugin::Config&gt; and supports the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::JSONConfig]] inherits all options from
[[Mojolicious::Plugin::Config]] and supports the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::JSONConfig&gt; is a JSON configuration plugin that
preprocesses its input with L&lt;Mojo::Template&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::JSONConfig]] is a JSON configuration plugin that
preprocesses its input with [[Mojo::Template]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::Mount&gt; inherits all methods from L&lt;Mojolicious::Plugin&gt;
and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::Mount]] inherits all methods from [[Mojolicious::Plugin]]
and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::Mount&gt; is a plugin that allows you to mount whole
L&lt;Mojolicious&gt; applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::Mount]] is a plugin that allows you to mount whole
[[Mojolicious]] applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::TagHelpers&gt; implements the following helpers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::TagHelpers]] implements the following helpers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::TagHelpers&gt; inherits all methods from
L&lt;Mojolicious::Plugin&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::TagHelpers]] inherits all methods from
[[Mojolicious::Plugin]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin::TagHelpers&gt; is a collection of HTML tag helpers for
L&lt;Mojolicious&gt;, based on the
L&lt;HTML Living Standard|https://html.spec.whatwg.org&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin::TagHelpers]] is a collection of HTML tag helpers for
[[Mojolicious]], based on the
[[HTML Living Standard|https://html.spec.whatwg.org]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin]] inherits all methods from [[Mojo::Base]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugin&gt; is an abstract base class for L&lt;Mojolicious&gt; plugins.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugin]] is an abstract base class for [[Mojolicious]] plugins.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugins&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugins]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugins&gt; inherits all events from L&lt;Mojo::EventEmitter&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugins]] inherits all events from [[Mojo::EventEmitter]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugins&gt; inherits all methods from L&lt;Mojo::EventEmitter&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugins]] inherits all methods from [[Mojo::EventEmitter]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Plugins&gt; is the plugin manager of L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Plugins]] is the plugin manager of [[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Renderer&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Renderer]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Renderer&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Renderer]] inherits all methods from [[Mojo::Base]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Renderer&gt; is the standard L&lt;Mojolicious&gt; renderer.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Renderer]] is the standard [[Mojolicious]] renderer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Routes::Match&gt; finds routes in L&lt;Mojolicious::Routes&gt;
structures.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Routes::Match]] finds routes in [[Mojolicious::Routes]]
structures.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Routes::Match&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Routes::Match]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Routes::Match&gt; inherits all methods from L&lt;Mojo::Base&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Routes::Match]] inherits all methods from [[Mojo::Base]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Routes::Pattern&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Routes::Pattern]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Routes::Pattern&gt; inherits all methods from L&lt;Mojo::Base&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Routes::Pattern]] inherits all methods from [[Mojo::Base]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Routes::Pattern&gt; is the core of L&lt;Mojolicious::Routes&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Routes::Pattern]] is the core of [[Mojolicious::Routes]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Routes::Route&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Routes::Route]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Routes::Route&gt; inherits all methods from L&lt;Mojo::Base&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Routes::Route]] inherits all methods from [[Mojo::Base]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Routes::Route&gt; is the route container used by
L&lt;Mojolicious::Routes&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Routes::Route]] is the route container used by
[[Mojolicious::Routes]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Routes&gt; inherits all attributes from
L&lt;Mojolicious::Routes::Route&gt; and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Routes]] inherits all attributes from
[[Mojolicious::Routes::Route]] and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Routes&gt; inherits all methods from L&lt;Mojolicious::Routes::Route&gt;
and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Routes]] inherits all methods from [[Mojolicious::Routes::Route]]
and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Routes&gt; is the core of the L&lt;Mojolicious&gt; web framework.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Routes]] is the core of the [[Mojolicious]] web framework.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Sessions&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Sessions]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Sessions&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Sessions]] inherits all methods from [[Mojo::Base]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Sessions&gt; manages sessions based on signed cookies for
L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Sessions]] manages sessions based on signed cookies for
[[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Static&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Static]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Static&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Static]] inherits all methods from [[Mojo::Base]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Static&gt; is a static file server with C&lt;Range&gt;,
C&lt;If-Modified-Since&gt; and C&lt;If-None-Match&gt; support, based on
L&lt;RFC 7232|http://tools.ietf.org/html/rfc7232&gt; and
L&lt;RFC 7233|http://tools.ietf.org/html/rfc7233&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Static]] is a static file server with C&lt;Range&gt;,
C&lt;If-Modified-Since&gt; and C&lt;If-None-Match&gt; support, based on
[[RFC 7232|http://tools.ietf.org/html/rfc7232]] and
[[RFC 7233|http://tools.ietf.org/html/rfc7233]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Types&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Types]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Types&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements
the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Types]] inherits all methods from [[Mojo::Base]] and implements
the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Types&gt; manages MIME types for L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Types]] manages MIME types for [[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Validator::Validation&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Validator::Validation]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Validator::Validation&gt; inherits all methods from L&lt;Mojo::Base&gt;
and implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Validator::Validation]] inherits all methods from [[Mojo::Base]]
and implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Validator::Validation&gt; performs L&lt;Mojolicious::Validator&gt;
validation checks.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Validator::Validation]] performs [[Mojolicious::Validator]]
validation checks.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Validator&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Validator]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Validator&gt; inherits all methods from L&lt;Mojo::Base&gt; and
implements the following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Validator]] inherits all methods from [[Mojo::Base]] and
implements the following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Validator&gt; object this validation belongs to.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Validator]] object this validation belongs to.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious::Validator&gt; validates values for L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious::Validator]] validates values for [[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; and L&lt;Mojolicious::Lite&gt; are the sum of many parts, built on top
of the L&lt;Mojo&gt; web development toolkit.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] and [[Mojolicious::Lite]] are the sum of many parts, built on top
of the [[Mojo]] web development toolkit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; applications are ridiculously simple to deploy
with L&lt;Plack&gt;, but be aware that many real-time web features, such as
WebSockets, are not available.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] applications are ridiculously simple to deploy
with [[Plack]], but be aware that many real-time web features, such as
WebSockets, are not available.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; contains a very portable non-blocking I/O HTTP and WebSocket
server with L&lt;Mojo::Server::Daemon&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] contains a very portable non-blocking I/O HTTP and WebSocket
server with [[Mojo::Server::Daemon]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; contains a very sophisticated event system based on
L&lt;Mojo::EventEmitter&gt;, with ready-to-use events on almost all layers, and which
can be combined to solve some of the hardest problems in web development.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] contains a very sophisticated event system based on
[[Mojo::EventEmitter]], with ready-to-use events on almost all layers, and which
can be combined to solve some of the hardest problems in web development.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; follows this model and fully supports these two release series.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] follows this model and fully supports these two release series.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; has been designed from the ground up for non-blocking I/O and
event loops.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] has been designed from the ground up for non-blocking I/O and
event loops.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; includes a minimalistic but very powerful template system out of
the box called Embedded Perl or C&lt;ep&gt; for short.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] includes a minimalistic but very powerful template system out of
the box called Embedded Perl or C&lt;ep&gt; for short.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; is open source and free to use.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] is open source and free to use.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; loves JSON and comes with the possibly fastest pure-Perl
implementation L&lt;Mojo::JSON&gt; built right in, which is accessible through
L&lt;Mojo::Message/"json"&gt; as well as the reserved stash value C&lt;json&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025512Z" creationid="mokoo" creationdate="20190309T064553Z">
        <seg>[[Mojolicious]]はJSONが大好きです。ピュアPerlの実装ではおそらく最速の [[Mojo::JSON]] が組み込まれており、[[Mojo::Message]]のC&lt;json&gt; または予約済みスタッシュ値のC&lt;json&gt;によってアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; uses a modern subset of Perl exclusively, and therefore all
documentation assumes that L&lt;strict&gt;, L&lt;warnings&gt;, L&lt;utf8&gt; and Perl 5.10
L&lt;features|feature&gt; are enabled, even if examples don't specifically mention it.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013057Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] uses a modern subset of Perl exclusively, and therefore all
documentation assumes that [[strict]], [[warnings]], [[utf8]] and Perl 5.10
[[features|feature]] are enabled, even if examples don't specifically mention it.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; uses many environment variables both internally and externally,
notably (but not exclusively) those starting with the prefix C&lt;MOJO_*&gt; and
C&lt;PLACK_ENV&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] uses many environment variables both internally and externally,
notably (but not exclusively) those starting with the prefix C&lt;MOJO_*&gt; and
C&lt;PLACK_ENV&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; uses secret passphrases for security features such as signed
cookies.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] uses secret passphrases for security features such as signed
cookies.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt; will emit the following hooks in the listed order.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]] will emit the following hooks in the listed order.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Mojolicious&gt;, L&lt;Mojolicious::Guides&gt;, L&lt;https://mojolicious.org&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013057Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Mojolicious]], [[Mojolicious::Guides]], [[https://mojolicious.org]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;PSGI&gt; and L&lt;Plack&gt; are inspired by Python's WSGI
and Ruby's Rack.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[PSGI]] and [[Plack]] are inspired by Python's WSGI
and Ruby's Rack.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;PSGI&gt; is an interface between Perl web frameworks and web servers, and
L&lt;Plack&gt; is a Perl module and toolkit that contains L&lt;PSGI&gt; middleware, helpers
and adapters to web servers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[PSGI]] is an interface between Perl web frameworks and web servers, and
[[Plack]] is a Perl module and toolkit that contains [[PSGI]] middleware, helpers
and adapters to web servers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Plack&gt; provides many server and protocol adapters for you to choose from,
such as C&lt;FCGI&gt;, C&lt;uWSGI&gt; and C&lt;mod_perl&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Plack]] provides many server and protocol adapters for you to choose from,
such as C&lt;FCGI&gt;, C&lt;uWSGI&gt; and C&lt;mod_perl&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Stix|https://stix.no&gt; sponsored the creation of the Mojolicious logo (designed
by Nicolai Graesdal) and transferred its copyright to Sebastian Riedel.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Stix|https://stix.no]] sponsored the creation of the Mojolicious logo (designed
by Nicolai Graesdal) and transferred its copyright to Sebastian Riedel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt; allows us to inspect and make assertions about HTTP response
headers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]] allows us to inspect and make assertions about HTTP response
headers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt; also exposes a rich set of assertions for testing the body of a
response, whether that body be HTML, plain-text, or JSON.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]] also exposes a rich set of assertions for testing the body of a
response, whether that body be HTML, plain-text, or JSON.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt; can be thought of as a module that provides all of the tools and
testing assertions needed to test web applications in a Perl-ish way.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]] can be thought of as a module that provides all of the tools and
testing assertions needed to test web applications in a Perl-ish way.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt; exposes the entire transaction object so
you can get all the data you need from a response:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]] exposes the entire transaction object so
you can get all the data you need from a response:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt; has a L&lt;Mojo::UserAgent&gt; object that allows it to make HTTP
requests and check for HTTP transport errors.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]] has a [[Mojo::UserAgent]] object that allows it to make HTTP
requests and check for HTTP transport errors.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt; has a lot of handy shortcuts built into it to make testing
L&lt;Mojolicious&gt; or L&lt;Mojolicious::Lite&gt; applications enjoyable.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]] has a lot of handy shortcuts built into it to make testing
[[Mojolicious]] or [[Mojolicious::Lite]] applications enjoyable.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt; has access to the
application object, which allows us to invoke helpers from our test file:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]] has access to the
application object, which allows us to invoke helpers from our test file:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt; implements the following attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]] implements the following attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt; inherits all methods from L&lt;Mojo::Base&gt; and implements the
following new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]] inherits all methods from [[Mojo::Base]] and implements the
following new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt; is a scriptable HTTP user agent designed specifically for
testing, with many fun state of the art features such as CSS selectors based on
L&lt;Mojo::DOM&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]] is a scriptable HTTP user agent designed specifically for
testing, with many fun state of the art features such as CSS selectors based on
[[Mojo::DOM]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt; is a test user agent based on L&lt;Mojo::UserAgent&gt;, it is usually
used together with L&lt;Test::More&gt; to test L&lt;Mojolicious&gt; applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]] is a test user agent based on [[Mojo::UserAgent]], it is usually
used together with [[Test::More]] to test [[Mojolicious]] applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt; provides assertions to test almost every aspect of the HTTP
response, including the HTTP response status code, the value of the
C&lt;Content-Type&gt; header, and other arbitrary HTTP header information.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]] provides assertions to test almost every aspect of the HTTP
response, including the HTTP response status code, the value of the
C&lt;Content-Type&gt; header, and other arbitrary HTTP header information.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt; supplies additional test assertions organized around the web
application request/response transaction (transport, response headers, response
bodies, etc.), and WebSocket communications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]] supplies additional test assertions organized around the web
application request/response transaction (transport, response headers, response
bodies, etc.), and WebSocket communications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt;'s L&lt;Mojo::UserAgent&gt; has access to a JSON parser, which allows us
to test to see if a JSON response contains a value at a location in the document
using JSON pointer syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]]'s [[Mojo::UserAgent]] has access to a JSON parser, which allows us
to test to see if a JSON response contains a value at a location in the document
using JSON pointer syntax:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;Test::Mojo&gt;'s handling of HTTP redirects eliminates the need for making many,
sometimes an unknown number, of redirections to keep testing precise and easy to
follow (ahem).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[Test::Mojo]]'s handling of HTTP redirects eliminates the need for making many,
sometimes an unknown number, of redirections to keep testing precise and easy to
follow (ahem).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>L&lt;https://github.com/mojolicious/mojo&gt;, L&lt;Mojolicious::Guides&gt;,
L&lt;https://mojolicious.org&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013057Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>[[https://github.com/mojolicious/mojo]], [[Mojolicious::Guides]],
[[https://mojolicious.org]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Layouts can also be used with L&lt;Mojolicious::Controller/"render_to_string"&gt;,
but the C&lt;layout&gt; value needs to be passed as a render argument (not a stash
value).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Layouts can also be used with [[Mojolicious::Controller/"render_to_string"]],
but the C&lt;layout&gt; value needs to be passed as a render argument (not a stash
value).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Licensed under the Apache License, Version 2.0
L&lt;http://www.apache.org/licenses/LICENSE-2.0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Licensed under the Apache License, Version 2.0
[[http://www.apache.org/licenses/LICENSE-2.0]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Licensed under the CC-SA License, Version 4.0
L&lt;http://creativecommons.org/licenses/by-sa/4.0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Licensed under the CC-SA License, Version 4.0
[[http://creativecommons.org/licenses/by-sa/4.0]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Licensed under the MIT License, L&lt;http://creativecommons.org/licenses/MIT&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Licensed under the MIT License, [[http://creativecommons.org/licenses/MIT]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Like the technical community as a whole, the L&lt;Mojolicious&gt; team and community
is made up of a mixture of professionals and volunteers from all over the world,
working on every aspect of the mission - including mentorship, teaching, and
connecting people.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Like the technical community as a whole, the [[Mojolicious]] team and community
is made up of a mixture of professionals and volunteers from all over the world,
working on every aspect of the mission - including mentorship, teaching, and
connecting people.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>List all files in the directory and return a L&lt;Mojo::Collection&gt; object
containing the results as L&lt;Mojo::File&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>List all files in the directory and return a [[Mojo::Collection]] object
containing the results as [[Mojo::File]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>List all files recursively in the directory and return a L&lt;Mojo::Collection&gt;
object containing the results as L&lt;Mojo::File&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>List all files recursively in the directory and return a [[Mojo::Collection]]
object containing the results as [[Mojo::File]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Listen backlog size, defaults to the value of
L&lt;Mojo::Server::Daemon/"backlog"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Listen backlog size, defaults to the value of
[[Mojo::Server::Daemon/"backlog"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Literal names will be translated to and from L&lt;Mojo::JSON&gt; constants or a
similar native Perl value.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Literal names will be translated to and from [[Mojo::JSON]] constants or a
similar native Perl value.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Load a class and catch exceptions, returns a false value if loading was
successful, a true value if the class was not found, or a L&lt;Mojo::Exception&gt;
object if loading failed.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Load a class and catch exceptions, returns a false value if loading was
successful, a true value if the class was not found, or a [[Mojo::Exception]]
object if loading failed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Load a plugin with L&lt;Mojolicious/"plugin"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Load a plugin with [[Mojolicious/"plugin"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Load a plugin, for a full list of example plugins included in the
L&lt;Mojolicious&gt; distribution see L&lt;Mojolicious::Plugins/"PLUGINS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Load a plugin, for a full list of example plugins included in the
[[Mojolicious]] distribution see [[Mojolicious::Plugins/"PLUGINS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Load application from script and assign it to L&lt;/"app"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Load application from script and assign it to [[/"app"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Loads configuration file and passes the content to L&lt;/"parse"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Loads configuration file and passes the content to [[/"parse"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Log file path used by L&lt;/"handle"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Log file path used by [[/"handle"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Log filehandle used by default L&lt;/"message"&gt; event, defaults to opening
L&lt;/"path"&gt; or C&lt;STDERR&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Log filehandle used by default [[/"message"]] event, defaults to opening
[[/"path"]] or C&lt;STDERR&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Low-level event reactor, defaults to the C&lt;reactor&gt; attribute value of the
global L&lt;Mojo::IOLoop&gt; singleton.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Low-level event reactor, defaults to the C&lt;reactor&gt; attribute value of the
global [[Mojo::IOLoop]] singleton.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Low-level event reactor, usually a L&lt;Mojo::Reactor::Poll&gt; or
L&lt;Mojo::Reactor::EV&gt; object with a default subscriber to the event
L&lt;Mojo::Reactor/"error"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Low-level event reactor, usually a [[Mojo::Reactor::Poll]] or
[[Mojo::Reactor::EV]] object with a default subscriber to the event
[[Mojo::Reactor/"error"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Low-level generator for routes matching all HTTP request methods, returns a
L&lt;Mojolicious::Routes::Route&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Low-level generator for routes matching all HTTP request methods, returns a
[[Mojolicious::Routes::Route]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>MIME type mappings can be extended or changed easily with
L&lt;Mojolicious/"types"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T020230Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>MIMEタイプのマッピングは、[[Mojolicious]]のC&lt;types&gt;によって拡張したり、変更したりすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many configuration settings can be tweaked right from within your application
with L&lt;Mojolicious/"config"&gt;, for a full list see
L&lt;Mojo::Server::Hypnotoad/"SETTINGS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Many configuration settings can be tweaked right from within your application
with [[Mojolicious/"config"]], for a full list see
[[Mojo::Server::Hypnotoad/"SETTINGS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many different L&lt;commands|Mojolicious::Commands/"COMMANDS"&gt; are automatically
available from the command line.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025352Z" creationid="mokoo" creationdate="20190309T062059Z">
        <seg>多くの[[commands|Mojolicious::Commands]] が自動的にコマンドラインから利用できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Match controller and options against L&lt;/"root"&gt; to find an appropriate
L&lt;/"endpoint"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Match controller and options against [[/"root"]] to find an appropriate
[[/"endpoint"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Match routes with L&lt;/"match"&gt; and dispatch with L&lt;/"continue"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Match routes with [[/"match"]] and dispatch with [[/"continue"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Match routes with L&lt;Mojolicious::Routes::Match&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Match routes with [[Mojolicious::Routes::Match]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Maximum amount of time in seconds a connection can be inactive before getting
closed, defaults to the value of L&lt;Mojo::Server::Daemon/"inactivity_timeout"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Maximum amount of time in seconds a connection can be inactive before getting
closed, defaults to the value of [[Mojo::Server::Daemon/"inactivity_timeout"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Maximum amount of time in seconds before a worker without a heartbeat will be
stopped gracefully, defaults to the value of
L&lt;Mojo::Server::Prefork/"heartbeat_timeout"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Maximum amount of time in seconds before a worker without a heartbeat will be
stopped gracefully, defaults to the value of
[[Mojo::Server::Prefork/"heartbeat_timeout"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Maximum amount of time in seconds stopping a worker gracefully may take before
being forced, defaults to the value of
L&lt;Mojo::Server::Prefork/"graceful_timeout"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Maximum amount of time in seconds stopping a worker gracefully may take before
being forced, defaults to the value of
[[Mojo::Server::Prefork/"graceful_timeout"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Maximum number of accepted connections each worker process is allowed to handle
concurrently, before stopping to accept new incoming connections, defaults to
the value of L&lt;Mojo::IOLoop/"max_connections"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Maximum number of accepted connections each worker process is allowed to handle
concurrently, before stopping to accept new incoming connections, defaults to
the value of [[Mojo::IOLoop/"max_connections"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Maximum number of accepted connections this server is allowed to handle
concurrently, before stopping to accept new incoming connections, passed along
to L&lt;Mojo::IOLoop/"max_connections"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Maximum number of accepted connections this server is allowed to handle
concurrently, before stopping to accept new incoming connections, passed along
to [[Mojo::IOLoop/"max_connections"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Maximum number of connections a worker is allowed to accept, before stopping
gracefully and then getting replaced with a newly started worker, defaults to
the value of L&lt;Mojo::Server::Prefork/"accepts"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Maximum number of connections a worker is allowed to accept, before stopping
gracefully and then getting replaced with a newly started worker, defaults to
the value of [[Mojo::Server::Prefork/"accepts"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Maximum number of connections a worker is allowed to accept, before stopping
gracefully and then getting replaced with a newly started worker, passed along
to L&lt;Mojo::IOLoop/"max_accepts"&gt;, defaults to C&lt;10000&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Maximum number of connections a worker is allowed to accept, before stopping
gracefully and then getting replaced with a newly started worker, passed along
to [[Mojo::IOLoop/"max_accepts"]], defaults to C&lt;10000&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Maximum number of logged messages to store in L&lt;/"history"&gt;, defaults to C&lt;10&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Maximum number of logged messages to store in [[/"history"]], defaults to C&lt;10&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Maximum request size in bytes, defaults to the value of
L&lt;Mojo::Message/"max_message_size"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Maximum request size in bytes, defaults to the value of
[[Mojo::Message/"max_message_size"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Maximum response size in bytes, defaults to the value of
L&lt;Mojo::Message::Response/"max_message_size"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Maximum response size in bytes, defaults to the value of
[[Mojo::Message::Response/"max_message_size"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Maximum size in bytes of data to keep in memory before automatically upgrading
to a L&lt;Mojo::Asset::File&gt; object, defaults to the value of the
C&lt;MOJO_MAX_MEMORY_SIZE&gt; environment variable or C&lt;262144&gt; (256KiB).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012451Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>Maximum size in bytes of data to keep in memory before automatically upgrading
to a [[Mojo::Asset::File]] object, defaults to the value of the
C&lt;MOJO_MAX_MEMORY_SIZE&gt; environment variable or C&lt;262144&gt; (256KiB).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Maybe you would prefer a different template system than C&lt;ep&gt;, which is provided
by L&lt;Mojolicious::Plugin::EPRenderer&gt;, and there is not already a plugin on CPAN
for your favorite one.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Maybe you would prefer a different template system than C&lt;ep&gt;, which is provided
by [[Mojolicious::Plugin::EPRenderer]], and there is not already a plugin on CPAN
for your favorite one.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Members
of the L&lt;Mojolicious&gt; community should be respectful when dealing with other
members as well as with people outside the L&lt;Mojolicious&gt; community.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Members
of the [[Mojolicious]] community should be respectful when dealing with other
members as well as with people outside the [[Mojolicious]] community.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Message content, defaults to a L&lt;Mojo::Content::Single&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Message content, defaults to a [[Mojo::Content::Single]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Message headers, usually a L&lt;Mojo::Headers&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Message headers, usually a [[Mojo::Headers]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Mode changes also affect a few other aspects of the framework, such as the
built-in C&lt;exception&gt; and C&lt;not_found&gt; pages.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T135236Z" creationid="mokoo" creationdate="20190309T125611Z">
        <seg>モードの変更は、C&lt;exception&gt;やC&lt;not_found&gt;テンプレートなどのフレームワークのその他の面に影響します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Mojo - Web development toolkit</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190210T051529Z" creationid="mokoo" creationdate="20190210T051529Z">
        <seg>Mojo  -  Web開発ツールキット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Mojolicious::Guides::Tutorial - Get started with Mojolicious</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T022654Z" creationid="mokoo" creationdate="20190309T022654Z">
        <seg>Mojolicious::Guides::Tutorial - Mojoliciousをはじめよう</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Moniker of this application, often used as default filename for configuration
files and the like, defaults to decamelizing the application class with
L&lt;Mojo::Util/"decamelize"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Moniker of this application, often used as default filename for configuration
files and the like, defaults to decamelizing the application class with
[[Mojo::Util/"decamelize"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Most commonly used features every L&lt;Mojolicious&gt; developer should know about.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Most commonly used features every [[Mojolicious]] developer should know about.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Most response content, static as well as dynamic, gets served through
L&lt;Mojo::Asset::File&gt; and L&lt;Mojo::Asset::Memory&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>Most response content, static as well as dynamic, gets served through
[[Mojo::Asset::File]] and [[Mojo::Asset::Memory]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Mount L&lt;Mojolicious&gt; application and return the generated route, which is
usually a L&lt;Mojolicious::Routes::Route&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Mount [[Mojolicious]] application and return the generated route, which is
usually a [[Mojolicious::Routes::Route]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Mount whole L&lt;Mojolicious&gt; applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Mount whole [[Mojolicious]] applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Move asset data into a specific file and disable L&lt;/"cleanup"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Move asset data into a specific file and disable [[/"cleanup"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Move file with L&lt;File::Copy&gt; and return the destination as a L&lt;Mojo::File&gt;
object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Move file with [[File::Copy]] and return the destination as a [[Mojo::File]]
object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Much of
L&lt;Mojolicious&gt; was developed using TDD.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Much of
[[Mojolicious]] was developed using TDD.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Multiple non-blocking operations, such as concurrent requests, can be easily
synchronized with promises and L&lt;Mojo::Promise/"all"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Multiple non-blocking operations, such as concurrent requests, can be easily
synchronized with promises and [[Mojo::Promise/"all"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Must be called by the subprocess and emits the
L&lt;/"progress"&gt; event in the parent process with the data.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Must be called by the subprocess and emits the
[[/"progress"]] event in the parent process with the data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Nameless routes get an automatically generated one assigned that is simply
equal to the route itself without non-word characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T124531Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>名前がないルートには、自動生成されたルート名が割り当てられます。この名前は、ルート自身の名前からノンワード文字を除いたものと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Namespaces to load plugins from, defaults to L&lt;Mojolicious::Plugin&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Namespaces to load plugins from, defaults to [[Mojolicious::Plugin]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Namespaces to search for available generator commands, defaults to
L&lt;Mojolicious::Command::Author::generate&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Namespaces to search for available generator commands, defaults to
[[Mojolicious::Command::Author::generate]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Naming your routes will allow backreferencing in many methods and helpers
throughout the whole framework, most of which internally rely on
L&lt;Mojolicious::Controller/"url_for"&gt; for this.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Naming your routes will allow backreferencing in many methods and helpers
throughout the whole framework, most of which internally rely on
[[Mojolicious::Controller/"url_for"]] for this.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>No, you can't, L&lt;Hypnotoad|Mojo::Server::Hypnotoad&gt; is a bit special in this
regard.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>No, you can't, [[Hypnotoad|Mojo::Server::Hypnotoad]] is a bit special in this
regard.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Non-persistent data storage and exchange for the current request, application
wide default values can be set with L&lt;Mojolicious/"defaults"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Non-persistent data storage and exchange for the current request, application
wide default values can be set with [[Mojolicious/"defaults"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Normalized version of L&lt;/"host"&gt; and L&lt;/"port"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Normalized version of [[/"host"]] and [[/"port"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Normalized version of L&lt;/"path"&gt; and L&lt;/"query"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Normalized version of [[/"path"]] and [[/"query"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Normalized version of L&lt;/"scheme"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Normalized version of [[/"scheme"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that
L&lt;Mojo::DOM::CSS&gt; is not stateful, therefore C&lt;:link&gt; and C&lt;:visited&gt; yield
exactly the same results.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that
[[Mojo::DOM::CSS&gt; is not stateful, therefore C&lt;:link]] and C&lt;:visited&gt; yield
exactly the same results.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that
extra files are only served if no better alternative could be found in
L&lt;/"paths"&gt; and L&lt;/"classes"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that
extra files are only served if no better alternative could be found in
[[/"paths"]] and [[/"classes"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that
this attribute is EXPERIMENTAL because even though most commonly used browsers
support the feature, there is no specification yet besides
L&lt;this draft|https://tools.ietf.org/html/draft-west-first-party-cookies-07&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that
this attribute is EXPERIMENTAL because even though most commonly used browsers
support the feature, there is no specification yet besides
[[this draft|https://tools.ietf.org/html/draft-west-first-party-cookies-07]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that L&lt;/"userinfo"&gt; will not be included for
security reasons.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that [[/"userinfo"]] will not be included for
security reasons.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that Perl versions 5.10.x and 5.12.x are known to work very poorly with
L&lt;Mojolicious&gt;, and we strongly suggest you do not use them, to avoid stability
and security issues.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that Perl versions 5.10.x and 5.12.x are known to work very poorly with
[[Mojolicious]], and we strongly suggest you do not use them, to avoid stability
and security issues.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that TLS support depends on L&lt;IO::Socket::SSL&gt;
(2.009+).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that TLS support depends on [[IO::Socket::SSL]]
(2.009+).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that for
templates to be detected, these classes need to have already been loaded and
added before L&lt;/"warmup"&gt; is called, which usually happens automatically during
application startup.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that for
templates to be detected, these classes need to have already been loaded and
added before [[/"warmup"]] is called, which usually happens automatically during
application startup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that for files to
be detected, these classes need to have already been loaded and added before
L&lt;/"warmup"&gt; is called, which usually happens automatically during application
startup.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that for files to
be detected, these classes need to have already been loaded and added before
[[/"warmup"]] is called, which usually happens automatically during application
startup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that high concurrency works
best with applications that perform mostly non-blocking operations, to optimize
for blocking operations you can decrease this value and increase L&lt;/"workers"&gt;
instead for better performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that high concurrency works
best with applications that perform mostly non-blocking operations, to optimize
for blocking operations you can decrease this value and increase [[/"workers"]]
instead for better performance.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that increasing this value can also
drastically increase memory usage, should you for example attempt to parse an
excessively large request body with the methods L&lt;Mojo::Message/"dom"&gt; or
L&lt;Mojo::Message/"json"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that increasing this value can also
drastically increase memory usage, should you for example attempt to parse an
excessively large request body with the methods [[Mojo::Message/"dom"]] or
[[Mojo::Message/"json"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that increasing this value can also
drastically increase memory usage, should you for example attempt to parse an
excessively large response body with the methods L&lt;Mojo::Message/"dom"&gt; or
L&lt;Mojo::Message/"json"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that increasing this value can also
drastically increase memory usage, should you for example attempt to parse an
excessively large response body with the methods [[Mojo::Message/"dom"]] or
[[Mojo::Message/"json"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that many
renderers such as L&lt;Mojolicious::Plugin::EPRenderer&gt; also use this value to
determine if template files should be decoded before processing.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that many
renderers such as [[Mojolicious::Plugin::EPRenderer]] also use this value to
determine if template files should be decoded before processing.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that many real-time web features are based on the
L&lt;Mojo::IOLoop&gt; event loop, and therefore require one of the built-in web
servers to be able to use them to their full potential.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that many real-time web features are based on the
[[Mojo::IOLoop]] event loop, and therefore require one of the built-in web
servers to be able to use them to their full potential.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that non-blocking name
resolution depends on L&lt;Net::DNS::Native&gt; (0.15+), SOCKS5 support on
L&lt;IO::Socket::Socks&gt; (0.64), and TLS support on L&lt;IO::Socket::SSL&gt; (2.009+).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that non-blocking name
resolution depends on [[Net::DNS::Native]] (0.15+), SOCKS5 support on
[[IO::Socket::Socks]] (0.64), and TLS support on [[IO::Socket::SSL]] (2.009+).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that role support depends on
L&lt;Role::Tiny&gt; (2.000001+).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that role support depends on
[[Role::Tiny]] (2.000001+).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that this attribute is EXPERIMENTAL because even though
most commonly used browsers support the feature, there is no specification yet
besides
L&lt;this draft|https://tools.ietf.org/html/draft-west-first-party-cookies-07&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Note that this attribute is EXPERIMENTAL because even though
most commonly used browsers support the feature, there is no specification yet
besides
[[this draft|https://tools.ietf.org/html/draft-west-first-party-cookies-07]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that you should use custom L&lt;Mojolicious/"secrets"&gt; to make signed cookies
really tamper resistant.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134406Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>署名付き(signed)クッキーを本当に改ざんできなくするには、[[Mojolicious]]のC&lt;secret&gt;をカスタムして使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Number of keep-alive requests per connection, defaults to the value of
L&lt;Mojo::Server::Daemon/"max_requests"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Number of keep-alive requests per connection, defaults to the value of
[[Mojo::Server::Daemon/"max_requests"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Number of worker processes, defaults to the value of
L&lt;Mojo::Server::Prefork/"workers"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Number of worker processes, defaults to the value of
[[Mojo::Server::Prefork/"workers"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Of course these plugins can contain more than just helpers, take a look at
L&lt;Mojolicious::Plugins/"PLUGINS"&gt; for a few ideas.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Of course these plugins can contain more than just helpers, take a look at
[[Mojolicious::Plugins/"PLUGINS"]] for a few ideas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On Perl 5.20+ you can also append a C&lt;-signatures&gt; flag to all three forms and
enable support for L&lt;subroutine signatures|perlsub/"Signatures"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>On Perl 5.20+ you can also append a C&lt;-signatures&gt; flag to all three forms and
enable support for [[subroutine signatures|perlsub/"Signatures"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On Perl 5.20+ you can also use a C&lt;-signatures&gt; flag to enable support for
L&lt;subroutine signatures|perlsub/"Signatures"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>On Perl 5.20+ you can also use a C&lt;-signatures&gt; flag to enable support for
[[subroutine signatures|perlsub/"Signatures"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On UNIX platforms you can also add pre-forking to the built-in web server and
switch to a multi-process architecture with L&lt;Mojolicious::Command::prefork&gt;, to
take advantage of multiple CPU cores and copy-on-write memory management.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>On UNIX platforms you can also add pre-forking to the built-in web server and
switch to a multi-process architecture with [[Mojolicious::Command::prefork]], to
take advantage of multiple CPU cores and copy-on-write memory management.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Once the request has been received by the web server through the event loop, it
will be passed on to L&lt;Mojolicious&gt;, where it will be handled in a few simple
steps.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Once the request has been received by the web server through the event loop, it
will be passed on to [[Mojolicious]], where it will be handled in a few simple
steps.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Once the tests have completed, the
L&lt;Mojolicious&gt; application will be torn down.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Once the tests have completed, the
[[Mojolicious]] application will be torn down.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Once you switch modes from
C&lt;development&gt; to C&lt;production&gt;, no sensitive information will be revealed on
those pages anymore.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T125743Z" creationid="mokoo" creationdate="20190309T125713Z">
        <seg>モードをC&lt;development&gt;からC&lt;production&gt;に切り替えると 、例外ページに機密情報が表示されなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One interesting thing of note: the return value of L&lt;Test::Mojo&gt; object
assertions is always the test object itself, allowing us to "chain" test
assertion methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>One interesting thing of note: the return value of [[Test::Mojo]] object
assertions is always the test object itself, allowing us to "chain" test
assertion methods.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One nice feature of
L&lt;Test::Mojo&gt; is its ability to pass configuration values directly from its
constructor.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>One nice feature of
[[Test::Mojo]] is its ability to pass configuration values directly from its
constructor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the easiest ways to contribute to L&lt;Mojolicious&gt; is through
documentation improvements.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>One of the easiest ways to contribute to [[Mojolicious]] is through
documentation improvements.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the main differences between L&lt;Mojolicious&gt; and other web frameworks is
that it also includes L&lt;Mojolicious::Lite&gt;, a micro web framework optimized for
rapid prototyping.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>One of the main differences between [[Mojolicious]] and other web frameworks is
that it also includes [[Mojolicious::Lite]], a micro web framework optimized for
rapid prototyping.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the most popular setups these days is
L&lt;Hypnotoad|Mojo::Server::Hypnotoad&gt; behind an L&lt;Nginx|http://nginx.org&gt; reverse
proxy, which even supports WebSockets in newer versions.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>One of the most popular setups these days is
[[Hypnotoad|Mojo::Server::Hypnotoad]] behind an [[Nginx|http://nginx.org]] reverse
proxy, which even supports WebSockets in newer versions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Only L&lt;Mojo::ByteStream&gt; objects are excluded from automatic escaping.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Only [[Mojo::ByteStream]] objects are excluded from automatic escaping.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Open a TCP/IP or UNIX domain socket connection with L&lt;Mojo::IOLoop::Client&gt; and
create a stream object (usually L&lt;Mojo::IOLoop::Stream&gt;), takes the same
arguments as L&lt;Mojo::IOLoop::Client/"connect"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Open a TCP/IP or UNIX domain socket connection with [[Mojo::IOLoop::Client]] and
create a stream object (usually [[Mojo::IOLoop::Stream]]), takes the same
arguments as [[Mojo::IOLoop::Client/"connect"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Open a WebSocket connection with transparent handshake, takes the same
arguments as L&lt;Mojo::UserAgent/"websocket"&gt;, except for the callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Open a WebSocket connection with transparent handshake, takes the same
arguments as [[Mojo::UserAgent/"websocket"]], except for the callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Open a non-blocking WebSocket connection with transparent handshake, takes the
same arguments as L&lt;Mojo::UserAgent::Transactor/"websocket"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Open a non-blocking WebSocket connection with transparent handshake, takes the
same arguments as [[Mojo::UserAgent::Transactor/"websocket"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Open file with L&lt;IO::File&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Open file with [[IO::File]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"content_is"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"content_is"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"content_like"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"content_like"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"content_type_is"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"content_type_is"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"content_type_like"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"content_type_like"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"element_exists"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"element_exists"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"header_is"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"header_is"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"header_like"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"header_like"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"json_has"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"json_has"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"json_like"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"json_like"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"json_message_has"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"json_message_has"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"json_message_like"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"json_message_like"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"message_is"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"message_is"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"message_like"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"message_like"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"status_is"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"status_is"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"text_is"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"text_is"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Opposite of L&lt;/"text_like"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Opposite of [[/"text_like"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or if you don't actually need zero downtime software upgrades, just use
L&lt;Mojolicious::Command::prefork&gt; instead, which is otherwise almost identical to
Hypnotoad.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Or if you don't actually need zero downtime software upgrades, just use
[[Mojolicious::Command::prefork]] instead, which is otherwise almost identical to
Hypnotoad.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or just add a C&lt;hypnotoad&gt; section to your L&lt;Mojolicious::Plugin::Config&gt; or
L&lt;Mojolicious::Plugin::JSONConfig&gt; configuration file.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Or just add a C&lt;hypnotoad&gt; section to your [[Mojolicious::Plugin::Config&gt; or
[[Mojolicious::Plugin::JSONConfig]] configuration file.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or perform quick requests right from the command line with
L&lt;Mojolicious::Command::get&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Or perform quick requests right from the command line with
[[Mojolicious::Command::get]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or you can just disable format detection with a special type of restrictive
placeholder.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T132329Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>フォーマットの検知は、特別なタイプのプレースホルダーを使うことで無効にすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Other guides delve deeper
into topics like L&lt;growing|Mojolicious::Guides::Growing&gt; a L&lt;Mojolicious::Lite&gt;
prototype into a well-structured L&lt;Mojolicious&gt; application,
L&lt;routing|Mojolicious::Guides::Routing&gt;,
L&lt;rendering|Mojolicious::Guides::Rendering&gt; and more.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T023846Z" creationid="mokoo" creationdate="20190309T023442Z">
        <seg>その他のガイドでは、各トピックについて深堀します。たとえば、[[Mojolicious::Lite]]のプロトタイプをしっかり構築した[[Mojolicious]] アプリケーションに育てるための[[growing|Mojolicious::Guides::Growing]]や[[routing|Mojolicious::Guides::Routing]]、
[[rendering|Mojolicious::Guides::Rendering]]、その他にもたくさんあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Our templates are using quite a few features of the renderer,
L&lt;Mojolicious::Guides::Rendering&gt; explains them all in great detail.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Our templates are using quite a few features of the renderer,
[[Mojolicious::Guides::Rendering]] explains them all in great detail.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Parse HTML/XML fragment with L&lt;Mojo::DOM::HTML&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Parse HTML/XML fragment with [[Mojo::DOM::HTML]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Parse content chunk and upgrade to L&lt;Mojo::Content::MultiPart&gt; object if
necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Parse content chunk and upgrade to [[Mojo::Content::MultiPart]] object if
necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Parse template into L&lt;/"tree"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Parse template into [[/"tree"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Password part of L&lt;/"userinfo"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Password part of [[/"userinfo"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Path part of this URL, relative paths will be merged with
L&lt;Mojo::Path/"merge"&gt;, defaults to a L&lt;Mojo::Path&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Path part of this URL, relative paths will be merged with
[[Mojo::Path/"merge"]], defaults to a [[Mojo::Path]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Paths for extra files to be served from locations other than L&lt;/"paths"&gt;, such
as the images used by the built-in exception and not found pages.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Paths for extra files to be served from locations other than [[/"paths"]], such
as the images used by the built-in exception and not found pages.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Pattern for this route, defaults to a L&lt;Mojolicious::Routes::Pattern&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Pattern for this route, defaults to a [[Mojolicious::Routes::Pattern]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Percent encode all unsafe characters in bytestream with
L&lt;Mojo::Util/"url_escape"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Percent encode all unsafe characters in bytestream with
[[Mojo::Util/"url_escape"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Percent encode unsafe characters in string as described in
L&lt;RFC 3986|http://tools.ietf.org/html/rfc3986&gt;, the pattern used defaults to
C&lt;^A-Za-z0-9\-._~&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Percent encode unsafe characters in string as described in
[[RFC 3986|http://tools.ietf.org/html/rfc3986]], the pattern used defaults to
C&lt;^A-Za-z0-9\-._~&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform a C&lt;DELETE&gt; request and check for transport errors, takes the same
arguments as L&lt;Mojo::UserAgent/"delete"&gt;, except for the callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform a C&lt;DELETE&gt; request and check for transport errors, takes the same
arguments as [[Mojo::UserAgent/"delete"]], except for the callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform a C&lt;GET&gt; request and check for transport errors, takes the same
arguments as L&lt;Mojo::UserAgent/"get"&gt;, except for the callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform a C&lt;GET&gt; request and check for transport errors, takes the same
arguments as [[Mojo::UserAgent/"get"]], except for the callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform a C&lt;HEAD&gt; request and check for transport errors, takes the same
arguments as L&lt;Mojo::UserAgent/"head"&gt;, except for the callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform a C&lt;HEAD&gt; request and check for transport errors, takes the same
arguments as [[Mojo::UserAgent/"head"]], except for the callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform a C&lt;OPTIONS&gt; request and check for transport errors, takes the same
arguments as L&lt;Mojo::UserAgent/"options"&gt;, except for the callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform a C&lt;OPTIONS&gt; request and check for transport errors, takes the same
arguments as [[Mojo::UserAgent/"options"]], except for the callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform a C&lt;PATCH&gt; request and check for transport errors, takes the same
arguments as L&lt;Mojo::UserAgent/"patch"&gt;, except for the callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform a C&lt;PATCH&gt; request and check for transport errors, takes the same
arguments as [[Mojo::UserAgent/"patch"]], except for the callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform a C&lt;POST&gt; request and check for transport errors, takes the same
arguments as L&lt;Mojo::UserAgent/"post"&gt;, except for the callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform a C&lt;POST&gt; request and check for transport errors, takes the same
arguments as [[Mojo::UserAgent/"post"]], except for the callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform a C&lt;PUT&gt; request and check for transport errors, takes the same
arguments as L&lt;Mojo::UserAgent/"put"&gt;, except for the callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform a C&lt;PUT&gt; request and check for transport errors, takes the same
arguments as [[Mojo::UserAgent/"put"]], except for the callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform blocking C&lt;DELETE&gt; request and return resulting
L&lt;Mojo::Transaction::HTTP&gt; object, takes the same arguments as
L&lt;Mojo::UserAgent::Transactor/"tx"&gt; (except for the C&lt;DELETE&gt; method, which is
implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform blocking C&lt;DELETE&gt; request and return resulting
[[Mojo::Transaction::HTTP]] object, takes the same arguments as
[[Mojo::UserAgent::Transactor/"tx"]] (except for the C&lt;DELETE&gt; method, which is
implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform blocking C&lt;GET&gt; request and return resulting L&lt;Mojo::Transaction::HTTP&gt;
object, takes the same arguments as L&lt;Mojo::UserAgent::Transactor/"tx"&gt; (except
for the C&lt;GET&gt; method, which is implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform blocking C&lt;GET&gt; request and return resulting [[Mojo::Transaction::HTTP&gt;
object, takes the same arguments as [[Mojo::UserAgent::Transactor/"tx"]] (except
for the C&lt;GET&gt; method, which is implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform blocking C&lt;HEAD&gt; request and return resulting
L&lt;Mojo::Transaction::HTTP&gt; object, takes the same arguments as
L&lt;Mojo::UserAgent::Transactor/"tx"&gt; (except for the C&lt;HEAD&gt; method, which is
implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform blocking C&lt;HEAD&gt; request and return resulting
[[Mojo::Transaction::HTTP]] object, takes the same arguments as
[[Mojo::UserAgent::Transactor/"tx"]] (except for the C&lt;HEAD&gt; method, which is
implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform blocking C&lt;OPTIONS&gt; request and return resulting
L&lt;Mojo::Transaction::HTTP&gt; object, takes the same arguments as
L&lt;Mojo::UserAgent::Transactor/"tx"&gt; (except for the C&lt;OPTIONS&gt; method, which is
implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform blocking C&lt;OPTIONS&gt; request and return resulting
[[Mojo::Transaction::HTTP]] object, takes the same arguments as
[[Mojo::UserAgent::Transactor/"tx"]] (except for the C&lt;OPTIONS&gt; method, which is
implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform blocking C&lt;PATCH&gt; request and return resulting
L&lt;Mojo::Transaction::HTTP&gt; object, takes the same arguments as
L&lt;Mojo::UserAgent::Transactor/"tx"&gt; (except for the C&lt;PATCH&gt; method, which is
implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform blocking C&lt;PATCH&gt; request and return resulting
[[Mojo::Transaction::HTTP]] object, takes the same arguments as
[[Mojo::UserAgent::Transactor/"tx"]] (except for the C&lt;PATCH&gt; method, which is
implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform blocking C&lt;POST&gt; request and return resulting
L&lt;Mojo::Transaction::HTTP&gt; object, takes the same arguments as
L&lt;Mojo::UserAgent::Transactor/"tx"&gt; (except for the C&lt;POST&gt; method, which is
implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform blocking C&lt;POST&gt; request and return resulting
[[Mojo::Transaction::HTTP]] object, takes the same arguments as
[[Mojo::UserAgent::Transactor/"tx"]] (except for the C&lt;POST&gt; method, which is
implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform blocking C&lt;PUT&gt; request and return resulting L&lt;Mojo::Transaction::HTTP&gt;
object, takes the same arguments as L&lt;Mojo::UserAgent::Transactor/"tx"&gt; (except
for the C&lt;PUT&gt; method, which is implied).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform blocking C&lt;PUT&gt; request and return resulting [[Mojo::Transaction::HTTP&gt;
object, takes the same arguments as [[Mojo::UserAgent::Transactor/"tx"]] (except
for the C&lt;PUT&gt; method, which is implied).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform blocking request for a custom L&lt;Mojo::Transaction::HTTP&gt; object, which
can be prepared manually or with L&lt;/"build_tx"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform blocking request for a custom [[Mojo::Transaction::HTTP]] object, which
can be prepared manually or with [[/"build_tx"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform queries blocking and non-blocking, use all
L&lt;SQL features|https://www.postgresql.org/docs/current/static/sql.html&gt;
PostgreSQL has to offer, generate CRUD queries from data structures, manage your
database schema with migrations and build scalable real-time web applications
with the publish/subscribe pattern.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform queries blocking and non-blocking, use all
[[SQL features|https://www.postgresql.org/docs/current/static/sql.html]]
PostgreSQL has to offer, generate CRUD queries from data structures, manage your
database schema with migrations and build scalable real-time web applications
with the publish/subscribe pattern.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perform validation check on all values of the current L&lt;/"topic"&gt;, no more
checks will be performed on them after the first one failed.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Perform validation check on all values of the current [[/"topic"]], no more
checks will be performed on them after the first one failed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Persistent data storage for the next few requests, all session data gets
serialized with L&lt;Mojo::JSON&gt; and stored Base64 encoded in HMAC-SHA1 signed
cookies, to prevent tampering.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Persistent data storage for the next few requests, all session data gets
serialized with [[Mojo::JSON]] and stored Base64 encoded in HMAC-SHA1 signed
cookies, to prevent tampering.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Please refer to the L&lt;Test::Mojo&gt; documentation for a complete reference to many
of the ideas and syntax introduced in this document.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Please refer to the [[Test::Mojo]] documentation for a complete reference to many
of the ideas and syntax introduced in this document.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Portably render a template with L&lt;/"render_data"&gt; to a file relative to the
current working directory if it does not exist already, and create the directory
if necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Portably render a template with [[/"render_data"]] to a file relative to the
current working directory if it does not exist already, and create the directory
if necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Powerful yet elegant testing techniques and tools for L&lt;Mojolicious&gt; and other
web applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Powerful yet elegant testing techniques and tools for [[Mojolicious]] and other
web applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Prefixing multiple routes is another good use for it.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T131641Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>複数のルーティングをあらかじめ決めるために使うのもまた良い利用方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Prepare a C&lt;302&gt; (if the status code is not already C&lt;3xx&gt;) redirect response
with C&lt;Location&gt; header, takes the same arguments as L&lt;/"url_for"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Prepare a C&lt;302&gt; (if the status code is not already C&lt;3xx&gt;) redirect response
with C&lt;Location&gt; header, takes the same arguments as [[/"url_for"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Prepare static files from L&lt;/"classes"&gt; for future use.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Prepare static files from [[/"classes"]] for future use.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Prepare templates from L&lt;/"classes"&gt; for future use.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Prepare templates from [[/"classes"]] for future use.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Previous transaction that triggered this follow-up transaction, usually a
L&lt;Mojo::Transaction::HTTP&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Previous transaction that triggered this follow-up transaction, usually a
[[Mojo::Transaction::HTTP]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Process configuration file with L&lt;Mojo::Template&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Process configuration file with [[Mojo::Template]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Process content with L&lt;/"render"&gt; and parse it with L&lt;Mojo::JSON&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Process content with [[/"render"]] and parse it with [[Mojo::JSON]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Process previously parsed template and return the result, or a
L&lt;Mojo::Exception&gt; object if rendering failed.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Process previously parsed template and return the result, or a
[[Mojo::Exception]] object if rendering failed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Promises have three states, they start out as C&lt;pending&gt; and you call
L&lt;Mojo::Promise/"resolve"&gt; to transition them to C&lt;fulfilled&gt;, or
L&lt;Mojo::Promise/"reject"&gt; to transition them to C&lt;rejected&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Promises have three states, they start out as C&lt;pending&gt; and you call
[[Mojo::Promise/"resolve"]] to transition them to C&lt;fulfilled&gt;, or
[[Mojo::Promise/"reject"]] to transition them to C&lt;rejected&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Proxy manager, defaults to a L&lt;Mojo::UserAgent::Proxy&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Proxy manager, defaults to a [[Mojo::UserAgent::Proxy]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Pull requests with additions or changes to the documentation included in the
L&lt;Mojolicious&gt; distribution follow the same rules as code contributions.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Pull requests with additions or changes to the documentation included in the
[[Mojolicious]] distribution follow the same rules as code contributions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Punycode decode bytestream with L&lt;Mojo::Util/"punycode_decode"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Punycode decode bytestream with [[Mojo::Util/"punycode_decode"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Punycode decode string as described in
L&lt;RFC 3492|http://tools.ietf.org/html/rfc3492&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Punycode decode string as described in
[[RFC 3492|http://tools.ietf.org/html/rfc3492]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Punycode encode bytestream with L&lt;Mojo::Util/"punycode_encode"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Punycode encode bytestream with [[Mojo::Util/"punycode_encode"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Punycode encode string as described in
L&lt;RFC 3492|http://tools.ietf.org/html/rfc3492&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Punycode encode string as described in
[[RFC 3492|http://tools.ietf.org/html/rfc3492]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Query part of this URL, key/value pairs in an array reference will be appended
with L&lt;Mojo::Parameters/"append"&gt;, and key/value pairs in a hash reference
merged with L&lt;Mojo::Parameters/"merge"&gt;, defaults to a L&lt;Mojo::Parameters&gt;
object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Query part of this URL, key/value pairs in an array reference will be appended
with [[Mojo::Parameters/"append"]], and key/value pairs in a hash reference
merged with [[Mojo::Parameters/"merge"]], defaults to a [[Mojo::Parameters]]
object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Quote bytestream with L&lt;Mojo::Util/"quote"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Quote bytestream with [[Mojo::Util/"quote"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Read data client-side, used to implement user agents such as L&lt;Mojo::UserAgent&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Read data client-side, used to implement user agents such as [[Mojo::UserAgent]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Read data server-side, used to implement web servers such as
L&lt;Mojo::Server::Daemon&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Read data server-side, used to implement web servers such as
[[Mojo::Server::Daemon]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Receive messages just by subscribing to
events such as L&lt;Mojo::Transaction::WebSocket/"message"&gt; with
L&lt;Mojolicious::Controller/"on"&gt; and return them with
L&lt;Mojolicious::Controller/"send"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Receive messages just by subscribing to
events such as [[Mojo::Transaction::WebSocket/"message"]] with
[[Mojolicious::Controller/"on"]] and return them with
[[Mojolicious::Controller/"send"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Receiving a streaming response can be really tricky in most HTTP clients, but
L&lt;Mojo::UserAgent&gt; makes it actually easy.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Receiving a streaming response can be really tricky in most HTTP clients, but
[[Mojo::UserAgent]] makes it actually easy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Recurring timers created with L&lt;Mojo::IOLoop/"recurring"&gt; are slightly more
powerful, but need to be stopped manually, or they would just keep getting
emitted.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Recurring timers created with [[Mojo::IOLoop/"recurring"]] are slightly more
powerful, but need to be stopped manually, or they would just keep getting
emitted.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Register conditions in L&lt;Mojolicious&gt; application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Register conditions in [[Mojolicious]] application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Register helpers in L&lt;Mojolicious&gt; application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Register helpers in [[Mojolicious]] application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Register plugin in L&lt;Mojolicious&gt; application and merge configuration.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Register plugin in [[Mojolicious]] application and merge configuration.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Register plugin in L&lt;Mojolicious&gt; application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Register plugin in [[Mojolicious]] application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Register renderer in L&lt;Mojolicious&gt; application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Register renderer in [[Mojolicious]] application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Registered placeholder types, by default only L&lt;/"num"&gt; is already defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Registered placeholder types, by default only [[/"num"]] is already defined.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Registered validation checks, by default only L&lt;/"equal_to"&gt;, L&lt;/"in"&gt;,
L&lt;/"like"&gt;, L&lt;/"num"&gt;, L&lt;/"size"&gt; and L&lt;/"upload"&gt; are already defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Registered validation checks, by default only [[/"equal_to"]], [[/"in"]],
[[/"like"]], [[/"num"]], [[/"size"]] and [[/"upload"]] are already defined.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Relative URLs in the test object method assertions (C&lt;get_ok&gt;, C&lt;post_ok&gt;, etc.)
will be sent to the Mojolicious application started by L&lt;Test::Mojo&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Relative URLs in the test object method assertions (C&lt;get_ok&gt;, C&lt;post_ok&gt;, etc.)
will be sent to the Mojolicious application started by [[Test::Mojo]]:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Relaxed placeholders allow matching of everything until a C&lt;/&gt; occurs, similar
to the regular expression C&lt;([^/]+)&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130306Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>リラックスプレースホルダーを使えば、
C&lt;/&gt;が出現するまでのすべてにマッチさせることができます。これは正規表現のC&lt;([^/]+)&gt;に似ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remove this element while preserving its content and return L&lt;/"parent"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Remove this element while preserving its content and return [[/"parent"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remove this node and return L&lt;/"root"&gt; (for C&lt;root&gt; nodes) or L&lt;/"parent"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Remove this node and return [[/"root"]] (for C&lt;root]] nodes) or L&lt;/"parent"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Render L&lt;RFC 3339|http://tools.ietf.org/html/rfc3339&gt; date and time.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Render [[RFC 3339|http://tools.ietf.org/html/rfc3339]] date and time.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Render a template from the C&lt;DATA&gt; section of the command class with
L&lt;Mojo::Loader&gt; and L&lt;Mojo::Template&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Render a template from the C&lt;DATA&gt; section of the command class with
[[Mojo::Loader]] and [[Mojo::Template]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Render a template with L&lt;/"render_data"&gt; to a file if it does not exist already,
and create the directory if necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Render a template with [[/"render_data"]] to a file if it does not exist already,
and create the directory if necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Render all headers with L&lt;/"get_header_chunk"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Render all headers with [[/"get_header_chunk"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Render content with L&lt;Mojolicious/"renderer"&gt; and emit hooks
L&lt;Mojolicious/"before_render"&gt; as well as L&lt;Mojolicious/"after_render"&gt;, or
call L&lt;Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt&gt;not_found"&gt; if no
response could be generated, all additional key/value pairs get merged into the
L&lt;/"stash"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Render content with [[Mojolicious/"renderer"]] and emit hooks
[[Mojolicious/"before_render"]] as well as [[Mojolicious/"after_render"]], or
call [[Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt]]not_found"]] if no
response could be generated, all additional key/value pairs get merged into the
[[/"stash"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Render start-line with L&lt;/"get_start_line_chunk"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Render start-line with [[/"get_start_line_chunk"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Render template and return the result, or a L&lt;Mojo::Exception&gt; object if
rendering failed.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Render template and return the result, or a [[Mojo::Exception]] object if
rendering failed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Render whole body with L&lt;/"get_body_chunk"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Render whole body with [[/"get_body_chunk"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Renderer cache, defaults to a L&lt;Mojo::Cache&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Renderer cache, defaults to a [[Mojo::Cache]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Replace this node with HTML/XML fragment and return L&lt;/"root"&gt; (for C&lt;root&gt;
nodes) or L&lt;/"parent"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Replace this node with HTML/XML fragment and return [[/"root"]] (for C&lt;root&gt;
nodes) or [[/"parent"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Reply with a L&lt;Mojo::Asset::File&gt; or L&lt;Mojo::Asset::Memory&gt; object using
L&lt;Mojolicious::Static/"serve_asset"&gt;, and perform content negotiation with
C&lt;Range&gt;, C&lt;If-Modified-Since&gt; and C&lt;If-None-Match&gt; headers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>Reply with a [[Mojo::Asset::File]] or [[Mojo::Asset::Memory]] object using
[[Mojolicious::Static/"serve_asset"]], and perform content negotiation with
C&lt;Range&gt;, C&lt;If-Modified-Since&gt; and C&lt;If-None-Match&gt; headers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Reply with a static file from an absolute path anywhere on the file system using
L&lt;Mojolicious/"static"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Reply with a static file from an absolute path anywhere on the file system using
[[Mojolicious/"static"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Reply with a static file using L&lt;Mojolicious/"static"&gt;, usually from the
C&lt;public&gt; directories or C&lt;DATA&gt; sections of your application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Reply with a static file using [[Mojolicious/"static"]], usually from the
C&lt;public&gt; directories or C&lt;DATA&gt; sections of your application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Requests can be performed very comfortably with methods like
L&lt;Mojo::UserAgent/"get"&gt;, and always result in a L&lt;Mojo::Transaction::HTTP&gt;
object, which has many useful attributes and methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Requests can be performed very comfortably with methods like
[[Mojo::UserAgent/"get"]], and always result in a [[Mojo::Transaction::HTTP]]
object, which has many useful attributes and methods.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Resolve or reject L&lt;Mojo::Promise&gt; object with L&lt;Mojo::Transaction::HTTP&gt;
object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Resolve or reject [[Mojo::Promise]] object with [[Mojo::Transaction::HTTP]]
object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Resolve the path with L&lt;Cwd&gt; and return the result as a L&lt;Mojo::File&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Resolve the path with [[Cwd]] and return the result as a [[Mojo::File]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Response content is often generated by actions with
L&lt;Mojolicious::Controller/"render"&gt;, but more about that later.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123232Z" creationid="mokoo" creationdate="20190309T063856Z">
        <seg>レスポンスコンテントの多くは
[[Mojolicious::Controller]]のC&lt;render&gt;を使ったアクションによって生成されます。詳しくは後ほど。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Responsible for connecting file extensions with MIME types, defaults to a
L&lt;Mojolicious::Types&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Responsible for connecting file extensions with MIME types, defaults to a
[[Mojolicious::Types]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Results are
accessible via L&lt;Mojolicious::Controller/"stash"&gt; and
L&lt;Mojolicious::Controller/"param"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T125439Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>結果は[[Mojolicious::Controller]]のC&lt;stash&gt;とC&lt;param&gt;を通じて利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Results are automatically wrapped in L&lt;Mojo::ByteStream&gt; objects to prevent
accidental double escaping in C&lt;ep&gt; templates.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Results are automatically wrapped in [[Mojo::ByteStream]] objects to prevent
accidental double escaping in C&lt;ep&gt; templates.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Resume L&lt;/"handshake"&gt; transaction.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Resume [[/"handshake"]] transaction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Retrieve L&lt;/"body"&gt; and try to decode it with L&lt;Mojo::Content/"charset"&gt; or
L&lt;/"default_charset"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Retrieve [[/"body"]] and try to decode it with [[Mojo::Content/"charset"]] or
[[/"default_charset"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Retrieve message body from L&lt;/"text"&gt; and turn it into a L&lt;Mojo::DOM&gt; object,
an optional selector can be used to call the method L&lt;Mojo::DOM/"find"&gt; on it
right away, which then returns a L&lt;Mojo::Collection&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Retrieve message body from [[/"text"]] and turn it into a [[Mojo::DOM]] object,
an optional selector can be used to call the method [[Mojo::DOM/"find"]] on it
right away, which then returns a [[Mojo::Collection]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return L&lt;Mojo::DOM&gt; object for C&lt;root&gt; node.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return [[Mojo::DOM]] object for C&lt;root&gt; node.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return L&lt;Mojo::DOM&gt; object for next sibling element, or C&lt;undef&gt; if there are no
more siblings.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return [[Mojo::DOM]] object for next sibling element, or C&lt;undef&gt; if there are no
more siblings.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return L&lt;Mojo::DOM&gt; object for next sibling node, or C&lt;undef&gt; if there are no
more siblings.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return [[Mojo::DOM]] object for next sibling node, or C&lt;undef&gt; if there are no
more siblings.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return L&lt;Mojo::DOM&gt; object for parent of this node, or C&lt;undef&gt; if this node has
no parent.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return [[Mojo::DOM]] object for parent of this node, or C&lt;undef&gt; if this node has
no parent.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return L&lt;Mojo::DOM&gt; object for previous sibling element, or C&lt;undef&gt; if there
are no more siblings.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return [[Mojo::DOM]] object for previous sibling element, or C&lt;undef&gt; if there
are no more siblings.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return L&lt;Mojo::DOM&gt; object for previous sibling node, or C&lt;undef&gt; if there are
no more siblings.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return [[Mojo::DOM]] object for previous sibling node, or C&lt;undef&gt; if there are
no more siblings.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a C&lt;DATA&gt; section template from L&lt;/"classes"&gt; for an options hash
reference with C&lt;template&gt;, C&lt;format&gt;, C&lt;variant&gt; and C&lt;handler&gt; values, or
C&lt;undef&gt; if no template could be found, usually used by handlers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a C&lt;DATA&gt; section template from [[/"classes"&gt; for an options hash
reference with C&lt;template&gt;, C&lt;format&gt;, C&lt;variant&gt; and C&lt;handler&gt; values, or
C&lt;undef&gt; if no template could be found, usually used by handlers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a L&lt;File::stat&gt; object for the path.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a [[File::stat]] object for the path.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a L&lt;File::stat&gt; object for the symlink.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a [[File::stat]] object for the symlink.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a L&lt;Mojo::Collection&gt; object containing all child nodes of this element
as L&lt;Mojo::DOM&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a [[Mojo::Collection]] object containing all child nodes of this element
as [[Mojo::DOM]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a L&lt;Mojo::Collection&gt; object containing all descendant nodes of this
element as L&lt;Mojo::DOM&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a [[Mojo::Collection]] object containing all descendant nodes of this
element as [[Mojo::DOM]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a L&lt;Mojo::Collection&gt; object containing all sibling nodes after this
node as L&lt;Mojo::DOM&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a [[Mojo::Collection]] object containing all sibling nodes after this
node as [[Mojo::DOM]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a L&lt;Mojo::Collection&gt; object containing all sibling nodes before this
node as L&lt;Mojo::DOM&gt; objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a [[Mojo::Collection]] object containing all sibling nodes before this
node as [[Mojo::DOM]] objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a L&lt;Mojo::File&gt; object relative to the current working directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a [[Mojo::File]] object relative to the current working directory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::ByteStream&gt; object cloned from this bytestream.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::ByteStream]] object cloned from this bytestream.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::Content::MultiPart&gt; object cloned from this content if
possible, otherwise return C&lt;undef&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::Content::MultiPart]] object cloned from this content if
possible, otherwise return C&lt;undef&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::Content::Single&gt; object cloned from this content if
possible, otherwise return C&lt;undef&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::Content::Single]] object cloned from this content if
possible, otherwise return C&lt;undef&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::Content&gt; object cloned from this content if possible,
otherwise return C&lt;undef&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::Content]] object cloned from this content if possible,
otherwise return C&lt;undef&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::File&gt; object relative to the directory part of the path.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::File]] object relative to the directory part of the path.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::File&gt; object relative to the path.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::File]] object relative to the path.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::Headers&gt; object cloned from these headers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::Headers]] object cloned from these headers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::Home&gt; object relative to the home directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::Home]] object relative to the home directory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::Message::Request&gt; object cloned from this request if
possible, otherwise return C&lt;undef&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::Message::Request]] object cloned from this request if
possible, otherwise return C&lt;undef&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::Parameters&gt; object cloned from these parameters.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::Parameters]] object cloned from these parameters.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::Path&gt; object cloned from this path.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::Path]] object cloned from this path.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::Promise&gt; object cloned from this promise that is still
pending.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::Promise]] object cloned from this promise that is still
pending.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::URL&gt; object cloned from this URL.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::URL]] object cloned from this URL.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a new L&lt;Mojo::URL&gt; object cloned from this relative URL and turn it into
an absolute one using L&lt;/"base"&gt; or provided base URL.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a new [[Mojo::URL]] object cloned from this relative URL and turn it into
an absolute one using [[/"base"]] or provided base URL.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a proxy object containing the current controller object and on which
helpers provided by L&lt;/"app"&gt; can be called.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a proxy object containing the current controller object and on which
helpers provided by [[/"app"]] can be called.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return a relative path from the original path to the destination path as a
L&lt;Mojo::File&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return a relative path from the original path to the destination path as a
[[Mojo::File]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return absolute path as a L&lt;Mojo::File&gt; object, the path does not need to exist
on the file system.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return absolute path as a [[Mojo::File]] object, the path does not need to exist
on the file system.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return all L&lt;Mojo::Cookie::Response&gt; objects that are currently stored in the
jar.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return all [[Mojo::Cookie::Response]] objects that are currently stored in the
jar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return all but the last level of the path with L&lt;File::Basename&gt; as a
L&lt;Mojo::File&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return all but the last level of the path with [[File::Basename]] as a
[[Mojo::File]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return default template name for L&lt;Mojolicious::Controller&gt; object, or C&lt;undef&gt;
if no name could be generated.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return default template name for [[Mojolicious::Controller]] object, or C&lt;undef&gt;
if no name could be generated.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return fractional amount of time in seconds since named timstamp has been
created with L&lt;/"timing-E&lt;gt&gt;begin"&gt; or C&lt;undef&gt; if no such timestamp exists.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return fractional amount of time in seconds since named timstamp has been
created with [[/"timing-E&lt;gt&gt;begin"]] or C&lt;undef&gt; if no such timestamp exists.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return the full template path for an options hash reference with C&lt;template&gt;,
C&lt;format&gt;, C&lt;variant&gt; and C&lt;handler&gt; values, or C&lt;undef&gt; if the file does not
exist in L&lt;/"paths"&gt;, usually used by handlers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return the full template path for an options hash reference with C&lt;template&gt;,
C&lt;format&gt;, C&lt;variant&gt; and C&lt;handler&gt; values, or C&lt;undef&gt; if the file does not
exist in [[/"paths"]], usually used by handlers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Return the last level of the path with L&lt;File::Basename&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Return the last level of the path with [[File::Basename]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Returns a new L&lt;Mojo::Promise&gt; object that either fulfills when all of the
passed L&lt;Mojo::Promise&gt; objects have fulfilled or rejects as soon as one of them
rejects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Returns a new [[Mojo::Promise]] object that either fulfills when all of the
passed [[Mojo::Promise]] objects have fulfilled or rejects as soon as one of them
rejects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Returns a new L&lt;Mojo::Promise&gt; object that fulfills or rejects as soon as one of
the passed L&lt;Mojo::Promise&gt; objects fulfills or rejects, with the value or
reason from that promise.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Returns a new [[Mojo::Promise]] object that fulfills or rejects as soon as one of
the passed [[Mojo::Promise]] objects fulfills or rejects, with the value or
reason from that promise.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Returns the L&lt;Mojo::Message::Response&gt; object from L&lt;/"res"&gt; or dies if a
connection error has occurred.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Returns the [[Mojo::Message::Response]] object from [[/"res"]] or dies if a
connection error has occurred.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Returns the L&lt;Mojolicious::Lite&gt; application object, which is a subclass of
L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Returns the [[Mojolicious::Lite]] application object, which is a subclass of
[[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Route placeholders allow capturing parts of a request path until a C&lt;/&gt; or C&lt;.&gt;
separator occurs, similar to the regular expression C&lt;([^/.]+)&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T125423Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>ルーティング(routes)プレースホルダを使用すると、区切り文字の / あるいは . が出現するまでの部分を、リクエストパスからキャプチャできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Router results for the current request, defaults to a
L&lt;Mojolicious::Routes::Match&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Router results for the current request, defaults to a
[[Mojolicious::Routes::Match]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Routes are basically just fancy paths that can contain different kinds of
placeholders and usually lead to an action, if they match the path part of the
request URL.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123132Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>ルーティング(routes)とは、一般的にいうと異なる種類のプレースホルダを含むことのできる仮想的なパスのことです。通常はアクションにつながっており、リクエストURLのパス部分にマッチしたときに実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Routes can be restricted to specific request methods with different keywords
like L&lt;Mojolicious::Lite/"get"&gt; and L&lt;Mojolicious::Lite/"any"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130617Z" creationid="mokoo" creationdate="20190309T071053Z">
        <seg>ルーティングは [[Mojolicious::Lite/]]のC&lt;get&gt; や [[Mojolicious::Lite]]のC&lt;any&gt;といったキーワードによって特定のリクエストメソッドに限定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Routing cache, defaults to a L&lt;Mojo::Cache&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Routing cache, defaults to a [[Mojo::Cache]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Run CSS selector against L&lt;/"tree"&gt; and stop as soon as the first node matched.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Run CSS selector against [[/"tree"]] and stop as soon as the first node matched.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Run CSS selector against L&lt;/"tree"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Run CSS selector against [[/"tree"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Run L&lt;PSGI&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Run [[PSGI]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Run server and wait for L&lt;/"MANAGER SIGNALS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Run server and wait for [[/"MANAGER SIGNALS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Run server and wait for L&lt;/"SIGNALS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Run server and wait for [[/"SIGNALS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Run server for application and wait for L&lt;/"MANAGER SIGNALS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Run server for application and wait for [[/"MANAGER SIGNALS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Run server for application and wait for L&lt;/"SIGNALS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Run server for application and wait for [[/"SIGNALS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"button_to"&gt;, but also includes a L&lt;/"csrf_field"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"button_to"]], but also includes a [[/"csrf_field"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"completed"&gt;, but also indicates that all transaction data has been
sent.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"completed"]], but also indicates that all transaction data has been
sent.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"content"&gt;, but appends content to named buffers if they are already
in use.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"content"]], but appends content to named buffers if they are already
in use.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"content"&gt;, but replaces content of named buffers if they are
already in use.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"content"]], but replaces content of named buffers if they are
already in use.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"delete"&gt;, but performs all requests non-blocking and returns a
L&lt;Mojo::Promise&gt; object instead of accepting a callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"delete"]], but performs all requests non-blocking and returns a
[[Mojo::Promise]] object instead of accepting a callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"get"&gt;, but performs all requests non-blocking and returns a
L&lt;Mojo::Promise&gt; object instead of accepting a callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"get"]], but performs all requests non-blocking and returns a
[[Mojo::Promise]] object instead of accepting a callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"head"&gt;, but performs all requests non-blocking and returns a
L&lt;Mojo::Promise&gt; object instead of accepting a callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"head"]], but performs all requests non-blocking and returns a
[[Mojo::Promise]] object instead of accepting a callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"html_unescape"&gt;, but handles special rules from the
L&lt;HTML Living Standard|https://html.spec.whatwg.org&gt; for HTML attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"html_unescape"]], but handles special rules from the
[[HTML Living Standard|https://html.spec.whatwg.org]] for HTML attributes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"options"&gt;, but performs all requests non-blocking and returns a
L&lt;Mojo::Promise&gt; object instead of accepting a callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"options"]], but performs all requests non-blocking and returns a
[[Mojo::Promise]] object instead of accepting a callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"original_remote_address"&gt; or the last value of the
C&lt;X-Forwarded-For&gt; header if L&lt;/"req"&gt; has been performed through a reverse
proxy.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"original_remote_address"]] or the last value of the
C&lt;X-Forwarded-For&gt; header if [[/"req"]] has been performed through a reverse
proxy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"patch"&gt;, but performs all requests non-blocking and returns a
L&lt;Mojo::Promise&gt; object instead of accepting a callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"patch"]], but performs all requests non-blocking and returns a
[[Mojo::Promise]] object instead of accepting a callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"post"&gt;, but performs all requests non-blocking and returns a
L&lt;Mojo::Promise&gt; object instead of accepting a callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"post"]], but performs all requests non-blocking and returns a
[[Mojo::Promise]] object instead of accepting a callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"put"&gt;, but performs all requests non-blocking and returns a
L&lt;Mojo::Promise&gt; object instead of accepting a callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"put"]], but performs all requests non-blocking and returns a
[[Mojo::Promise]] object instead of accepting a callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"render"&gt;, but renders a template file.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"render"]], but renders a template file.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"split_header"&gt;, but handles C&lt;expires&gt; values from
L&lt;RFC 6265|http://tools.ietf.org/html/rfc6265&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"split_header"]], but handles C&lt;expires&gt; values from
[[RFC 6265|http://tools.ietf.org/html/rfc6265]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"start"&gt;, but performs all requests non-blocking and returns a
L&lt;Mojo::Promise&gt; object instead of accepting a callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"start"]], but performs all requests non-blocking and returns a
[[Mojo::Promise]] object instead of accepting a callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"tag"&gt;, but adds the class C&lt;field-with-error&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"tag"]], but adds the class C&lt;field-with-error&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"to_string"&gt;, but includes L&lt;/"userinfo"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"to_string"]], but includes [[/"userinfo"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;/"websocket"&gt;, but returns a L&lt;Mojo::Promise&gt; object instead of
accepting a callback.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[/"websocket"]], but returns a [[Mojo::Promise]] object instead of
accepting a callback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Same as L&lt;Mojo::Transaction/"completed"&gt;, but also indicates that all
transaction data has been sent.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Same as [[Mojo::Transaction/"completed"]], but also indicates that all
transaction data has been sent.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Secret passphrases used for signed cookies and the like, defaults to the
L&lt;/"moniker"&gt; of this application, which is not very secure, so you should
change it!!!</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Secret passphrases used for signed cookies and the like, defaults to the
[[/"moniker"]] of this application, which is not very secure, so you should
change it!!!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See
L&lt;/"Custom transactions"&gt; below.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See
[[/"Custom transactions"]] below.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See
L&lt;Mojolicious::Controller/"render"&gt; for a more user-friendly interface.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See
[[Mojolicious::Controller/"render"]] for a more user-friendly interface.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See
L&lt;Mojolicious::Guides::Routing/"Formats"&gt; for information on customizing format
detection, or consider using
L&lt;relaxed placeholders|Mojolicious::Guides::Routing/"Relaxed placeholders"&gt; to
allow matching of the C&lt;.&gt; character.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See
[[Mojolicious::Guides::Routing/"Formats"]] for information on customizing format
detection, or consider using
[[relaxed placeholders|Mojolicious::Guides::Routing/"Relaxed placeholders"]] to
allow matching of the C&lt;.&gt; character.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See
L&lt;Mojolicious::Guides::Tutorial&gt; and L&lt;Mojolicious::Guides::Routing&gt; for more
information.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See
[[Mojolicious::Guides::Tutorial]] and [[Mojolicious::Guides::Routing]] for more
information.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;/"tx"&gt; for more.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[/"tx"]] for more.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojo::UserAgent&gt; for the complete API and return values.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[Mojo::UserAgent]] for the complete API and return values.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojolicious::Commands/"COMMANDS"&gt; for a list of commands that are
available by default.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[Mojolicious::Commands/"COMMANDS"]] for a list of commands that are
available by default.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojolicious::Guides::Cookbook/"DEPLOYMENT"&gt; for more.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[Mojolicious::Guides::Cookbook/"DEPLOYMENT"]] for more.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojolicious::Guides::Cookbook/"REAL-TIME WEB"&gt; for more.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[Mojolicious::Guides::Cookbook/"REAL-TIME WEB"]] for more.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojolicious::Guides::Cookbook/"USER AGENT"&gt; for more.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[Mojolicious::Guides::Cookbook/"USER AGENT"]] for more.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojolicious::Guides::Rendering&gt; for information on how to generate
content with the L&lt;Mojolicious&gt; renderer.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[Mojolicious::Guides::Rendering]] for information on how to generate
content with the [[Mojolicious]] renderer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojolicious::Guides::Rendering&gt; for more.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[Mojolicious::Guides::Rendering]] for more.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojolicious::Guides::Routing&gt; for more.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[Mojolicious::Guides::Routing]] for more.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojolicious::Guides::Testing&gt; for more.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[Mojolicious::Guides::Testing]] for more.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojolicious::Guides::Tutorial&gt; and
L&lt;Mojolicious::Guides::Routing&gt; for more information.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[Mojolicious::Guides::Tutorial]] and
[[Mojolicious::Guides::Routing]] for more information.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojolicious::Guides::Tutorial&gt; and L&lt;Mojolicious::Guides::Routing&gt; for
more information.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[Mojolicious::Guides::Tutorial]] and [[Mojolicious::Guides::Routing]] for
more information.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojolicious::Guides::Tutorial&gt; for more!</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[Mojolicious::Guides::Tutorial]] for more!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojolicious::Guides&gt; for more!</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190210T051941Z">
        <seg>詳しくは [[Mojolicious::Guides]] を見てください！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See L&lt;Mojolicious::Plugins/"PLUGINS"&gt; for a list of plugins that are available
by default.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See [[Mojolicious::Plugins/"PLUGINS"]] for a list of plugins that are available
by default.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See also L&lt;Mojo::Server::Daemon/"listen"&gt; for more examples.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See also [[Mojo::Server::Daemon/"listen"]] for more examples.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See the
L&lt;/"plugin"&gt; method below if you want to load a plugin.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>See the
[[/"plugin"]] method below if you want to load a plugin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Select best possible representation for L&lt;Mojolicious::Controller&gt; object from
C&lt;format&gt; C&lt;GET&gt;/C&lt;POST&gt; parameter, C&lt;format&gt; stash value, or C&lt;Accept&gt; request
header, defaults to returning the first extension if no preference could be
detected.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Select best possible representation for [[Mojolicious::Controller]] object from
C&lt;format&gt; C&lt;GET&gt;/C&lt;POST&gt; parameter, C&lt;format&gt; stash value, or C&lt;Accept&gt; request
header, defaults to returning the first extension if no preference could be
detected.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Select best possible representation for resource from C&lt;format&gt; C&lt;GET&gt;/C&lt;POST&gt;
parameter, C&lt;format&gt; stash value or C&lt;Accept&gt; request header with
L&lt;Mojolicious::Renderer/"accepts"&gt;, defaults to returning the first extension if
no preference could be detected.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Select best possible representation for resource from C&lt;format&gt; C&lt;GET&gt;/C&lt;POST&gt;
parameter, C&lt;format&gt; stash value or C&lt;Accept&gt; request header with
[[Mojolicious::Renderer/"accepts"]], defaults to returning the first extension if
no preference could be detected.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Send data serialized with L&lt;Storable&gt; to the parent process at any time during
the subprocess's execution.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Send data serialized with [[Storable]] to the parent process at any time during
the subprocess's execution.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Serve a L&lt;Mojo::Asset::File&gt; or L&lt;Mojo::Asset::Memory&gt; object with C&lt;Range&gt;,
C&lt;If-Modified-Since&gt; and C&lt;If-None-Match&gt; support.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>Serve a [[Mojo::Asset::File]] or [[Mojo::Asset::Memory]] object with C&lt;Range&gt;,
C&lt;If-Modified-Since&gt; and C&lt;If-None-Match&gt; support.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Serve a specific file, relative to L&lt;/"paths"&gt; or from L&lt;/"classes"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Serve a specific file, relative to [[/"paths"]] or from [[/"classes"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Serve static file for L&lt;Mojolicious::Controller&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Serve static file for [[Mojolicious::Controller]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Server available at http://127.0.0.1:3000</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>Server available at http://127.0.0.1:3000.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Server available at http://127.0.0.1:8080</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>Server available at http://127.0.0.1:8080.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Sessions in L&lt;Mojolicious&gt; pretty much just work out of the box once you start
using the method L&lt;Mojolicious::Controller/"session"&gt;, there is no setup
required, but we suggest setting a more secure passphrase with
L&lt;Mojolicious/"secrets"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Sessions in [[Mojolicious]] pretty much just work out of the box once you start
using the method [[Mojolicious::Controller/"session"]], there is no setup
required, but we suggest setting a more secure passphrase with
[[Mojolicious/"secrets"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Set C&lt;extends&gt; stash value, all additional key/value pairs get merged into the
L&lt;/"stash"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Set C&lt;extends&gt; stash value, all additional key/value pairs get merged into the
[[/"stash"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Set C&lt;layout&gt; stash value, all additional key/value pairs get merged into the
L&lt;/"stash"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Set C&lt;layout&gt; stash value, all additional key/value pairs get merged into the
[[/"stash"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Set default parameters for this route and allow partial matching to simplify
application embedding, takes the same arguments as L&lt;/"to"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Set default parameters for this route and allow partial matching to simplify
application embedding, takes the same arguments as [[/"to"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Sets up the default controller and emits the L&lt;/"around_dispatch"&gt; hook for
every request.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Sets up the default controller and emits the [[/"around_dispatch"]] hook for
every request.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Share code with L&lt;Mojolicious/"hook"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Share code with [[Mojolicious/"hook"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Shortcut for passing values between L&lt;/"steps"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Shortcut for passing values between [[/"steps"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Signed cookie based session manager, defaults to a L&lt;Mojolicious::Sessions&gt;
object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Signed cookie based session manager, defaults to a [[Mojolicious::Sessions]]
object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Similar to L&lt;/"cookie"&gt;, but returns all message cookies sharing the same name
as an array reference.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Similar to [[/"cookie"]], but returns all message cookies sharing the same name
as an array reference.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Similar to L&lt;/"cookie"&gt;, but returns all request cookie values sharing the same
name as an array reference.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Similar to [[/"cookie"]], but returns all request cookie values sharing the same
name as an array reference.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Similar to L&lt;/"header"&gt;, but returns all headers sharing the same name as an
array reference.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Similar to [[/"header"]], but returns all headers sharing the same name as an
array reference.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Similar to L&lt;/"param"&gt;, but returns all values sharing the same name as an
array reference.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Similar to [[/"param"]], but returns all values sharing the same name as an
array reference.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Similar to L&lt;/"signed_cookie"&gt;, but returns all signed request cookie values
sharing the same name as an array reference.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Similar to [[/"signed_cookie"]], but returns all signed request cookie values
sharing the same name as an array reference.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Similar to L&lt;/"upload"&gt;, but returns all file uploads sharing the same name as
an array reference.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Similar to [[/"upload"]], but returns all file uploads sharing the same name as
an array reference.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Similar to plugins, instead of the L&lt;/"helper"&gt; function you just use the method
L&lt;Mojolicious/"helper"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Similar to plugins, instead of the [[/"helper"]] function you just use the method
[[Mojolicious/"helper"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Similar to templates, but with only a single file extension and optional Base64
encoding, static files can be inlined in the C&lt;DATA&gt; section and are served
automatically.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190314T230649Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>テンプレートに似て、静的ファイルはC&lt;DATA&gt;セクションの中にインラインで記述することができ、自動的にサーブされます。ただし、使える拡張子が1種類に限られるのと、Base64エンコーディングが使える点が異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Simple and fun introduction to the L&lt;Mojolicious&gt; router.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Simple and fun introduction to the [[Mojolicious]] router.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Since L&lt;Mojo::UserAgent&gt; is also based on the L&lt;Mojo::IOLoop&gt; event loop, it
won't block the built-in web servers when used non-blocking, even for high
latency backend web services.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Since [[Mojo::UserAgent]] is also based on the [[Mojo::IOLoop]] event loop, it
won't block the built-in web servers when used non-blocking, even for high
latency backend web services.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Since all built-in web servers are based on the L&lt;Mojo::IOLoop&gt; event loop,
they scale best with non-blocking operations.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Since all built-in web servers are based on the [[Mojo::IOLoop]] event loop,
they scale best with non-blocking operations.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Since full L&lt;Mojolicious&gt; applications
can use nested routes they have no need for C&lt;group&gt; blocks.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Since full [[Mojolicious]] applications
can use nested routes they have no need for C&lt;group&gt; blocks.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Slurp or replace L&lt;/"content"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Slurp or replace [[/"content"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So
L&lt;Mojo::Promise/"wait"&gt; can stop the event loop automatically if it had to be
started at all in the first place.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>So
[[Mojo::Promise/"wait"]] can stop the event loop automatically if it had to be
started at all in the first place.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So if your contribution
is not a simple bug fix, it is B&lt;strongly recommended&gt; that you discuss it in
advance on the L&lt;mailing list|http://groups.google.com/group/mojolicious&gt; or the
official IRC channel C&lt;#mojo&gt; on C&lt;irc.freenode.net&gt; (L&lt;chat
now!|https://kiwiirc.com/nextclient/#irc://irc.freenode.net/mojo?nick=guest-?&gt;),
to avoid unnecessary work and to increase its chances of getting accepted.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>So if your contribution
is not a simple bug fix, it is B&lt;strongly recommended&gt; that you discuss it in
advance on the [[mailing list|http://groups.google.com/group/mojolicious]] or the
official IRC channel C&lt;#mojo&gt; on C&lt;irc.freenode.net&gt; (L&lt;chat
now!|https://kiwiirc.com/nextclient/#irc://irc.freenode.net/mojo?nick=guest-?&gt;),
to avoid unnecessary work and to increase its chances of getting accepted.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So you cannot currently use route placeholders in
routes leading to embedded applications, since that would cause problems with
L&lt;Mojolicious::Controller/"url_for"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>So you cannot currently use route placeholders in
routes leading to embedded applications, since that would cause problems with
[[Mojolicious::Controller/"url_for"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some modules, like L&lt;Mojo::Base&gt; and L&lt;Mojolicious::Lite&gt;, will enable them for
you automatically, whenever they are used.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Some modules, like [[Mojo::Base]] and [[Mojolicious::Lite]], will enable them for
you automatically, whenever they are used.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some of the more advanced features, such as
L&lt;subprocesses|Mojo::IOLoop/"subprocess"&gt; and the
L&lt;Hypnotoad|Mojo::Server::Hypnotoad&gt; web server, will also require the use of
the L&lt;Windows Subsystem for Linux|https://msdn.microsoft.com/commandline/wsl/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Some of the more advanced features, such as
[[subprocesses|Mojo::IOLoop/"subprocess"]] and the
[[Hypnotoad|Mojo::Server::Hypnotoad]] web server, will also require the use of
the [[Windows Subsystem for Linux|https://msdn.microsoft.com/commandline/wsl/]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some of the most commonly used tools are L&lt;Mojo::UserAgent&gt;,
L&lt;Mojo::DOM&gt;, L&lt;Mojo::JSON&gt;, L&lt;Mojo::Server::Daemon&gt;, L&lt;Mojo::Server::Prefork&gt;,
L&lt;Mojo::IOLoop&gt; and L&lt;Mojo::Template&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190210T051909Z">
        <seg>このうちもっともよく使われているツールには以下があります。
[[Mojo::UserAgent]],
[[Mojo::DOM]], [[Mojo::JSON]], [[Mojo::Server::Daemon]], [[Mojo::Server::Prefork]],
[[Mojo::IOLoop]] and [[Mojo::Template]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some of the work on this distribution has been sponsored by
L&lt;The Perl Foundation|http://www.perlfoundation.org&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Some of the work on this distribution has been sponsored by
[[The Perl Foundation|http://www.perlfoundation.org]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some parts of the documentation only use the L&lt;Mojolicious::Lite&gt; micro web
framework for examples, but that's merely a convenience for the reader.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Some parts of the documentation only use the [[Mojolicious::Lite]] micro web
framework for examples, but that's merely a convenience for the reader.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Sometimes you might want to use the rendered result directly instead of
generating a response, for example, to send emails, this can be done with
L&lt;Mojolicious::Controller/"render_to_string"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Sometimes you might want to use the rendered result directly instead of
generating a response, for example, to send emails, this can be done with
[[Mojolicious::Controller/"render_to_string"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Standard route placeholders will not match the C&lt;.&gt; character, however
L&lt;Mojolicious&gt; routes automatically take file extensions like C&lt;.html&gt;, remove
the leading C&lt;.&gt;, and store the result in the C&lt;format&gt; stash value.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Standard route placeholders will not match the C&lt;.&gt; character, however
[[Mojolicious]] routes automatically take file extensions like C&lt;.html&gt;, remove
the leading C&lt;.&gt;, and store the result in the C&lt;format&gt; stash value.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Start L&lt;/"ioloop"&gt; and stop it again once the promise has been fulfilled or
rejected, does nothing when L&lt;/"ioloop"&gt; is already running.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Start [[/"ioloop"]] and stop it again once the promise has been fulfilled or
rejected, does nothing when [[/"ioloop"]] is already running.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Start or resume accepting connections through L&lt;/"ioloop"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Start or resume accepting connections through [[/"ioloop"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Start the event loop, this will block until L&lt;/"stop"&gt; is called.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Start the event loop, this will block until [[/"stop"]] is called.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Start watching for I/O and timer events, this will block until L&lt;/"stop"&gt; is
called or no events are being watched anymore.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Start watching for I/O and timer events, this will block until [[/"stop"]] is
called or no events are being watched anymore.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Start watching for I/O and timer events, this will block until L&lt;/"stop"&gt; is
called.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Start watching for I/O and timer events, this will block until [[/"stop"]] is
called.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Starting a L&lt;Mojolicious::Lite&gt; prototype from scratch and growing it into a
well-structured L&lt;Mojolicious&gt; application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Starting a [[Mojolicious::Lite]] prototype from scratch and growing it into a
well-structured [[Mojolicious]] application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Static files are automatically served from the C&lt;public&gt; directories of the
application, which can be customized with L&lt;Mojolicious::Static/"paths"&gt;, or one
of the C&lt;DATA&gt; sections from L&lt;Mojolicious::Static/"classes"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Static files are automatically served from the C&lt;public&gt; directories of the
application, which can be customized with [[Mojolicious::Static/"paths"]], or one
of the C&lt;DATA&gt; sections from [[Mojolicious::Static/"classes"&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Steal L&lt;/"handle"&gt; and prevent it from getting closed automatically.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Steal [[/"handle"]] and prevent it from getting closed automatically.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Stop accepting connections through L&lt;/"ioloop"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Stop accepting connections through [[/"ioloop"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Stop the event loop, this will not interrupt any existing connections and the
event loop can be restarted by running L&lt;/"start"&gt; again.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Stop the event loop, this will not interrupt any existing connections and the
event loop can be restarted by running [[/"start"]] again.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>String value length or size of L&lt;Mojo::Upload&gt; object in bytes needs to be
between these two values.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>String value length or size of [[Mojo::Upload]] object in bytes needs to be
between these two values.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Subscribe to L&lt;/"error"&gt; event.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Subscribe to [[/"error"]] event.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Subscribe to events of L&lt;/"tx"&gt;, which is usually a L&lt;Mojo::Transaction::HTTP&gt;
or L&lt;Mojo::Transaction::WebSocket&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Subscribe to events of [[/"tx"]], which is usually a [[Mojo::Transaction::HTTP]]
or [[Mojo::Transaction::WebSocket]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Support for compound selectors was added as part of
L&lt;Selectors Level 4|http://dev.w3.org/csswg/selectors-4&gt;, which is still a work
in progress.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Support for compound selectors was added as part of
[[Selectors Level 4|http://dev.w3.org/csswg/selectors-4]], which is still a work
in progress.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Take a look at our excellent documentation in L&lt;Mojolicious::Guides&gt;!</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Take a look at our excellent documentation in [[Mojolicious::Guides]]!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Template blocks can be used like normal Perl functions and are always delimited
by the C&lt;begin&gt; and C&lt;end&gt; keywords, they are the foundation for many helpers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T132640Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>テンプレートブロックは通常のPerl関数のように利用でき、常にC&lt;begin&gt;とC&lt;end&gt;というキーワードで区切ります。これは多くのヘルパーの基盤になっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Templates can have layouts too, you just select one with the helper
L&lt;Mojolicious::Plugin::DefaultHelpers/"layout"&gt; and place the result of the
current template with the helper
L&lt;Mojolicious::Plugin::DefaultHelpers/"content"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T124746Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>テンプレートにはレイアウトを持たせることができます。レイアウトは[[Mojolicious::Plugin::DefaultHelpers]]のC&lt;layout&gt;ヘルパーを使って選択することができ、[[Mojolicious::Plugin::DefaultHelpers]]のC&lt;content&gt;ヘルパーを使って現在のテンプレートの結果を入れることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Templates stored in files are expected to be C&lt;UTF-8&gt; by default, but that can
be easily changed with L&lt;Mojolicious::Renderer/"encoding"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Templates stored in files are expected to be C&lt;UTF-8&gt; by default, but that can
be easily changed with [[Mojolicious::Renderer/"encoding"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Temporarily spawn up to this number of additional workers if there is a need,
defaults to the value of L&lt;Mojo::Server::Prefork/"spare"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Temporarily spawn up to this number of additional workers if there is a need,
defaults to the value of [[Mojo::Server::Prefork/"spare"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Temporary directory used to generate L&lt;/"path"&gt;, defaults to the value of the
C&lt;MOJO_TMPDIR&gt; environment variable or auto-detection.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Temporary directory used to generate [[/"path"]], defaults to the value of the
C&lt;MOJO_TMPDIR&gt; environment variable or auto-detection.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Testing WebSocket servers does not get any simpler than with L&lt;Test::Mojo&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Testing WebSocket servers does not get any simpler than with [[Test::Mojo]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Testing a
Mojolicious application using L&lt;Test::Mojo&gt; will never conflict with running
applications, including the application you're testing.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Testing a
Mojolicious application using [[Test::Mojo]] will never conflict with running
applications, including the application you're testing.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Testing your application is as easy as creating a C&lt;t&gt; directory and filling it
with normal Perl tests like C&lt;t/basic.t&gt;, which can be a lot of fun thanks to
L&lt;Test::Mojo&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T125853Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>アプリケーションをテストするのはとても簡単です。C&lt;t&gt;ディレクトリを作成して
普通のPerlの単体テストを書くだけです。[[Test::Mojo]]のおかげで、
とても楽しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Thanks to the
command L&lt;Mojolicious::Command::get&gt; that is about to change.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Thanks to the
command [[Mojolicious::Command::get]] that is about to change.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Thanks to the command
L&lt;Mojolicious::Command::eval&gt; you can do just that, the application object
itself can be accessed via C&lt;app&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Thanks to the command
[[Mojolicious::Command::eval]] you can do just that, the application object
itself can be accessed via C&lt;app&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That means you can upgrade L&lt;Mojolicious&gt;,
Perl or even system libraries at runtime without ever stopping the server or
losing a single incoming connection, just by running the command above again.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>That means you can upgrade [[Mojolicious]],
Perl or even system libraries at runtime without ever stopping the server or
losing a single incoming connection, just by running the command above again.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That's why L&lt;Mojolicious&gt; comes with the possibly fastest pure-Perl
implementation L&lt;Mojo::JSON&gt; built right in, which is accessible through
L&lt;Mojo::Message/"json"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>That's why [[Mojolicious]] comes with the possibly fastest pure-Perl
implementation [[Mojo::JSON]] built right in, which is accessible through
[[Mojo::Message/"json"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The
C&lt;controller&gt; value gets converted from C&lt;snake_case&gt; to C&lt;CamelCase&gt; using
L&lt;Mojo::Util/"camelize"&gt; and appended to one or more namespaces, defaulting to
a controller namespace based on the application class (C&lt;MyApp::Controller&gt;),
as well as the bare application class (C&lt;MyApp&gt;), and these namespaces are
searched in that order.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The
C&lt;controller&gt; value gets converted from C&lt;snake_case&gt; to C&lt;CamelCase&gt; using
[[Mojo::Util/"camelize"]] and appended to one or more namespaces, defaulting to
a controller namespace based on the application class (C&lt;MyApp::Controller&gt;),
as well as the bare application class (C&lt;MyApp&gt;), and these namespaces are
searched in that order.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The
arguments are then combined in the same order L&lt;/"begin"&gt; was called, and passed
together to the next step.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The
arguments are then combined in the same order [[/"begin"]] was called, and passed
together to the next step.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The
built-in HTML/XML parser L&lt;Mojo::DOM&gt; is accessible through
L&lt;Mojo::Message/"dom"&gt; and supports all CSS selectors that make sense for a
standalone parser, it can be a very powerful tool especially for testing web
application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The
built-in HTML/XML parser [[Mojo::DOM]] is accessible through
[[Mojo::Message/"dom"]] and supports all CSS selectors that make sense for a
standalone parser, it can be a very powerful tool especially for testing web
application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The
default name is based on the value of L&lt;Mojolicious/"moniker"&gt; (C&lt;myapp&gt;),
appended with a C&lt;.conf&gt; extension (C&lt;myapp.conf&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The
default name is based on the value of [[Mojolicious/"moniker"]] (C&lt;myapp&gt;),
appended with a C&lt;.conf&gt; extension (C&lt;myapp.conf&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The
level will default to either the C&lt;MOJO_LOG_LEVEL&gt; environment variable,
C&lt;debug&gt; if the L&lt;/mode&gt; is C&lt;development&gt;, or C&lt;info&gt; otherwise.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The
level will default to either the C&lt;MOJO_LOG_LEVEL&gt; environment variable,
C&lt;debug&gt; if the [[/mode]] is C&lt;development]], or C&lt;info&gt; otherwise.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The C&lt;*_ok&gt; HTTP request assertion methods accept the same arguments as their
corresponding L&lt;Mojo::UserAgent&gt; methods (except for the callback argument).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The C&lt;*_ok&gt; HTTP request assertion methods accept the same arguments as their
corresponding [[Mojo::UserAgent]] methods (except for the callback argument).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The C&lt;Hello World&gt; example above can get even a little bit shorter in an L&lt;ojo&gt;
one-liner.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The C&lt;Hello World&gt; example above can get even a little bit shorter in an [[ojo]]
one-liner.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The C&lt;LIBEV_FLAGS&gt; environment variable should also be used to
select the best possible L&lt;EV&gt; backend, which usually defaults to the not very
scalable C&lt;select&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The C&lt;LIBEV_FLAGS&gt; environment variable should also be used to
select the best possible [[EV]] backend, which usually defaults to the not very
scalable C&lt;select&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The C&lt;MOJO_REVERSE_PROXY&gt; environment variable can be used to enable proxy
support, this allows L&lt;Mojolicious&gt; to automatically pick up the
C&lt;X-Forwarded-For&gt; and C&lt;X-Forwarded-Proto&gt; headers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The C&lt;MOJO_REVERSE_PROXY&gt; environment variable can be used to enable proxy
support, this allows [[Mojolicious]] to automatically pick up the
C&lt;X-Forwarded-For&gt; and C&lt;X-Forwarded-Proto&gt; headers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The C&lt;controller&gt; is always converted from C&lt;snake_case&gt; to C&lt;CamelCase&gt; with
L&lt;Mojo::Util/"camelize"&gt;, and then appended to this C&lt;namespace&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The C&lt;controller&gt; is always converted from C&lt;snake_case&gt; to C&lt;CamelCase&gt; with
[[Mojo::Util/"camelize"]], and then appended to this C&lt;namespace&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The C&lt;controller&gt; value gets converted from C&lt;CamelCase&gt; to C&lt;snake_case&gt; using
L&lt;Mojo::Util/"decamelize"&gt; and C&lt;-&gt; characters replaced with C&lt;/&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The C&lt;controller&gt; value gets converted from C&lt;CamelCase&gt; to C&lt;snake_case&gt; using
[[Mojo::Util/"decamelize"&gt; and C&lt;-]] characters replaced with C&lt;/&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The C&lt;file&gt; value should contain the path to the file you want to upload or an
asset object, like L&lt;Mojo::Asset::File&gt; or L&lt;Mojo::Asset::Memory&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>The C&lt;file&gt; value should contain the path to the file you want to upload or an
asset object, like [[Mojo::Asset::File]] or [[Mojo::Asset::Memory]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The C&lt;form&gt; content generator (see L&lt;Mojo::UserAgent::Transactor&gt;) will generate
a query string for C&lt;GET&gt; requests and C&lt;application/x-www-form-urlencoded&gt; or
C&lt;multipart/form-data&gt; for POST requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The C&lt;form&gt; content generator (see [[Mojo::UserAgent::Transactor&gt;) will generate
a query string for C&lt;GET&gt; requests and C&lt;application/x-www-form-urlencoded&gt; or
C&lt;multipart/form-data&gt; for POST requests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The C&lt;json&gt; content generator uses L&lt;Mojo::JSON&gt; for encoding and sets the
content type to C&lt;application/json&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The C&lt;json&gt; content generator uses [[Mojo::JSON]] for encoding and sets the
content type to C&lt;application/json&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The C&lt;json&gt; stash value allows you to pass Perl data structures to the renderer
which get directly encoded to JSON with L&lt;Mojo::JSON&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The C&lt;json&gt; stash value allows you to pass Perl data structures to the renderer
which get directly encoded to JSON with [[Mojo::JSON]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;/"TUTORIAL"&gt; everyone starts with, the L&lt;/"GUIDES"&gt; that
explain all major features in detail, and the class L&lt;/"REFERENCE"&gt; listing
all available APIs.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[/"TUTORIAL"]] everyone starts with, the [[/"GUIDES"]] that
explain all major features in detail, and the class [[/"REFERENCE"]] listing
all available APIs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Mojo::DOM&gt; parser uses the CSS selector syntax described in
L&lt;Mojo::DOM::CSS&gt;, allowing us to test for values in HTML and XML documents
without resorting to typically verbose and inflexible DOM traversal methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Mojo::DOM]] parser uses the CSS selector syntax described in
[[Mojo::DOM::CSS]], allowing us to test for values in HTML and XML documents
without resorting to typically verbose and inflexible DOM traversal methods.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Mojo::Server::Daemon&gt; process can be controlled at runtime with the
following signals.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Mojo::Server::Daemon]] process can be controlled at runtime with the
following signals.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Mojo::Server::Hypnotoad&gt; manager process can be controlled at runtime
with the following signals.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Mojo::Server::Hypnotoad]] manager process can be controlled at runtime
with the following signals.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Mojo::Server::Morbo&gt; process can be controlled at runtime with the
following signals.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Mojo::Server::Morbo]] process can be controlled at runtime with the
following signals.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Mojo::Server::Prefork&gt; manager process can be controlled at runtime with
the following signals.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Mojo::Server::Prefork]] manager process can be controlled at runtime with
the following signals.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Mojo::UserAgent&gt; object in L&lt;Test::Mojo&gt; can handle HTTP redirections
internally to whatever level you need.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Mojo::UserAgent]] object in [[Test::Mojo]] can handle HTTP redirections
internally to whatever level you need.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Mojo::UserAgent&gt; object in L&lt;Test::Mojo&gt; will know where the application
is running and make requests to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Mojo::UserAgent]] object in [[Test::Mojo]] will know where the application
is running and make requests to it.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Mojolicious::Controller/"stash"&gt; is used to pass data to templates, which
can be inlined in the C&lt;DATA&gt; section.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>[[Mojolicious::Controller]] のC&lt;stash&gt;はデータをテンプレートに渡すために利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Mojolicious::Routes&gt; object this route is a descendant of.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Mojolicious::Routes]] object this route is a descendant of.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Mojolicious&gt; core team believes that there is a lot of value in the entire
toolkit being a unified project.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Mojolicious]] core team believes that there is a lot of value in the entire
toolkit being a unified project.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Mojolicious&gt; distribution includes a few files with different licenses
that have been bundled for internal use.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Mojolicious]] distribution includes a few files with different licenses
that have been bundled for internal use.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Mojolicious|https://mojolicious.org&gt; documentation is structured into
three parts.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Mojolicious|https://mojolicious.org]] documentation is structured into
three parts.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Test::Mojo&gt; WebSocket assertions serialize messages via
event loop primitives.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Test::Mojo]] WebSocket assertions serialize messages via
event loop primitives.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Test::Mojo&gt; object is I&lt;stateful&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Test::Mojo]] object is I&lt;stateful]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Test::Mojo&gt; object manages the Mojolicious application lifecycle (if a
Mojolicious application class is supplied) as well as exposes the built-in
L&lt;Mojo::UserAgent&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Test::Mojo]] object manages the Mojolicious application lifecycle (if a
Mojolicious application class is supplied) as well as exposes the built-in
[[Mojo::UserAgent]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The L&lt;Test::More&gt; module bundled with Perl includes several primitive test
assertions, such as C&lt;ok&gt;, C&lt;is&gt;, C&lt;isnt&gt;, C&lt;like&gt;, C&lt;unlike&gt;, C&lt;cmp_ok&gt;, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The [[Test::More]] module bundled with Perl includes several primitive test
assertions, such as C&lt;ok&gt;, C&lt;is&gt;, C&lt;isnt&gt;, C&lt;like&gt;, C&lt;unlike&gt;, C&lt;cmp_ok&gt;, etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The actual content, defaults to a L&lt;Mojo::Asset::Memory&gt; object with
L&lt;Mojo::Asset::Memory/"auto_upgrade"&gt; enabled.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The actual content, defaults to a [[Mojo::Asset::Memory]] object with
[[Mojo::Asset::Memory/"auto_upgrade"]] enabled.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The application object can be accessed via C&lt;$app&gt; or the C&lt;app&gt; function,
L&lt;strict&gt;, L&lt;warnings&gt;, L&lt;utf8&gt; and Perl 5.10 L&lt;features|feature&gt; are
automatically enabled.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The application object can be accessed via C&lt;$app&gt; or the C&lt;app&gt; function,
[[strict]], [[warnings]], [[utf8]] and Perl 5.10 [[features|feature]] are
automatically enabled.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The application object you can access with the function L&lt;/"app"&gt; is the first
argument passed to the C&lt;startup&gt; method.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The application object you can access with the function [[/"app"]] is the first
argument passed to the C&lt;startup&gt; method.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The attribute L&lt;Mojolicious/"routes"&gt; contains a router you can use to generate
route structures.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The attribute [[Mojolicious/"routes"]] contains a router you can use to generate
route structures.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The callback passed to L&lt;Mojo::UserAgent/"get"&gt; will be executed once the
request to the backend web service has been finished, this is called
continuation-passing style.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The callback passed to [[Mojo::UserAgent/"get"]] will be executed once the
request to the backend web service has been finished, this is called
continuation-passing style.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The callback will
receive either a L&lt;Mojo::Transaction::WebSocket&gt; or L&lt;Mojo::Transaction::HTTP&gt;
object, depending on if the handshake was successful.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The callback will
receive either a [[Mojo::Transaction::WebSocket]] or [[Mojo::Transaction::HTTP]]
object, depending on if the handshake was successful.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command
L&lt;Mojolicious::Command::Author::inflate&gt; will write all templates and static
files from the C&lt;DATA&gt; section into actual files in the C&lt;templates&gt; and
C&lt;public&gt; directories.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The command
[[Mojolicious::Command::Author::inflate]] will write all templates and static
files from the C&lt;DATA&gt; section into actual files in the C&lt;templates&gt; and
C&lt;public&gt; directories.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command L&lt;Mojolicious::Command::routes&gt; can be used from the command line
to list all available routes together with names and underlying regular
expressions.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The command [[Mojolicious::Command::routes]] can be used from the command line
to list all available routes together with names and underlying regular
expressions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The compilation of templates to Perl code can make debugging a bit tricky, but
L&lt;Mojo::Template&gt; will return L&lt;Mojo::Exception&gt; objects that stringify to
error messages with context.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The compilation of templates to Perl code can make debugging a bit tricky, but
[[Mojo::Template]] will return [[Mojo::Exception]] objects that stringify to
error messages with context.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The connection gets established when you respond to the WebSocket handshake
request with a C&lt;101&gt; response status, which happens automatically if you
subscribe to an event with L&lt;Mojolicious::Controller/"on"&gt; or send a message
with L&lt;Mojolicious::Controller/"send"&gt; right away.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The connection gets established when you respond to the WebSocket handshake
request with a C&lt;101&gt; response status, which happens automatically if you
subscribe to an event with [[Mojolicious::Controller/"on"]] or send a message
with [[Mojolicious::Controller/"send"]] right away.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The default format is C&lt;html&gt;, and restrictive placeholders can be used to
limit possible values.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T132220Z" creationid="mokoo" creationdate="20190309T073118Z">
        <seg>デフォルトのフォーマットは C&lt;html&gt;です。プレースホルダで制限すれば、取りうる値を限定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The default operating mode will usually be C&lt;development&gt; and can be changed
with command line options or the C&lt;MOJO_MODE&gt; and C&lt;PLACK_ENV&gt; environment
variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T135155Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>デフォルトの処理モードは通常 C&lt;development&gt;ですが、コマンドラインオプションか
C&lt;MOJO_MODE&gt;あるいはC&lt;PLACK_ENV&gt;環境変数によって変更することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The drain callback passed to L&lt;Mojo::Content/"write"&gt; will be executed whenever
the entire previous chunk of data has actually been written.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The drain callback passed to [[Mojo::Content/"write"]] will be executed whenever
the entire previous chunk of data has actually been written.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The easiest way to embed one application into another is
L&lt;Mojolicious::Plugin::Mount&gt;, which allows you to mount whole self-contained
applications under a domain and/or prefix.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The easiest way to embed one application into another is
[[Mojolicious::Plugin::Mount]], which allows you to mount whole self-contained
applications under a domain and/or prefix.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The event L&lt;Mojo::Content/"read"&gt; will be emitted for every chunk of data that
is received, even chunked transfer encoding and gzip content encoding will be
handled transparently if necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The event [[Mojo::Content/"read"]] will be emitted for every chunk of data that
is received, even chunked transfer encoding and gzip content encoding will be
handled transparently if necessary.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The event L&lt;Mojo::Log/"message"&gt; will be emitted for every new log message and
the event L&lt;Mojo::Transaction/"finish"&gt; right after the transaction has been
finished.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The event [[Mojo::Log/"message"]] will be emitted for every new log message and
the event [[Mojo::Transaction/"finish"]] right after the transaction has been
finished.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The event L&lt;Mojo::Transaction::WebSocket/"finish"&gt; will be emitted right after
the WebSocket connection has been closed.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The event [[Mojo::Transaction::WebSocket/"finish"]] will be emitted right after
the WebSocket connection has been closed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The event loop will be resilient to time jumps if a monotonic clock is
available through L&lt;Time::HiRes&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The event loop will be resilient to time jumps if a monotonic clock is
available through [[Time::HiRes]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first argument passed to all actions (C&lt;$c&gt;) is a
L&lt;Mojolicious::Controller&gt; object, containing both the HTTP request and
response.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014432Z" creationid="mokoo" creationdate="20190309T063657Z">
        <seg>すべてのアクション（C&lt;$self&gt;）に渡される第一引数は、[[Mojolicious::Controller]]のインスタンスです。これにはHTTPリクエストとレスポンスが含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The following mission statement and rules are the foundation of all L&lt;Mojo&gt; and
L&lt;Mojolicious&gt; development.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The following mission statement and rules are the foundation of all [[Mojo]] and
[[Mojolicious]] development.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The following plugins are included in the L&lt;Mojolicious&gt; distribution as
examples.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The following plugins are included in the [[Mojolicious]] distribution as
examples.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The functions L&lt;/"get"&gt;, L&lt;/"post"&gt; and friends all have equivalent methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013057Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The functions [[/"get"]], [[/"post"]] and friends all have equivalent methods.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The generated hash of a matching route is actually the center of the whole
L&lt;Mojolicious&gt; request cycle.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The generated hash of a matching route is actually the center of the whole
[[Mojolicious]] request cycle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The global L&lt;Mojo::IOLoop&gt; singleton, used to access a single shared event loop
object from everywhere inside the process.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The global [[Mojo::IOLoop]] singleton, used to access a single shared event loop
object from everywhere inside the process.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The heart of every L&lt;Mojolicious&gt; application, calls the L&lt;/"static"&gt; and
L&lt;/"routes"&gt; dispatchers for every request and passes them a
L&lt;Mojolicious::Controller&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The heart of every [[Mojolicious]] application, calls the [[/"static"]] and
[[/"routes"]] dispatchers for every request and passes them a
[[Mojolicious::Controller]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The helper L&lt;Mojolicious::Plugin::DefaultHelpers/"content_for"&gt; allows you to
pass whole blocks of content from one template to another.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The helper [[Mojolicious::Plugin::DefaultHelpers/"content_for"]] allows you to
pass whole blocks of content from one template to another.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The helpers L&lt;Mojolicious::Plugin::DefaultHelpers/"flash"&gt; and
L&lt;Mojolicious::Plugin::DefaultHelpers/"redirect_to"&gt; are often used together to
prevent double form submission, allowing users to receive a confirmation message
that will vanish if they decide to reload the page they've been redirected to.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The helpers [[Mojolicious::Plugin::DefaultHelpers/"flash"]] and
[[Mojolicious::Plugin::DefaultHelpers/"redirect_to"]] are often used together to
prevent double form submission, allowing users to receive a confirmation message
that will vanish if they decide to reload the page they've been redirected to.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The home directory of your application, defaults to a L&lt;Mojo::Home&gt; object
which stringifies to the actual path.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The home directory of your application, defaults to a [[Mojo::Home]] object
which stringifies to the actual path.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The hook L&lt;Mojolicious/"before_render"&gt; can be used to make stash values like
C&lt;storable&gt; special, so that they no longer require a C&lt;handler&gt; value to be set
explicitly.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The hook [[Mojolicious/"before_render"]] can be used to make stash values like
C&lt;storable&gt; special, so that they no longer require a C&lt;handler&gt; value to be set
explicitly.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The hook L&lt;Mojolicious/"before_render"&gt; makes even more advanced customizations
possible by allowing you to intercept and modify the arguments passed to the
renderer.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The hook [[Mojolicious/"before_render"]] makes even more advanced customizations
possible by allowing you to intercept and modify the arguments passed to the
renderer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The idea behind L&lt;Mojo::IOLoop::Delay&gt; is to turn the nested closures above into
a flat series of closures.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The idea behind [[Mojo::IOLoop::Delay]] is to turn the nested closures above into
a flat series of closures.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The limit is
around 256KiB by default, you can use the attribute
L&lt;Mojo::Content/"max_buffer_size"&gt; or C&lt;MOJO_MAX_BUFFER_SIZE&gt; environment
variable to change this value.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The limit is
around 256KiB by default, you can use the attribute
[[Mojo::Content/"max_buffer_size"]] or C&lt;MOJO_MAX_BUFFER_SIZE&gt; environment
variable to change this value.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The limit is 8KiB by default,
you can use the attribute L&lt;Mojo::Message/"max_line_size"&gt; or
C&lt;MOJO_MAX_LINE_SIZE&gt; environment variable to change this value.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The limit is 8KiB by default,
you can use the attribute [[Mojo::Message/"max_line_size"]] or
C&lt;MOJO_MAX_LINE_SIZE&gt; environment variable to change this value.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The limits
are 100 headers with 8KiB each by default, you can use the attributes
L&lt;Mojo::Headers/"max_lines"&gt; and L&lt;Mojo::Headers/"max_line_size"&gt; or the
C&lt;MOJO_MAX_LINES&gt; and C&lt;MOJO_MAX_LINE_SIZE&gt; environment variables to change
these values.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The limits
are 100 headers with 8KiB each by default, you can use the attributes
[[Mojo::Headers/"max_lines"]] and [[Mojo::Headers/"max_line_size"]] or the
C&lt;MOJO_MAX_LINES&gt; and C&lt;MOJO_MAX_LINE_SIZE&gt; environment variables to change
these values.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The logging layer of your application, defaults to a L&lt;Mojo::Log&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The logging layer of your application, defaults to a [[Mojo::Log]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The method L&lt;Mojolicious::Controller/"param"&gt; is used to access query
parameters, C&lt;POST&gt; parameters, file uploads and route placeholders, all at
once.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The method [[Mojolicious::Controller/"param"]] is used to access query
parameters, C&lt;POST&gt; parameters, file uploads and route placeholders, all at
once.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The new manager will automatically send a L&lt;/"QUIT"&gt; signal to the old manager
and take over serving requests after starting up successfully.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The new manager will automatically send a [[/"QUIT"]] signal to the old manager
and take over serving requests after starting up successfully.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next assertion,
C&lt;message_ok&gt;, blocks (using the L&lt;Mojo::IOLoop&gt; singleton in the application)
and waits for a response from the server.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The next assertion,
C&lt;message_ok&gt;, blocks (using the [[Mojo::IOLoop]] singleton in the application)
and waits for a response from the server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The options C&lt;-h&gt;/C&lt;--help&gt;, C&lt;--home&gt; and C&lt;-m&gt;/C&lt;--mode&gt; are handled
automatically by L&lt;Mojolicious::Commands&gt; and are shared by all commands.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The options C&lt;-h&gt;/C&lt;--help&gt;, C&lt;--home&gt; and C&lt;-m&gt;/C&lt;--mode&gt; are handled
automatically by [[Mojolicious::Commands]] and are shared by all commands.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The original handshake transaction, usually a L&lt;Mojo::Transaction::HTTP&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The original handshake transaction, usually a [[Mojo::Transaction::HTTP]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The parent of this route, usually a L&lt;Mojolicious::Routes::Route&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The parent of this route, usually a [[Mojolicious::Routes::Route]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The plugin L&lt;Mojolicious::Plugin::Mount&gt; uses this functionality to allow you
to combine multiple applications into one and deploy them together.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The plugin [[Mojolicious::Plugin::Mount]] uses this functionality to allow you
to combine multiple applications into one and deploy them together.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The plugin manager, defaults to a L&lt;Mojolicious::Plugins&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The plugin manager, defaults to a [[Mojolicious::Plugins]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The renderer can be manually started by calling the method
L&lt;Mojolicious::Controller/"render"&gt;, but that's usually not necessary, because
it will get automatically called if nothing has been rendered after the router
finished its work.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The renderer can be manually started by calling the method
[[Mojolicious::Controller/"render"]], but that's usually not necessary, because
it will get automatically called if nothing has been rendered after the router
finished its work.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The return values of
the first callback and exceptions thrown by it, will be serialized with
L&lt;Storable&gt;, so they can be shared between processes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The return values of
the first callback and exceptions thrown by it, will be serialized with
[[Storable]], so they can be shared between processes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The root of the route structure, usually a L&lt;Mojolicious::Routes&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The root of the route structure, usually a [[Mojolicious::Routes]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The route endpoint that matched, usually a L&lt;Mojolicious::Routes::Route&gt;
object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The route endpoint that matched, usually a [[Mojolicious::Routes::Route]]
object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The router allows many different route variations,
L&lt;Mojolicious::Guides::Routing&gt; explains them all in great detail.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The router allows many different route variations,
[[Mojolicious::Guides::Routing]] explains them all in great detail.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The router, defaults to a L&lt;Mojolicious::Routes&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The router, defaults to a [[Mojolicious::Routes]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The special configuration value C&lt;config_override&gt;
will be set in L&lt;Mojolicious/"config"&gt; as well, which is used to disable
configuration plugins like L&lt;Mojolicious::Plugin::Config&gt; and
L&lt;Mojolicious::Plugin::JSONConfig&gt; for tests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The special configuration value C&lt;config_override&gt;
will be set in [[Mojolicious/"config"]] as well, which is used to disable
configuration plugins like [[Mojolicious::Plugin::Config]] and
[[Mojolicious::Plugin::JSONConfig]] for tests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The stash or helpers like L&lt;Mojolicious::Plugin::DefaultHelpers/"title"&gt; can be
used to pass additional data to the layout.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T124824Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>スタッシュや[[Mojolicious::Plugin::DefaultHelpers]]のC&lt;title&gt;のようなヘルパーを使うと、追加のデータをレイアウトに渡せます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The strength of L&lt;Mojolicious&gt; comes from its
varied community, people from a wide range of backgrounds.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The strength of [[Mojolicious]] comes from its
varied community, people from a wide range of backgrounds.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The template can be configured with
L&lt;/"template"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The template can be configured with
[[/"template"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The transaction that is currently being processed, usually a
L&lt;Mojo::Transaction::HTTP&gt; or L&lt;Mojo::Transaction::WebSocket&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The transaction that is currently being processed, usually a
[[Mojo::Transaction::HTTP]] or [[Mojo::Transaction::WebSocket]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The tutorial introduces the L&lt;Mojolicious::Lite&gt; micro web
framework, which is only a thin wrapper around the full web framework.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>The tutorial introduces the [[Mojolicious::Lite]] micro web
framework, which is only a thin wrapper around the full web framework.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then because we're expecting a JSON document back, we can
leverage C&lt;json_message_ok&gt; which parses the WebSocket response body and returns
an object we can access through L&lt;Mojo::JSON::Pointer&gt; syntax.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Then because we're expecting a JSON document back, we can
leverage C&lt;json_message_ok&gt; which parses the WebSocket response body and returns
an object we can access through [[Mojo::JSON::Pointer]] syntax.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are already shortcuts for the most common HTTP request methods like
L&lt;Mojolicious::Routes::Route/"post"&gt;, and for more control
L&lt;Mojolicious::Routes::Route/"any"&gt; accepts an optional array reference with
arbitrary request methods as first argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>There are already shortcuts for the most common HTTP request methods like
[[Mojolicious::Routes::Route/"post"]], and for more control
[[Mojolicious::Routes::Route/"any"]] accepts an optional array reference with
arbitrary request methods as first argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are many useful methods L&lt;Mojo::Home&gt; inherits from L&lt;Mojo::File&gt;, like
L&lt;Mojo::File/"child"&gt; and L&lt;Mojo::File/"slurp"&gt;, that will help you keep your
application portable across many different operating systems.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T133941Z" creationid="mokoo" creationdate="20190309T074656Z">
        <seg>[[Mojo::Home]] には [[Mojo::File]]から継承した便利なメソッドがたくさんあります。たとえば、[[Mojo::File]]のC&lt;child&gt;やC&lt;slurp&gt;は、アプリケーションを様々なオペレーティングシステムにまたがって使用できるようにしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are many variations of this error, but most of them mean that TLS
certificate verification in L&lt;Mojo::UserAgent&gt; failed.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>There are many variations of this error, but most of them mean that TLS
certificate verification in [[Mojo::UserAgent]] failed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are many ways in which you can help us resolve existing issues on the
L&lt;GitHub issue tracker|https://github.com/mojolicious/mojo/issues&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>There are many ways in which you can help us resolve existing issues on the
[[GitHub issue tracker|https://github.com/mojolicious/mojo/issues]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are many ways to contribute to L&lt;Mojolicious&gt;, this guide will show you a
few of them.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>There are many ways to contribute to [[Mojolicious]], this guide will show you a
few of them.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There is one big difference though, by calling it manually you can make sure
that templates use the current controller object, and not the default
controller specified with the attribute L&lt;Mojolicious/"controller_class"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>There is one big difference though, by calling it manually you can make sure
that templates use the current controller object, and not the default
controller specified with the attribute [[Mojolicious/"controller_class"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Therefore
when installing or upgrading L&lt;Mojolicious&gt; and when running its tests, we
highly recommend using an environment which does not set these variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Therefore
when installing or upgrading [[Mojolicious]] and when running its tests, we
highly recommend using an environment which does not set these variables.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Therefore we ask that you please not publically
fork pieces of the L&lt;Mojolicious&gt; distribution without our consent.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Therefore we ask that you please not publically
fork pieces of the [[Mojolicious]] distribution without our consent.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These mappings can be easily extended or changed with L&lt;Mojolicious/"types"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>These mappings can be easily extended or changed with [[Mojolicious/"types"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These modules are not part of the L&lt;Mojolicious&gt; distribution, but have been
designed to be used with it and are being developed under the same umbrella.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>These modules are not part of the [[Mojolicious]] distribution, but have been
designed to be used with it and are being developed under the same umbrella.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They can be especially useful for manually matching file names with extensions,
rather than using L&lt;format detection|/"Formats"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>They can be especially useful for manually matching file names with extensions,
rather than using [[format detection|/"Formats"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They have a higher precedence than templates in the C&lt;DATA&gt; section.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T022352Z" creationid="mokoo" creationdate="20190309T074026Z">
        <seg>これらはC&lt;DATA&gt;セクションにあるテンプレートよりも優先されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They work just like normal plugins and are also subclasses of
L&lt;Mojolicious::Plugin&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>They work just like normal plugins and are also subclasses of
[[Mojolicious::Plugin]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This
includes all helpers from L&lt;Mojolicious::Plugin::DefaultHelpers&gt; and
L&lt;Mojolicious::Plugin::TagHelpers&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This
includes all helpers from [[Mojolicious::Plugin::DefaultHelpers]] and
[[Mojolicious::Plugin::TagHelpers]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This allows
L&lt;Mojolicious::Controller/"url_for"&gt; for example, to generate portable URLs
based on the current environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This allows
[[Mojolicious::Controller/"url_for"]] for example, to generate portable URLs
based on the current environment.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This allows
L&lt;Mojolicious&gt; to automatically pick up the C&lt;X-Forwarded-For&gt; and
C&lt;X-Forwarded-Proto&gt; headers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This allows
[[Mojolicious]] to automatically pick up the C&lt;X-Forwarded-For&gt; and
C&lt;X-Forwarded-Proto&gt; headers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This allows for example, the use of the L&lt;Mojolicious::Lite&gt;
domain specific language in normal L&lt;Mojolicious&gt; controllers.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This allows for example, the use of the [[Mojolicious::Lite]]
domain specific language in normal [[Mojolicious]] controllers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This code of conduct applies to all spaces managed by the L&lt;Mojolicious&gt;
project.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This code of conduct applies to all spaces managed by the [[Mojolicious]]
project.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This document contains a simple and fun introduction to the L&lt;Mojolicious&gt;
router and its underlying concepts.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This document contains a simple and fun introduction to the [[Mojolicious]]
router and its underlying concepts.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This document contains answers for the most frequently asked questions about
L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This document contains answers for the most frequently asked questions about
[[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This document contains many fun recipes for cooking with L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This document contains many fun recipes for cooking with [[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This document explains content generation with the L&lt;Mojolicious&gt; renderer.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This document explains content generation with the [[Mojolicious]] renderer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This document explains the process of starting a L&lt;Mojolicious::Lite&gt; prototype
from scratch and growing it into a well-structured L&lt;Mojolicious&gt; application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This document explains the process of starting a [[Mojolicious::Lite]] prototype
from scratch and growing it into a well-structured [[Mojolicious]] application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This document is an introduction to testing web applications with L&lt;Test::Mojo&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This document is an introduction to testing web applications with [[Test::Mojo]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This enables us
to get deep test coverage of L&lt;Mojolicious&gt;-based applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This enables us
to get deep test coverage of [[Mojolicious]]-based applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This error message usually appears after waiting for the results of a
non-blocking operation for longer periods of time, because the underlying
connection has been closed in the meantime and the value of the attribute
L&lt;Mojolicious::Controller/"tx"&gt; is no longer available.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This error message usually appears after waiting for the results of a
non-blocking operation for longer periods of time, because the underlying
connection has been closed in the meantime and the value of the attribute
[[Mojolicious::Controller/"tx"]] is no longer available.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This gives us the
necessary freedom to ensure a healthy future for L&lt;Mojolicious&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This gives us the
necessary freedom to ensure a healthy future for [[Mojolicious]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This has already been done for all attributes and methods from
L&lt;Mojolicious::Controller&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This has already been done for all attributes and methods from
[[Mojolicious::Controller]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This hash is basically the center of every L&lt;Mojolicious&gt; application, you will
learn more about this later on.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This hash is basically the center of every [[Mojolicious]] application, you will
learn more about this later on.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This includes all helpers from
L&lt;Mojolicious::Plugin::DefaultHelpers&gt; and L&lt;Mojolicious::Plugin::TagHelpers&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This includes all helpers from
[[Mojolicious::Plugin::DefaultHelpers]] and [[Mojolicious::Plugin::TagHelpers]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a significantly faster
alternative to L&lt;/"tag"&gt; for template systems that have to generate a lot of
tags.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This is a significantly faster
alternative to [[/"tag"]] for template systems that have to generate a lot of
tags.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is only the first of the L&lt;Mojolicious::Guides&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190309T022750Z">
        <seg>チュートリアルは[[Mojolicious::Guides]]の序章です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the class hierarchy of the L&lt;Mojolicious&gt; distribution.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This is the class hierarchy of the [[Mojolicious]] distribution.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the directory it will search for
C&lt;public&gt; and C&lt;templates&gt; directories, but you can use it to store all sorts of
application specific data.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T022231Z" creationid="mokoo" creationdate="20190309T074359Z">
        <seg>ホームディレクトリは、アプリケーションがpublic, templatesディレクトリを検索する場所です。ここにあらゆる種類のアプリケーションデータを保存することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the heart of every full L&lt;Mojolicious&gt; application and always gets
instantiated during server startup.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This is the heart of every full [[Mojolicious]] application and always gets
instantiated during server startup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This method will be called by L&lt;Mojolicious::Plugins&gt; at startup time.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This method will be called by [[Mojolicious::Plugins]] at startup time.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This object initializes a L&lt;Mojo::UserAgent&gt; object and provides a variety of
test assertion methods for accessing a web application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This object initializes a [[Mojo::UserAgent]] object and provides a variety of
test assertion methods for accessing a web application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This object initializes a L&lt;Mojo::UserAgent&gt; object, loads the Mojolicious
application C&lt;Frogs&gt;, binds and listens on a free TCP port (e.g., 32114), and
starts the application event loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This object initializes a [[Mojo::UserAgent]] object, loads the Mojolicious
application C&lt;Frogs&gt;, binds and listens on a free TCP port (e.g., 32114), and
starts the application event loop.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This second invocation will load the application again, detect the process id
file with it, and send a L&lt;/"USR2"&gt; signal to the already running server.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This second invocation will load the application again, detect the process id
file with it, and send a [[/"USR2"]] signal to the already running server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This section describes some complex (but common) testing situations that
L&lt;Test::Mojo&gt; excels in making simple.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This section describes some complex (but common) testing situations that
[[Test::Mojo]] excels in making simple.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This section describes the basic test assertions supplied by L&lt;Test::Mojo&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This section describes the basic test assertions supplied by [[Test::Mojo]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This selector is part of
L&lt;Selectors Level 4|http://dev.w3.org/csswg/selectors-4&gt;, which is still a work
in progress.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This selector is part of
[[Selectors Level 4|http://dev.w3.org/csswg/selectors-4]], which is still a work
in progress.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This statefulness also enables L&lt;Test::Mojo&gt; to handle sessions, follow
redirects, and inspect past responses during a redirect.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This statefulness also enables [[Test::Mojo]] to handle sessions, follow
redirects, and inspect past responses during a redirect.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This timeout
defaults to C&lt;30&gt; seconds and can be extended with the attribute
L&lt;Mojo::Server::Prefork/"heartbeat_timeout"&gt; if your application requires it.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>This timeout
defaults to C&lt;30&gt; seconds and can be extended with the attribute
[[Mojo::Server::Prefork/"heartbeat_timeout"]] if your application requires it.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Timers, another primary feature of the event loop, are created with
L&lt;Mojo::IOLoop/"timer"&gt; and can, for example, be used to delay rendering of a
response, and unlike C&lt;sleep&gt;, won't block any other requests that might be
processed concurrently.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Timers, another primary feature of the event loop, are created with
[[Mojo::IOLoop/"timer"]] and can, for example, be used to delay rendering of a
response, and unlike C&lt;sleep&gt;, won't block any other requests that might be
processed concurrently.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To build HTML forms more
efficiently, you can also use tag helpers like
L&lt;Mojolicious::Plugin::TagHelpers/"form_for"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190309T115602Z">
        <seg>HTMLフォームを効率的に構築するために、
[[Mojolicious::Plugin::TagHelpers]]のC&lt;form_for&gt;のような
タグヘルパーを使うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To build HTML forms more efficiently you can use tag helpers like
L&lt;Mojolicious::Plugin::TagHelpers/"form_for"&gt;, which can automatically select a
request method for you if a route name is provided.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To build HTML forms more efficiently you can use tag helpers like
[[Mojolicious::Plugin::TagHelpers/"form_for"]], which can automatically select a
request method for you if a route name is provided.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To change MIME type mappings for
the C&lt;Accept&gt; request header or the C&lt;Content-Type&gt; response header you can use
L&lt;Mojolicious/"types"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To change MIME type mappings for
the C&lt;Accept&gt; request header or the C&lt;Content-Type&gt; response header you can use
[[Mojolicious/"types"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To check or get the name of the current route you can use the helper
L&lt;Mojolicious::Plugin::DefaultHelpers/"current_route"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To check or get the name of the current route you can use the helper
[[Mojolicious::Plugin::DefaultHelpers/"current_route"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create a bare L&lt;Test::Mojo&gt; object:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To create a bare [[Test::Mojo]] object:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To end the stream you can call
L&lt;Mojolicious::Controller/"finish"&gt; or write an empty chunk of data.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To end the stream you can call
[[Mojolicious::Controller/"finish"]] or write an empty chunk of data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To make route generation more expressive, you can also add your own shortcuts
with L&lt;Mojolicious::Routes/"add_shortcut"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To make route generation more expressive, you can also add your own shortcuts
with [[Mojolicious::Routes/"add_shortcut"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To manage L&lt;Hypnotoad|Mojo::Server::Hypnotoad&gt; with systemd, you can use a unit
configuration file like this.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To manage [[Hypnotoad|Mojo::Server::Hypnotoad]] with systemd, you can use a unit
configuration file like this.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To protect you from excessively large files there is also a limit of 16MiB by
default, which you can tweak with the attribute
L&lt;Mojolicious/"max_request_size"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134639Z" creationid="mokoo" creationdate="20190309T122318Z">
        <seg>極端に大きなファイルから保護するために、デフォルトでC&lt;16MB&gt;の制限があります。サイズは[[Mojolicious]]のC&lt;max_request_size&gt; 属性で変更できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To protect you from excessively large files there is also a limit of 2GiB by
default, which you can tweak with the attribute
L&lt;Mojo::UserAgent/"max_response_size"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To protect you from excessively large files there is also a limit of 2GiB by
default, which you can tweak with the attribute
[[Mojo::UserAgent/"max_response_size"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To separate them from the surrounding text, you can surround your placeholders
with C&lt;E&lt;lt&gt;&gt; and C&lt;E&lt;gt&gt;&gt;, which also makes the colon prefix optional.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T030530Z" creationid="mokoo" creationdate="20190309T070902Z">
        <seg>プレースホルダーを周囲の文字列と区別するためには、 C&lt;E&lt;lt&gt;&gt; と C&lt;E&lt;gt&gt;&gt; で囲みます。こうした場合、プレフィックスのコロンはオプションになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To set a C&lt;layout&gt; stash value application-wide you can use
L&lt;Mojolicious/"defaults"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To set a C&lt;layout&gt; stash value application-wide you can use
[[Mojolicious/"defaults"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To share code with multiple nested routes you can use
L&lt;Mojolicious::Routes::Route/"under"&gt;, because unlike normal nested routes, the
routes generated with it have their own intermediate destination and result in
additional dispatch cycles when they match.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To share code with multiple nested routes you can use
[[Mojolicious::Routes::Route/"under"]], because unlike normal nested routes, the
routes generated with it have their own intermediate destination and result in
additional dispatch cycles when they match.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To solve these problems, you can configure your reverse proxy to send the
missing data (see L&lt;/Nginx&gt; and L&lt;/"Apache/mod_proxy"&gt;) and tell your
application about it by setting the environment variable C&lt;MOJO_REVERSE_PROXY&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To solve these problems, you can configure your reverse proxy to send the
missing data (see [[/Nginx]] and [[/"Apache/mod_proxy"]]) and tell your
application about it by setting the environment variable C&lt;MOJO_REVERSE_PROXY&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To start applications with it you can use the
L&lt;hypnotoad&gt; script, which listens on port C&lt;8080&gt;, automatically daemonizes
the server process and defaults to C&lt;production&gt; mode for L&lt;Mojolicious&gt; and
L&lt;Mojolicious::Lite&gt; applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To start applications with it you can use the
[[hypnotoad]] script, which listens on port C&lt;8080&gt;, automatically daemonizes
the server process and defaults to C&lt;production&gt; mode for [[Mojolicious&gt; and
[[Mojolicious::Lite]] applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To start applications with it you can use the L&lt;hypnotoad&gt; script, which
listens on port C&lt;8080&gt;, automatically daemonizes the server process and
defaults to C&lt;production&gt; mode for L&lt;Mojolicious&gt; and L&lt;Mojolicious::Lite&gt;
applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To start applications with it you can use the [[hypnotoad]] script, which
listens on port C&lt;8080&gt;, automatically daemonizes the server process and
defaults to C&lt;production&gt; mode for [[Mojolicious]] and L&lt;Mojolicious::Lite&gt;
applications.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To start applications with it you can use the L&lt;morbo&gt;
script.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To start applications with it you can use the [[morbo]]
script.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To start applications with it you can use the L&lt;morbo&gt; script.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To start applications with it you can use the [[morbo]] script.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To test this new feature, we don't even need to create a configuration file—we
can simply pass the configuration data to the application directly via
L&lt;Test::Mojo&gt;'s constructor:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>To test this new feature, we don't even need to create a configuration file—we
can simply pass the configuration data to the application directly via
[[Test::Mojo]]'s constructor:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Transaction builder, defaults to a L&lt;Mojo::UserAgent::Transactor&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Transaction builder, defaults to a [[Mojo::UserAgent::Transactor]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Transparent CGI and L&lt;PSGI&gt; support out of the box.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Transparent CGI and [[PSGI]] support out of the box.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Trim whitespace characters from both ends of bytestream with
L&lt;Mojo::Util/"trim"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Trim whitespace characters from both ends of bytestream with
[[Mojo::Util/"trim"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Trim whitespace characters from both ends of string value with
L&lt;Mojo::Util/"trim"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Trim whitespace characters from both ends of string value with
[[Mojo::Util/"trim"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>True if L&lt;IO::Socket::SOCKS&gt; 0.64+ is installed and SOCKS5 support enabled.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>True if [[IO::Socket::SOCKS]] 0.64+ is installed and SOCKS5 support enabled.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>True if L&lt;IO::Socket::SSL&gt; 2.009+ is installed and TLS support enabled.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>True if [[IO::Socket::SSL]] 2.009+ is installed and TLS support enabled.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>True if L&lt;Net::DNS::Native&gt; 0.15+ is installed and non-blocking name resolution
support enabled.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>True if [[Net::DNS::Native]] 0.15+ is installed and non-blocking name resolution
support enabled.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>True, this is a L&lt;Mojo::Asset::File&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012451Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>True, this is a [[Mojo::Asset::File]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>True, this is a L&lt;Mojo::Content::MultiPart&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>True, this is a [[Mojo::Content::MultiPart]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>True, this is a L&lt;Mojo::Transaction::WebSocket&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>True, this is a [[Mojo::Transaction::WebSocket]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Try to detect if content size exceeds L&lt;/"max_memory_size"&gt; limit and
automatically upgrade to a L&lt;Mojo::Asset::File&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012411Z">
        <seg>Try to detect if content size exceeds [[/"max_memory_size"]] limit and
automatically upgrade to a [[Mojo::Asset::File]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Try to detect multipart content and automatically upgrade to a
L&lt;Mojo::Content::MultiPart&gt; object, defaults to a true value.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Try to detect multipart content and automatically upgrade to a
[[Mojo::Content::MultiPart]] object, defaults to a true value.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Try to render content and return it wrapped in a L&lt;Mojo::ByteStream&gt; object or
return C&lt;undef&gt;, all arguments get localized automatically and are only
available during this render operation, takes the same arguments as
L&lt;/"render"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Try to render content and return it wrapped in a [[Mojo::ByteStream]] object or
return C&lt;undef&gt;, all arguments get localized automatically and are only
available during this render operation, takes the same arguments as
[[/"render"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Try to render content, but do not call
L&lt;Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt&gt;not_found"&gt; if no response
could be generated, all arguments get localized automatically and are only
available during this render operation, takes the same arguments as
L&lt;/"render"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Try to render content, but do not call
[[Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt]]not_found"]] if no response
could be generated, all arguments get localized automatically and are only
available during this render operation, takes the same arguments as
[[/"render"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Turn L&lt;Mojolicious&gt; application into L&lt;PSGI&gt; application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Turn [[Mojolicious]] application into [[PSGI]] application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Turn bytestream into L&lt;Mojo::Collection&gt; object containing L&lt;Mojo::ByteStream&gt;
objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Turn bytestream into [[Mojo::Collection]] object containing [[Mojo::ByteStream]]
objects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Turn collection into L&lt;Mojo::ByteStream&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Turn collection into [[Mojo::ByteStream]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Turn list into a L&lt;Mojo::Collection&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Turn list into a [[Mojo::Collection]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Turn string into a L&lt;Mojo::ByteStream&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Turn string into a [[Mojo::ByteStream]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Uncompress bytes with L&lt;IO::Compress::Gunzip&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Uncompress bytes with [[IO::Compress::Gunzip]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Uncompress bytestream with L&lt;Mojo::Util/"gunzip"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Uncompress bytestream with [[Mojo::Util/"gunzip"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Under the hood, L&lt;Test::Mojo&gt; creates a new
L&lt;Mojo::Server&gt; instance, loads C&lt;MyApp&gt; (which we just created), and runs the
application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Under the hood, [[Test::Mojo]] creates a new
[[Mojo::Server]] instance, loads C&lt;MyApp&gt; (which we just created), and runs the
application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Unescape all HTML entities in bytestream with L&lt;Mojo::Util/"html_unescape"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Unescape all HTML entities in bytestream with [[Mojo::Util/"html_unescape"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Unindent bytestream with L&lt;Mojo::Util/"unindent"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Unindent bytestream with [[Mojo::Util/"unindent"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Unquote bytestream with L&lt;Mojo::Util/"unquote"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Unquote bytestream with [[Mojo::Util/"unquote"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojo::IOLoop/"stream"&gt; to find the current connection and increase
timeout if possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojo::IOLoop/"stream"]] to find the current connection and increase
timeout if possible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::Author::cpanify&gt; for uploading files to CPAN.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::Author::cpanify]] for uploading files to CPAN.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::Author::generate::app&gt; to generate application
directory structure for a fully functional L&lt;Mojolicious&gt; application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::Author::generate::app]] to generate application
directory structure for a fully functional [[Mojolicious]] application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::Author::generate::lite_app&gt; to generate a fully
functional L&lt;Mojolicious::Lite&gt; application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::Author::generate::lite_app]] to generate a fully
functional [[Mojolicious::Lite]] application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::Author::generate::makefile&gt; to generate
C&lt;Makefile.PL&gt; file for application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::Author::generate::makefile]] to generate
C&lt;Makefile.PL&gt; file for application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::Author::generate::plugin&gt; to generate directory
structure for a fully functional L&lt;Mojolicious&gt; plugin.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::Author::generate::plugin]] to generate directory
structure for a fully functional [[Mojolicious]] plugin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::Author::inflate&gt; to turn templates and static files
embedded in the C&lt;DATA&gt; sections of your application into real files.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::Author::inflate]] to turn templates and static files
embedded in the C&lt;DATA&gt; sections of your application into real files.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::cgi&gt; to start application with CGI backend, usually
auto detected.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::cgi]] to start application with CGI backend, usually
auto detected.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::daemon&gt; to start application with standalone HTTP
and WebSocket server.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::daemon]] to start application with standalone HTTP
and WebSocket server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::eval&gt; to run code against application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::eval]] to run code against application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::get&gt; to perform requests to remote host or local
application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::get]] to perform requests to remote host or local
application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::prefork&gt; to start application with standalone
pre-forking HTTP and WebSocket server.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::prefork]] to start application with standalone
pre-forking HTTP and WebSocket server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::psgi&gt; to start application with PSGI backend,
usually auto detected.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::psgi]] to start application with PSGI backend,
usually auto detected.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::routes&gt; to list application routes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::routes]] to list application routes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use L&lt;Mojolicious::Command::version&gt; to show version information for available
core and optional modules, very useful for debugging.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use [[Mojolicious::Command::version]] to show version information for available
core and optional modules, very useful for debugging.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Use an already prepared L&lt;IO::Socket::IP&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Use an already prepared [[IO::Socket::IP]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Used to render content, defaults to a L&lt;Mojolicious::Renderer&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Used to render content, defaults to a [[Mojolicious::Renderer]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>User agent used for testing, defaults to a L&lt;Mojo::UserAgent&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>User agent used for testing, defaults to a [[Mojo::UserAgent]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Username part of L&lt;/"userinfo"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Username part of [[/"userinfo"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Validate values, defaults to a L&lt;Mojolicious::Validator&gt; object.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Validate values, defaults to a [[Mojolicious::Validator]] object.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Validation checks can be registered with L&lt;Mojolicious::Validator/"add_check"&gt;
and return a false value if they were successful.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Validation checks can be registered with [[Mojolicious::Validator/"add_check"]]
and return a false value if they were successful.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Value needs to be a L&lt;Mojo::Upload&gt; object, representing a file upload.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Value needs to be a [[Mojo::Upload]] object, representing a file upload.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Versatile L&lt;Mojo::Transaction::HTTP&gt; transaction builder for WebSocket
handshake requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Versatile [[Mojo::Transaction::HTTP]] transaction builder for WebSocket
handshake requests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Versatile general purpose L&lt;Mojo::Transaction::HTTP&gt; transaction builder for
requests, with support for L&lt;/"GENERATORS"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Versatile general purpose [[Mojo::Transaction::HTTP]] transaction builder for
requests, with support for [[/"GENERATORS"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We
wrap that in the C&lt;success&gt; attribute, which records the boolean test result and
propagates the L&lt;Test::Mojo&gt; object for method chaining.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We
wrap that in the C&lt;success&gt; attribute, which records the boolean test result and
propagates the [[Test::Mojo]] object for method chaining.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We are optimizing L&lt;Mojolicious&gt; for user-friendliness and development speed,
without compromises.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We are optimizing [[Mojolicious]] for user-friendliness and development speed,
without compromises.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We assign a default description value (C&lt;$desc&gt;), set the L&lt;Test::Builder&gt;
C&lt;Level&gt; global variable one level higher (which tells L&lt;Test::Builder&gt; how far
up the call stack to look when something fails), then we use L&lt;Test::More&gt;'s
C&lt;is&gt; function to compare the location header with the expected header value.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We assign a default description value (C&lt;$desc&gt;), set the [[Test::Builder]]
C&lt;Level&gt; global variable one level higher (which tells [[Test::Builder]] how far
up the call stack to look when something fails), then we use [[Test::More]]'s
C&lt;is&gt; function to compare the location header with the expected header value.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We can
test the application by creating a L&lt;Mojo::Transaction&gt; object, setting the
cookie (see L&lt;Mojo::Message::Request&gt;), then passing the transaction object to
C&lt;request_ok&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We can
test the application by creating a [[Mojo::Transaction]] object, setting the
cookie (see [[Mojo::Message::Request]]), then passing the transaction object to
C&lt;request_ok&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We can also inspect HTML and XML responses using the L&lt;Mojo::DOM&gt; parser in the
user agent.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We can also inspect HTML and XML responses using the [[Mojo::DOM]] parser in the
user agent.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We can also inspect cookies in responses for special values through the
transaction's response (L&lt;Mojo::Message::Response&gt;) object:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We can also inspect cookies in responses for special values through the
transaction's response ([[Mojo::Message::Response]]) object:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We can tell the user agent in L&lt;Test::Mojo&gt; how to deal with redirects.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We can tell the user agent in [[Test::Mojo]] how to deal with redirects.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We can use L&lt;Test::Mojo&gt; to test applications that keep session state in
cookies.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We can use [[Test::Mojo]] to test applications that keep session state in
cookies.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We differentiate between default helpers, which are more general purpose like
L&lt;Mojolicious::Plugin::DefaultHelpers/"dumper"&gt;, and tag helpers like
L&lt;Mojolicious::Plugin::TagHelpers/"link_to"&gt;, which are template specific and
mostly used to generate HTML tags.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We differentiate between default helpers, which are more general purpose like
[[Mojolicious::Plugin::DefaultHelpers/"dumper"]], and tag helpers like
[[Mojolicious::Plugin::TagHelpers/"link_to"]], which are template specific and
mostly used to generate HTML tags.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We use the L&lt;GitHub issue tracker|https://github.com/mojolicious/mojo/issues&gt;, 
so you'll need to create a (free) GitHub account to be able to submit issues,
comments and pull requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We use the [[GitHub issue tracker|https://github.com/mojolicious/mojo/issues]], 
so you'll need to create a (free) GitHub account to be able to submit issues,
comments and pull requests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We will start by extracting all actions from C&lt;myapp.pl&gt; and turn them into
simplified hybrid routes in the L&lt;Mojolicious::Routes&gt; router, none of the
actual action code needs to be changed.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We will start by extracting all actions from C&lt;myapp.pl&gt; and turn them into
simplified hybrid routes in the [[Mojolicious::Routes]] router, none of the
actual action code needs to be changed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We write our tests with relative URLs because L&lt;Test::Mojo&gt; takes
care of getting the request to the running test application (since its port may
change between runs).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We write our tests with relative URLs because [[Test::Mojo]] takes
care of getting the request to the running test application (since its port may
change between runs).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We'd love to discuss your contributions to L&lt;Mojolicious&gt; on our official IRC
channel C&lt;#mojo&gt; on C&lt;irc.freenode.net&gt; (L&lt;chat
now!|https://kiwiirc.com/nextclient/#irc://irc.freenode.net/mojo?nick=guest-?&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We'd love to discuss your contributions to [[Mojolicious]] on our official IRC
channel C&lt;#mojo&gt; on C&lt;irc.freenode.net&gt; (L&lt;chat
now!|https://kiwiirc.com/nextclient/#irc://irc.freenode.net/mojo?nick=guest-?&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We'll create a new class with
L&lt;Role::Tiny&gt; that implements a test assertion named C&lt;location_is&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>We'll create a new class with
[[Role::Tiny]] that implements a test assertion named C&lt;location_is&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Weaken attribute reference to avoid
L&lt;circular references|perlref/"Circular-References"&gt; and memory leaks.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Weaken attribute reference to avoid
[[circular references|perlref/"Circular-References"]] and memory leaks.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>WebSocket applications have never been this simple before.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134904Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>WebSocketアプリケーションはこれまでに見たこともないくらい簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>WebSocket test assertions are covered in L&lt;/Testing WebSocket web services&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>WebSocket test assertions are covered in [[/Testing WebSocket web services]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>WebSockets are not just for the server-side, you can use
L&lt;Mojo::UserAgent/"websocket_p"&gt; to open new connections, which are always
non-blocking.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>WebSockets are not just for the server-side, you can use
[[Mojo::UserAgent/"websocket_p"]] to open new connections, which are always
non-blocking.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What you can do instead,
is to use a L&lt;Mojolicious::Plugin::Config&gt; or L&lt;Mojolicious::Plugin::JSONConfig&gt;
configuration file.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>What you can do instead,
is to use a [[Mojolicious::Plugin::Config]] or [[Mojolicious::Plugin::JSONConfig]]
configuration file.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When all code
references generated by this method have been executed and the event counter has
reached zero, L&lt;/"steps"&gt; will continue.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>When all code
references generated by this method have been executed and the event counter has
reached zero, [[/"steps"]] will continue.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When downloading large files with L&lt;Mojo::UserAgent&gt; you don't have to worry
about memory usage at all, because it will automatically stream everything
above 250KiB into a temporary file, which can then be moved into a permanent
file with L&lt;Mojo::Message/"save_to"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>When downloading large files with [[Mojo::UserAgent]] you don't have to worry
about memory usage at all, because it will automatically stream everything
above 250KiB into a temporary file, which can then be moved into a permanent
file with [[Mojo::Message/"save_to"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When either happens, the associated handlers queued up by a promise's
L&lt;/"then"&gt; method are called.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>When either happens, the associated handlers queued up by a promise's
[[/"then"]] method are called.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When the L&lt;Test::Mojo&gt; object (C&lt;$t&gt;) goes
out of scope, the application is stopped.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>When the [[Test::Mojo]] object (C&lt;$t&gt;) goes
out of scope, the application is stopped.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When we make new test assertions using roles, we want to use method signatures
that match other C&lt;*_is&gt; methods in L&lt;Test::Mojo&gt;, so here we accept the test
object, the value to compare, and an optional description.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T014010Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>When we make new test assertions using roles, we want to use method signatures
that match other C&lt;*_is&gt; methods in [[Test::Mojo]], so here we accept the test
object, the value to compare, and an optional description.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When we run these tests, L&lt;Test::Mojo&gt; will pass this configuration data to the
application, which will cause it to create a special C&lt;/weather&gt; route that we
can access in our tests.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>When we run these tests, [[Test::Mojo]] will pass this configuration data to the
application, which will cause it to create a special C&lt;/weather&gt; route that we
can access in our tests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When we say L&lt;Mojolicious&gt; is a web framework we actually mean it, with
L&lt;Mojo::UserAgent&gt; there's a full featured HTTP and WebSocket user agent built
right in.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>When we say [[Mojolicious]] is a web framework we actually mean it, with
[[Mojo::UserAgent]] there's a full featured HTTP and WebSocket user agent built
right in.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Which in turn allows
other event loops like L&lt;AnyEvent&gt; to just work.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Which in turn allows
other event loops like [[AnyEvent]] to just work.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While L&lt;Mojolicious::Guides::Growing&gt; will give you a detailed introduction to
growing a L&lt;Mojolicious::Lite&gt; prototype into a well-structured L&lt;Mojolicious&gt;
application, here we have collected a few snippets that illustrate very well
just how similar both of them are.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>While [[Mojolicious::Guides::Growing]] will give you a detailed introduction to
growing a [[Mojolicious::Lite]] prototype into a well-structured [[Mojolicious]]
application, here we have collected a few snippets that illustrate very well
just how similar both of them are.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While L&lt;Mojolicious&gt; has been designed from the ground up for non-blocking I/O
and event loops, it is not possible to magically make Perl code non-blocking.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>While [[Mojolicious]] has been designed from the ground up for non-blocking I/O
and event loops, it is not possible to magically make Perl code non-blocking.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While L&lt;Test::Mojo&gt; can be used to test any web application, it has shortcuts
designed to make testing L&lt;Mojolicious&gt; web applications easy and pain-free.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>While [[Test::Mojo]] can be used to test any web application, it has shortcuts
designed to make testing [[Mojolicious]] web applications easy and pain-free.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While all node types are represented as L&lt;Mojo::DOM&gt; objects, some methods like
L&lt;/"attr"&gt; and L&lt;/"namespace"&gt; only apply to elements.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>While all node types are represented as [[Mojo::DOM]] objects, some methods like
[[/"attr"]] and [[/"namespace"]] only apply to elements.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While many
parts of L&lt;Mojolicious&gt; have been forked in the past, very few forks have been
able to keep up with L&lt;Mojolicious&gt; development, and most are missing critical
bug fixes.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>While many
parts of [[Mojolicious]] have been forked in the past, very few forks have been
able to keep up with [[Mojolicious]] development, and most are missing critical
bug fixes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While methods like L&lt;Mojo::Message::Response/"is_success"&gt; and
L&lt;Mojo::Message::Response/"is_error"&gt; serve as building blocks for more
sophisticated REST clients.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>While methods like [[Mojo::Message::Response/"is_success"]] and
[[Mojo::Message::Response/"is_error"]] serve as building blocks for more
sophisticated REST clients.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While post-processing tasks are generally very easy with the hook
L&lt;Mojolicious/"after_dispatch"&gt;, for content generated by the renderer it is a
lot more efficient to use L&lt;Mojolicious/"after_render"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>While post-processing tasks are generally very easy with the hook
[[Mojolicious/"after_dispatch"]], for content generated by the renderer it is a
lot more efficient to use [[Mojolicious/"after_render"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While the L&lt;Mojolicious::Guides&gt; are carefully
curated by the core team, everybody with a (free) GitHub account can make
changes and add new information to the
L&lt;Mojolicious wiki|http://github.com/mojolicious/mojo/wiki&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>While the [[Mojolicious::Guides]] are carefully
curated by the core team, everybody with a (free) GitHub account can make
changes and add new information to the
[[Mojolicious wiki|http://github.com/mojolicious/mojo/wiki]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While the L&lt;Mojolicious&gt; distribution covers a wide range of features, we are
rather conservative when it comes to adding new ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>While the [[Mojolicious]] distribution covers a wide range of features, we are
rather conservative when it comes to adding new ones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While the message flow on WebSocket connections can be rather dynamic, it more
often than not is quite predictable, which allows this rather pleasant
L&lt;Test::Mojo&gt; WebSocket API to be used:</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>While the message flow on WebSocket connections can be rather dynamic, it more
often than not is quite predictable, which allows this rather pleasant
[[Test::Mojo]] WebSocket API to be used:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While there are no rules in
L&lt;Mojolicious::Guides::Contributing&gt; that forbid dependencies, we do currently
discourage adding non-optional ones in favor of a faster and more painless
installation process.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>While there are no rules in
[[Mojolicious::Guides::Contributing]] that forbid dependencies, we do currently
discourage adding non-optional ones in favor of a faster and more painless
installation process.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Wildcard placeholders allow matching absolutely everything, including C&lt;/&gt; and
C&lt;.&gt;, similar to the regular expression C&lt;(.+)&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130402Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>ワイルドカードプレースホルダを使用すると、C&lt;/&gt;とC&lt;.&gt;を含むすべてにマッチさせることができます。正規表現のC&lt;(.+)&gt;に似ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Windows is not officially supported by L&lt;Mojolicious&gt;, even though we try to
keep the distribution installable.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Windows is not officially supported by [[Mojolicious]], even though we try to
keep the distribution installable.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With L&lt;Mojo::UserAgent&gt;, which is available through the helper
L&lt;Mojolicious::Plugin::DefaultHelpers/"ua"&gt;, there's a full featured HTTP and
WebSocket user agent built right in.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>[[Mojo::UserAgent]]は、完全に機能を備えたHTTP 1.1とWebSocketの組み込みのユーザーエージェントです。[[Mojolicious::Plugin::DefaultHelpers]]のC&lt;ua&gt;を通して利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With L&lt;Mojolicious::Command::Author::generate::lite_app&gt; there is also a helper
command to generate a small example application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T122912Z" creationid="mokoo" creationdate="20190309T062011Z">
        <seg>[[Mojolicious::Command::Author::generate::lite_app]] には、小さなアプリケーションサンプルを生成するためのヘルパーコマンドがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With the emergence of the real-time web and
new technologies such as WebSockets, we are facing new challenges that go way
beyond what commonly used modules like L&lt;LWP&gt; were designed for.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>With the emergence of the real-time web and
new technologies such as WebSockets, we are facing new challenges that go way
beyond what commonly used modules like [[LWP]] were designed for.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With the method L&lt;Mojolicious::Routes::Route/"detour"&gt; which is very similar to
L&lt;Mojolicious::Routes::Route/"to"&gt;, you can allow the route to partially match
and use only the remaining path in the embedded application, the base path will
be passed along in the C&lt;path&gt; stash value.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>With the method [[Mojolicious::Routes::Route/"detour"]] which is very similar to
[[Mojolicious::Routes::Route/"to"]], you can allow the route to partially match
and use only the remaining path in the embedded application, the base path will
be passed along in the C&lt;path&gt; stash value.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With the method L&lt;Mojolicious::Routes::Route/"websocket"&gt; you can restrict
access to WebSocket handshakes, which are normal C&lt;GET&gt; requests with some
additional information.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>With the method [[Mojolicious::Routes::Route/"websocket"]] you can restrict
access to WebSocket handshakes, which are normal C&lt;GET&gt; requests with some
additional information.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Wrapping the helper result
into a L&lt;Mojo::ByteStream&gt; object can prevent accidental double escaping.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Wrapping the helper result
into a [[Mojo::ByteStream]] object can prevent accidental double escaping.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Write data client-side, used to implement user agents such as
L&lt;Mojo::UserAgent&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Write data client-side, used to implement user agents such as
[[Mojo::UserAgent]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Write data server-side, used to implement web servers such as
L&lt;Mojo::Server::Daemon&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>Write data server-side, used to implement web servers such as
[[Mojo::Server::Daemon]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>XOR encode bytestream with L&lt;Mojo::Util/"xor_encode"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>XOR encode bytestream with [[Mojo::Util/"xor_encode"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can activate C&lt;permessage-deflate&gt; compression with
L&lt;Mojo::Transaction::WebSocket/"with_compression"&gt;, this can result in much
better performance, but also increases memory usage by up to 300KiB per
connection.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can activate C&lt;permessage-deflate&gt; compression with
[[Mojo::Transaction::WebSocket/"with_compression"]], this can result in much
better performance, but also increases memory usage by up to 300KiB per
connection.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also add your own conditions with the method
L&lt;Mojolicious::Routes/"add_condition"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can also add your own conditions with the method
[[Mojolicious::Routes/"add_condition"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also change the default namespaces for all routes in the application
with the router attribute L&lt;Mojolicious::Routes/"namespaces"&gt;, which usually
defaults to a namespace based on the application class (C&lt;MyApp::Controller&gt;),
as well as the bare application class (C&lt;MyApp&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can also change the default namespaces for all routes in the application
with the router attribute [[Mojolicious::Routes/"namespaces"]], which usually
defaults to a namespace based on the application class (C&lt;MyApp::Controller&gt;),
as well as the bare application class (C&lt;MyApp&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also disable automatic rendering with the method
L&lt;Mojolicious::Controller/"render_later"&gt;, which can be very useful to delay
rendering when a non-blocking operation has to be performed first.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can also disable automatic rendering with the method
[[Mojolicious::Controller/"render_later"]], which can be very useful to delay
rendering when a non-blocking operation has to be performed first.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also group related routes with L&lt;Mojolicious::Lite/"group"&gt;, which
allows nesting of routes generated with L&lt;Mojolicious::Lite/"under"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T131831Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>[[Mojolicious::Lite]]のC&lt;group&gt;で関連するルーティングをグループ化(C&lt;group&gt;)することもできます。これによって、C&lt;under&gt;で生成したルートをネストできるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also introspect your application from the command line with
L&lt;Mojolicious::Command::eval&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134056Z" creationid="mokoo" creationdate="20190309T074852Z">
        <seg>[[Mojolicious::Command::eval]] を使うことでも、コマンドラインからアプリケーションを検証できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also render them manually
with the helpers L&lt;Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt&gt;exception"&gt;
and L&lt;Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt&gt;not_found"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013241Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can also render them manually
with the helpers [[Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt]]exception"]]
and [[Mojolicious::Plugin::DefaultHelpers/"reply-E&lt;gt]]not_found"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also set the
C&lt;MOJO_FATAL_DEPRECATIONS&gt; environment variable to make them die instead with
L&lt;Carp&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can also set the
C&lt;MOJO_FATAL_DEPRECATIONS&gt; environment variable to make them die instead with
[[Carp]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use
L&lt;Mojolicious::Plugin::DefaultHelpers/"param"&gt; to set them manually and let
necessary attributes always be generated automatically.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can also use
[[Mojolicious::Plugin::DefaultHelpers/"param"]] to set them manually and let
necessary attributes always be generated automatically.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use L&lt;Mojo::IOLoop/"one_tick"&gt; to embed the built-in web server
L&lt;Mojo::Server::Daemon&gt; into alien environments like foreign event loops that
for some reason can't just be integrated with a new reactor backend.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can also use [[Mojo::IOLoop/"one_tick"]] to embed the built-in web server
[[Mojo::Server::Daemon]] into alien environments like foreign event loops that
for some reason can't just be integrated with a new reactor backend.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use L&lt;Mojo::Transaction::WebSocket/"with_protocols"&gt; to negotiate a
subprotocol.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can also use [[Mojo::Transaction::WebSocket/"with_protocols"]] to negotiate a
subprotocol.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use subprocesses, created with L&lt;Mojo::IOLoop/"subprocess"&gt;, to
perform computationally expensive operations without blocking the event loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can also use subprocesses, created with [[Mojo::IOLoop/"subprocess"]], to
perform computationally expensive operations without blocking the event loop.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use the helper L&lt;Mojolicious::Plugin::DefaultHelpers/"url_with"&gt;
to inherit query parameters from the current request.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can also use the helper [[Mojolicious::Plugin::DefaultHelpers/"url_with"]]
to inherit query parameters from the current request.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can assign a name with L&lt;Mojolicious::Routes::Route/"name"&gt;, or let the
router generate one automatically, which would be equal to the route itself
without non-word characters, custom names have a higher precedence though.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can assign a name with [[Mojolicious::Routes::Route/"name"]], or let the
router generate one automatically, which would be equal to the route itself
without non-word characters, custom names have a higher precedence though.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can call L&lt;/"finish"&gt; or write an empty chunk of data at any time to end
the stream.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can call [[/"finish"]] or write an empty chunk of data at any time to end
the stream.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can change the
passphrase with the attribute L&lt;Mojolicious/"secrets"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can change the
passphrase with the attribute [[Mojolicious/"secrets"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can check for
connection errors with L&lt;Mojo::Transaction/"result"&gt;, or access HTTP request and
response information directly through L&lt;Mojo::Transaction/"req"&gt; and
L&lt;Mojo::Transaction/"res"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can check for
connection errors with [[Mojo::Transaction/"result"]], or access HTTP request and
response information directly through [[Mojo::Transaction/"req"]] and
[[Mojo::Transaction/"res"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can continue with L&lt;Mojolicious::Guides&gt; now or take a look at the
L&lt;Mojolicious wiki|http://github.com/mojolicious/mojo/wiki&gt;, which contains a
lot more documentation and examples by many different authors.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190314T225429Z" creationid="mokoo" creationdate="20190310T005015Z">
        <seg>さあ、[[Mojolicious::Guides]] を続けるか、[[Mojolicious wiki|http://github.com/mojolicious/mojo/wiki]]を見てみましょう。多くの著者がたくさんのドキュメントやサンプルを書いています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can continue with L&lt;Mojolicious::Guides&gt; now or take a look at the
L&lt;Mojolicious wiki|http://github.com/mojolicious/mojo/wiki&gt;, which contains a lot more
documentation and examples by many different authors.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can continue with [[Mojolicious::Guides]] now or take a look at the
[[Mojolicious wiki|http://github.com/mojolicious/mojo/wiki]], which contains a lot more
documentation and examples by many different authors.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can easily change the whole template syntax by loading
L&lt;Mojolicious::Plugin::EPRenderer&gt; with a custom configuration.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can easily change the whole template syntax by loading
[[Mojolicious::Plugin::EPRenderer]] with a custom configuration.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can even use CSS selectors with L&lt;Mojolicious::Command::get&gt; to extract only
the information you're actually interested in.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190309T064911Z">
        <seg>[[Mojolicious::Command::get]] でCSSセレクタを使えば、実際に知りたい情報だけを取り出すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can just pick
the parts that actually matter with the CSS selectors from L&lt;Mojo::DOM&gt; and
JSON Pointers from L&lt;Mojo::JSON::Pointer&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can just pick
the parts that actually matter with the CSS selectors from [[Mojo::DOM]] and
JSON Pointers from [[Mojo::JSON::Pointer]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can send JSON documents from the command line with
L&lt;Mojolicious::Command::get&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123837Z" creationid="mokoo" creationdate="20190309T064657Z">
        <seg>コマンドラインから[[Mojolicious::Command::get]]を使ってJSONドキュメントを送信できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can support the ongoing
development of L&lt;Mojolicious&gt; through PayPal (C&lt;donations@mojolicious.org&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can support the ongoing
development of [[Mojolicious]] through PayPal (C&lt;donations@mojolicious.org&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can take a closer look at all the generated regular expressions with the
command L&lt;Mojolicious::Command::routes&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T071534Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>生成されたすべての正規表現は、
[[Mojolicious::Command::routes]]で詳しく確認することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can test the more advanced examples right from the command line with
L&lt;Mojolicious::Command::get&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123605Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>[[Mojolicious::Command::get]]を使って、
コマンドラインからより発展的なサンプルをテストできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use L&lt;Mojolicious/"home"&gt; to interact with the directory your
application considers its home.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T020617Z" creationid="mokoo" creationdate="20190309T074154Z">
        <seg>[[Mojolicious]]のC&lt;home&gt; を使うと、アプリケーションがホームとしているディレクトリにアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use L&lt;Mojolicious::Plugin::DefaultHelpers/"validation"&gt; to validate
C&lt;GET&gt; and C&lt;POST&gt; parameters submitted to your application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can use [[Mojolicious::Plugin::DefaultHelpers/"validation"]] to validate
C&lt;GET&gt; and C&lt;POST&gt; parameters submitted to your application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use L&lt;Mojolicious::Renderer/"template_path"&gt; to search the
C&lt;templates&gt; directories of the application, and
L&lt;Mojolicious::Renderer/"get_data_template"&gt; to search the C&lt;DATA&gt; sections.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013319Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can use [[Mojolicious::Renderer/"template_path"]] to search the
C&lt;templates&gt; directories of the application, and
[[Mojolicious::Renderer/"get_data_template"]] to search the C&lt;DATA&gt; sections.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use the L&lt;Mojo::Log&gt; object from L&lt;Mojolicious/"log"&gt; to portably
collect debug messages and automatically disable them later in a production
setup by changing the L&lt;Mojolicious&gt; operating mode, which can also be retrieved
from the attribute L&lt;Mojolicious/"mode"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T135107Z" creationid="mokoo" creationdate="20190309T124746Z">
        <seg>ポータブルにデバッグメッセージを収集するために、[[Mojo]]のC&lt;log&gt;メソッドで[[Mojo::Log]]オブジェクトを利用できます。[[Mojolicious]]の処理モードを変更することによって、後のプロダクション用の設定においてデバッグを自動的に無効化することができます。これは[[Mojolicious]]のC&lt;mode&gt;属性によって読み取り可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use the attributes
L&lt;Mojolicious/"max_request_size"&gt; and L&lt;Mojo::UserAgent/"max_response_size"&gt; to
change these values.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can use the attributes
[[Mojolicious/"max_request_size"]] and [[Mojo::UserAgent/"max_response_size"]] to
change these values.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can usually leave this alone, see
L&lt;Mojolicious::Controller/"session"&gt; for more information about working with
session data.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can usually leave this alone, see
[[Mojolicious::Controller/"session"]] for more information about working with
session data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can wrap
your blocking code in L&lt;subprocesses|Mojo::IOLoop/"subprocess"&gt; though to
prevent it from interfering with your non-blocking code.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You can wrap
your blocking code in [[subprocesses|Mojo::IOLoop/"subprocess"]] though to
prevent it from interfering with your non-blocking code.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You could, for example, just embed the built-in web server into an L&lt;AnyEvent&gt;
application.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You could, for example, just embed the built-in web server into an [[AnyEvent]]
application.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You create
L&lt;Mojo::Promise&gt; objects manually or use methods like L&lt;Mojo::UserAgent/"get_p"&gt;
that create them for you.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You create
[[Mojo::Promise]] objects manually or use methods like [[Mojo::UserAgent/"get_p"]]
that create them for you.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You don't have to render all content at once, the method
L&lt;Mojolicious::Controller/"write"&gt; can also be used to stream a series of
smaller chunks.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You don't have to render all content at once, the method
[[Mojolicious::Controller/"write"]] can also be used to stream a series of
smaller chunks.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to use specialized non-blocking code available through modules like
L&lt;Mojo::IOLoop&gt; and L&lt;Mojo::UserAgent&gt;, or third-party event loops.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T013519Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You have to use specialized non-blocking code available through modules like
[[Mojo::IOLoop]] and [[Mojo::UserAgent]], or third-party event loops.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You just select the right layout template with the helper
L&lt;Mojolicious::Plugin::DefaultHelpers/"layout"&gt; and place the result of the
current template with the helper
L&lt;Mojolicious::Plugin::DefaultHelpers/"content"&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You just select the right layout template with the helper
[[Mojolicious::Plugin::DefaultHelpers/"layout"]] and place the result of the
current template with the helper
[[Mojolicious::Plugin::DefaultHelpers/"content"]].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You likely know the feeling, you've got a really cool idea and want to try it
as quickly as possible, that's exactly why L&lt;Mojolicious::Lite&gt; applications
don't need more than a single file.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You likely know the feeling, you've got a really cool idea and want to try it
as quickly as possible, that's exactly why [[Mojolicious::Lite]] applications
don't need more than a single file.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You might also want to enable proxy support if you're using
L&lt;Hypnotoad|Mojo::Server::Hypnotoad&gt; behind a reverse proxy.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You might also want to enable proxy support if you're using
[[Hypnotoad|Mojo::Server::Hypnotoad]] behind a reverse proxy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You might have seen L&lt;Mojo::Promise/"wait"&gt; already in some examples
above.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T012648Z" creationid="mokoo" creationdate="20190310T012648Z">
        <seg>You might have seen [[Mojo::Promise/"wait"]] already in some examples
above.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your application will automatically reload itself if you start it with the
L&lt;morbo&gt; development web server, so you don't have to restart the server after
every change.</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T004026Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>開発用サーバーのC&lt;morbo&gt;でアプリケーションを起動すれば、
アプリケーションは自動的にリロードされます。ソースコードを変更した後に毎回サーバを再起動させる必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>__DATA__</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>__DATA__;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>app-&gt;log-&gt;debug('Starting application');</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>app-&gt;log-&gt;debug('Starting application.');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>app-&gt;start;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T061919Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>app-&gt;start;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>get '/foo' =&gt; sub {</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>get '/foo' =&gt; sub {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>get '/headers' =&gt; sub {</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025817Z" creationid="mokoo" creationdate="20190316T025817Z">
        <seg># ブロッキング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>get '/hello' =&gt; sub {</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025604Z" creationid="mokoo" creationdate="20190316T025604Z">
        <seg># "hello.html.ep"というテンプレートを描画</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>get '/hello';</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190310T010407Z" creationid="mokoo" creationdate="20190310T010407Z">
        <seg># "hello.html.ep"というテンプレートを描画</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>get '/hello/#you' =&gt; 'groovy';</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T070949Z" creationid="mokoo" creationdate="20190309T070949Z">
        <seg>get '/hello/*you' =&gt; 'groovy';</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>get '/hello/:name' =&gt; {name =&gt; 'Sebastian', day =&gt; 'Monday'} =&gt; sub {</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130758Z" creationid="mokoo" creationdate="20190312T130758Z">
        <seg>get '/hello/:name' =&gt; {name =&gt; 'Sebastian', day =&gt; 'Monday'} =&gt; sub {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>get '/with_block' =&gt; 'block';</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025536Z" creationid="mokoo" creationdate="20190316T025536Z">
        <seg>use Mojolicious::Lite;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>helper whois =&gt; sub {</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T125115Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>helper whois =&gt; sub {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>if $c-&gt;req-&gt;is_limit_exceeded;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134557Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>if $c-&gt;req-&gt;is_limit_exceeded;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>if $c-&gt;stash('format') eq 'json';</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T132234Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>if $c-&gt;stash('format') eq 'json';</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $bar = $c-&gt;param('bar');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T125505Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $bar = $c-&gt;param('bar');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $bar = $c-&gt;stash('bar');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T125452Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $bar = $c-&gt;stash('bar');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $c      = shift;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130654Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $c      = shift;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $c     = shift;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T125145Z" creationid="mokoo" creationdate="20190309T070609Z">
        <seg>my $c     = shift;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $c    = shift;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T123304Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $c    = shift;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $c   = shift;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T125445Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $c   = shift;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $c  = shift;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134817Z" creationid="mokoo" creationdate="20190309T122647Z">
        <seg>my $c  = shift;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $c = shift;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T122823Z" creationid="mokoo" creationdate="20190309T114437Z">
        <seg>my $c = shift;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $foo = $c-&gt;param('foo');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130911Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $foo = $c-&gt;param('foo');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $host = $c-&gt;req-&gt;url-&gt;to_abs-&gt;host;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T022547Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $host = $c-&gt;req-&gt;url-&gt;to_abs-&gt;host;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $ip    = $c-&gt;tx-&gt;remote_address;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T022726Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $ip    = $c-&gt;tx-&gt;remote_address;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $method = $c-&gt;req-&gt;method;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130658Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $method = $c-&gt;req-&gt;method;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $mojo = $c-&gt;ua-&gt;get_p('https://mojolicious.org');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025819Z" creationid="mokoo" creationdate="20190316T025819Z">
        <seg>my $c = shift;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $name = $c-&gt;param('name') || '';</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T131209Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $name = $c-&gt;param('name') || '';</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $size = length $c-&gt;req-&gt;body;</seg>
      </tuv>
      <tuv lang="JA" changeid="OmegaT Aligner" changedate="20190308T115636Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $size = length $self-&gt;req-&gt;body;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $ua   = $c-&gt;req-&gt;headers-&gt;user_agent;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T022550Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $ua   = $c-&gt;req-&gt;headers-&gt;user_agent;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $user = $c-&gt;param('user');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T022517Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $user = $c-&gt;param('user');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $user = $c-&gt;whois;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T125200Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my $user = $c-&gt;whois;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my ($c, $hash) = @_;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T022811Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>my ($c, $hash) = @_;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>return $c-&gt;redirect_to('form') unless my $example = $c-&gt;param('example');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134601Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>return $c-&gt;redirect_to('form') unless my $example = $c-&gt;param('example');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>return $c-&gt;render(json =&gt; {hello =&gt; 'world'})</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T132229Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>return $c-&gt;render(json =&gt; {hello =&gt; 'world'})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>return $c-&gt;render(text =&gt; 'File is too big.', status =&gt; 200)</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T134552Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>return $c-&gt;render(text =&gt; 'File is too big.', status =&gt; 200)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>return 1 if $c-&gt;req-&gt;headers-&gt;header('X-Awesome');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T131933Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>return 1 if $c-&gt;req-&gt;headers-&gt;header('X-Awesome');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>return 1 if $c-&gt;req-&gt;headers-&gt;header('X-Bender');</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T131847Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>return 1 if $c-&gt;req-&gt;headers-&gt;header('X-Bender');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>return 1 if $name eq 'Bender';</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025619Z" creationid="mokoo" creationdate="20190316T025619Z">
        <seg>my $name = $self-&gt;param('name') || '';</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>return undef;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T132720Z" creationid="mokoo" creationdate="20190312T132655Z">
        <seg>return undef;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>under sub {</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025626Z" creationid="mokoo" creationdate="20190316T025626Z">
        <seg># すべてのルートで共有されるグローバルなロジック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>use Mojolicious::Lite;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T061858Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>use Mojolicious::Lite;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>websocket '/echo' =&gt; sub {</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190316T025826Z" creationid="mokoo" creationdate="20190316T025826Z">
        <seg>use Mojolicious::Lite;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>};</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190309T061913Z" creationid="OmegaT Aligner" creationdate="20190308T115636Z">
        <seg>};</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
    <tu>
      <prop type="file">Mojolicious-Guides-Tutorial.txt</prop>
      <prop type="prev">my $c    = shift;</prop>
      <prop type="next">$c-&gt;render(text =&gt; "You uploaded $size bytes to /hello.");</prop>
      <tuv lang="EN">
        <seg>my $size = length $c-&gt;req-&gt;body;</seg>
      </tuv>
      <tuv lang="JA" changeid="mokoo" changedate="20190312T130635Z" creationid="mokoo" creationdate="20190312T130635Z">
        <seg>my $size = length $c-&gt;req-&gt;body;</seg>
      </tuv>
    </tu>
  </body>
</tmx>
